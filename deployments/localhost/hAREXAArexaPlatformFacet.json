{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__ERC1155ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__ERC1155ReceiverRejected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__NotOwnerOrApprovedLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__TransferExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetedPausable__TargetedPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AMOUNT_VALUE_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_AREXAINC",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_DEVELOPMENT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_INVESTOR",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_MARKETING",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_RESERVED",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAGIC_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUANTITY_VALUE_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCR1_TOKEN_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCR2_TOKEN_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADER_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "valueType",
          "type": "uint8"
        }
      ],
      "name": "buyArexaToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "buyEdgeSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyMagic100Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "buyOracleSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "buySubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "valueType",
          "type": "uint8"
        }
      ],
      "name": "buyTraderToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "calcSubscriptionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenType",
          "type": "uint256"
        }
      ],
      "name": "getCurrentSubscriptionTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c68b9827257bb1e1d0a107111db455da0486f72bb3699eb9140e065c7231794",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "4540289",
    "logsBloom": "0x
    "blockHash": "0x504e0cfd10258ca8d92e0f4e74e0526b2c9ede78da7df97e3559ffde4dedbda3",
    "transactionHash": "0x8c68b9827257bb1e1d0a107111db455da0486f72bb3699eb9140e065c7231794",
    "logs": [],
    "blockNumber": 41,
    "cumulativeGasUsed": "4540289",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc16a9ae7444b9d94b4f8a593e68c905",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__ERC1155ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__ERC1155ReceiverRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__NotOwnerOrApprovedLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetedPausable__TargetedPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_VALUE_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_AREXAINC\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_DEVELOPMENT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_INVESTOR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_MARKETING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_RESERVED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAGIC_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUANTITY_VALUE_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCR1_TOKEN_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCR2_TOKEN_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"valueType\",\"type\":\"uint8\"}],\"name\":\"buyArexaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"buyEdgeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMagic100Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"buyOracleSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"buySubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"valueType\",\"type\":\"uint8\"}],\"name\":\"buyTraderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"calcSubscriptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"getCurrentSubscriptionTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArexaPlatform/ArexaPlatformFacet.sol\":\"ArexaPlatformFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ArexaPlatform/ArexaPlatformFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibBlackWhiteList } from \\\"../base/BlackWhiteList/LibBlackWhiteList.sol\\\";\\r\\n\\r\\nimport { LibArexaPlatformShared } from \\\"./Platform/LibArexaPlatformShared.sol\\\";\\r\\nimport { LibArexaPlatformSubscriptions } from \\\"./Platform/LibArexaPlatformSubscriptions.sol\\\";\\r\\nimport { LibArexaPlatformT3 } from \\\"./Platform/LibArexaPlatformT3.sol\\\";\\r\\nimport { LibArexaPlatformT4 } from \\\"./Platform/LibArexaPlatformT4.sol\\\";\\r\\nimport { LibArexaPlatformT5 } from \\\"./Platform/LibArexaPlatformT5.sol\\\";\\r\\n\\r\\nimport { LibERC1155 } from \\\"../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport { CallProtection } from \\\"../base/Shared/ProtectedCall.sol\\\";\\r\\nimport { ReentryProtection } from \\\"../base/Shared/ReentryProtection.sol\\\";\\r\\nimport { ModifierRole } from \\\"../base/AccessControl/ModifierRole.sol\\\";\\r\\nimport { ModifierPausable } from \\\"../base/TargetedPausable/ModifierPausable.sol\\\";\\r\\nimport { LibArexaConst } from \\\"./LibArexaConst.sol\\\";\\r\\n\\r\\ncontract ArexaPlatformFacet is CallProtection, ReentryProtection, ModifierRole, ModifierPausable {\\r\\n\\tuint256 public constant SUBSCR1_TOKEN_TYPE = LibArexaConst.SUBSCR1_TOKEN_TYPE; //Tier 1, every month\\r\\n\\tuint256 public constant SUBSCR2_TOKEN_TYPE = LibArexaConst.SUBSCR2_TOKEN_TYPE; //Tier 2, every month\\r\\n\\tuint256 public constant TRADER_TOKEN_ID = LibArexaConst.TRADER_TOKEN_ID; //Tier 3, unlimited, always mint\\r\\n\\tuint256 public constant AREXA_TOKEN_ID = LibArexaConst.AREXA_TOKEN_ID; //Tier 4, 100000000 piece\\r\\n\\tuint256 public constant MAGIC_TOKEN_ID = LibArexaConst.MAGIC_TOKEN_ID; //Tier 5, 100 piece\\r\\n\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_INVESTOR = LibArexaConst.AREXA_TOKEN_POOL_INVESTOR;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_AREXAINC = LibArexaConst.AREXA_TOKEN_POOL_AREXAINC;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_MARKETING = LibArexaConst.AREXA_TOKEN_POOL_MARKETING;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_DEVELOPMENT = LibArexaConst.AREXA_TOKEN_POOL_DEVELOPMENT;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_RESERVED = LibArexaConst.AREXA_TOKEN_POOL_RESERVED;\\r\\n\\r\\n\\tuint8 public constant AMOUNT_VALUE_TYPE = LibArexaPlatformShared.AMOUNT_VALUE_TYPE;\\r\\n\\tuint8 public constant QUANTITY_VALUE_TYPE = LibArexaPlatformShared.QUANTITY_VALUE_TYPE;\\r\\n\\r\\n\\tfunction getCurrentSubscriptionTokenId(uint256 tokenType) external view protectedCall returns (uint256) {\\r\\n\\t\\treturn LibArexaPlatformSubscriptions.getCurrentSubscriptionTokenId(tokenType);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcSubscriptionPrice(uint256 tokenId, uint32 quantity) external view protectedCall returns (uint256) {\\r\\n\\t\\treturn LibArexaPlatformSubscriptions.calcSubscriptionPrice(tokenId, quantity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buySubscription(uint256 tokenId, uint32 quantity) external protectedCall noReentry whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier1 Oracle or Tier2 Edge\\r\\n\\t\\t//Price: variable USDT/piece, based on algorithm\\r\\n\\t\\t//Quantity: 1 per account\\r\\n\\t\\t// uint256 balance = LibERC1155.balanceOf(msg.sender, tokenId);\\r\\n\\t\\t// require(balance == 0, \\\"Only 1 token can be bought per account!\\\");\\r\\n\\t\\tLibArexaPlatformSubscriptions.buySubscription(tokenId, msg.sender, quantity, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyOracleSubscription(uint32 quantity) external protectedCall noReentry whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier1 Oracle\\r\\n\\t\\t//SUBSCR1_TOKEN_TYPE\\r\\n\\t\\t//Price: variable USDT/piece, based on algorithm\\r\\n\\t\\t//Quantity: 1 per account\\r\\n\\t\\tuint256 tokenId = LibArexaPlatformSubscriptions.getCurrentSubscriptionTokenId(SUBSCR1_TOKEN_TYPE);\\r\\n\\t\\t// uint256 balance = LibERC1155.balanceOf(msg.sender, tokenId);\\r\\n\\t\\t// require(balance == 0, \\\"Only 1 token can be bought per account!\\\");\\r\\n\\t\\tLibArexaPlatformSubscriptions.buySubscription(tokenId, msg.sender, quantity, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyEdgeSubscription(uint32 quantity) external protectedCall noReentry whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier2 Edge\\r\\n\\t\\t//SUBSCR2_TOKEN_TYPE\\r\\n\\t\\t//Price: variable USDT/piece, based on algorithm\\r\\n\\t\\t//Quantity: 1 per account\\r\\n\\t\\tuint256 tokenId = LibArexaPlatformSubscriptions.getCurrentSubscriptionTokenId(SUBSCR2_TOKEN_TYPE);\\r\\n\\t\\t// uint256 balance = LibERC1155.balanceOf(msg.sender, tokenId);\\r\\n\\t\\t// require(balance == 1, \\\"Only 1 token can be bought per account!\\\");\\r\\n\\t\\tLibArexaPlatformSubscriptions.buySubscription(tokenId, msg.sender, quantity, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyTraderToken(uint128 value, uint8 valueType) external protectedCall noReentry whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier3 Singularity\\r\\n\\t\\t//TRADER_TOKEN\\r\\n\\t\\t//Price: 1.0 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//valueType: 0 is amount, 1 is quantity\\r\\n\\t\\tLibArexaPlatformT3.buyTraderToken(msg.sender, msg.sender, value, valueType, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyArexaToken(uint128 value, uint8 valueType) external protectedCall noReentry whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier4\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: 0.1 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//valueType: 0 is amount, 1 is quantity\\r\\n\\t\\tLibArexaPlatformT4.buyArexaToken(msg.sender, value, valueType, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyMagic100Token() external protectedCall noReentry whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier5\\r\\n\\t\\t//MAGIC_TOKEN_ID\\r\\n\\t\\t//Price: 100.0 USDT/piece\\r\\n\\t\\t//Quantity: 1\\r\\n\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tLibBlackWhiteList.getAccountBlackWhiteList(LibArexaConst.MAGIC100_FIRST_BUYER, msg.sender),\\r\\n\\t\\t\\t\\\"Only an approved account can buy the Magic token\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tLibBlackWhiteList.setAccountBlackWhiteList(LibArexaConst.MAGIC100_FIRST_BUYER, msg.sender, false);\\r\\n\\r\\n\\t\\tuint256 balance = LibERC1155.balanceOf(msg.sender, LibArexaConst.MAGIC_TOKEN_ID);\\r\\n\\t\\trequire(balance == 0, \\\"Only 1 Magic token can be bought now!\\\");\\r\\n\\r\\n\\t\\tLibArexaPlatformT5.buyMagic100Token(msg.sender, 0);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x849ab47ecd1c9ac7b137645357bc13b8be70021253b26c560fec8e16e5be6b43\",\"license\":\"UNLICENCED\"},\"contracts/ArexaPlatform/LibArexaConst.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary LibArexaConst {\\r\\n\\t//\\r\\n\\t//Pausable\\r\\n\\tbytes32 public constant FULL = 0x00;\\r\\n\\tbytes32 public constant SUBSCR1_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.SUBSCR1_TOKEN_TYPE));\\r\\n\\tbytes32 public constant SUBSCR2_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.SUBSCR2_TOKEN_TYPE));\\r\\n\\tbytes32 public constant TRADER_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.TRADER_TOKEN_ID));\\r\\n\\tbytes32 public constant AREXA_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.AREXA_TOKEN_ID));\\r\\n\\tbytes32 public constant MAGIC_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.MAGIC_TOKEN_ID));\\r\\n\\r\\n\\t//Roles\\r\\n\\tbytes32 public constant AREXA_ADMIN_ROLE = keccak256(\\\"AREXA_ADMIN_ROLE\\\");\\r\\n\\t//bytes32 public constant TOKEN_ADMIN_ROLE = keccak256(\\\"AREXA_TOKEN_ADMIN_ROLE\\\");\\r\\n\\t//bytes32 public constant TREASURY_ROLE = keccak256(\\\"AREXA_TREASURY_ROLE\\\");\\r\\n\\r\\n\\t//BlackWhite lists\\r\\n\\tbytes32 public constant MAGIC100_FIRST_BUYER = keccak256(\\\"MAGIC100_FIRST_BUYER\\\"); //WhiteList\\r\\n\\r\\n\\t//TokenIDs:\\r\\n\\tuint256 public constant SUBSCR1_TOKEN_TYPE = 100000000; //Tier 1, every month\\r\\n\\tuint256 public constant SUBSCR2_TOKEN_TYPE = 200000000; //Tier 2, every month\\r\\n\\tuint256 public constant TRADER_TOKEN_ID = 300000000; //Tier 3, unlimited, always mint\\r\\n\\tuint256 public constant AREXA_TOKEN_ID = 400000000; //Tier 4, 100000000 piece\\r\\n\\tuint256 public constant MAGIC_TOKEN_ID = 500000000; //Tier 5, 100 piece\\r\\n\\r\\n\\t//AREXA TOKEN POOL TYPES:\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_INVESTOR = 1; //35M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_AREXAINC = 2; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_MARKETING = 3; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_DEVELOPMENT = 4; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_RESERVED = 5; //50M\\r\\n}\\r\\n\",\"keccak256\":\"0x1be5f9cd789a65cf008a6718db0c321965d7361368405043a495ffe4108e9e4a\",\"license\":\"UNLICENCED\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformShared.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"../../base/TokenPNL/LibTokenPNL.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformShared {\\r\\n\\tuint8 public constant AMOUNT_VALUE_TYPE = 0;\\r\\n\\tuint8 public constant QUANTITY_VALUE_TYPE = 1;\\r\\n\\r\\n\\tfunction getPayingToken() internal view returns (IERC20) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.payingERC20Token;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaERC20Token() internal view returns (IERC20) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.arexaERC20Token;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaTokenPool(uint8 _tokenPool) internal view returns (uint256 total_, uint256 sold_) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\ttotal_ = arexa.arexaTokenPool[_tokenPool].total;\\r\\n\\t\\tsold_ = arexa.arexaTokenPool[_tokenPool].sold;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaIncomeParameter(uint256 _tokenId) internal view returns (uint32 pool_, uint32 arexa_) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\tpool_ = arexa.arexaIncomeParameter[_tokenId].pool;\\r\\n\\t\\tarexa_ = arexa.arexaIncomeParameter[_tokenId].arexa;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _divideAmountPoolAndArexa(uint256 _tokenId, uint256 _value) internal {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 poolAmount = (_value * arexa.arexaIncomeParameter[_tokenId].pool) /\\r\\n\\t\\t\\t(arexa.arexaIncomeParameter[_tokenId].pool + arexa.arexaIncomeParameter[_tokenId].arexa);\\r\\n\\t\\tuint256 arexaAmount = _value - poolAmount;\\r\\n\\r\\n\\t\\tLibTokenPNL.changeTotalValue(address(arexa.payingERC20Token), LibArexaConst.AREXA_TOKEN_ID, int256(poolAmount));\\r\\n\\t\\tarexa.poolBalance += poolAmount;\\r\\n\\t\\tarexa.arexaBalance += arexaAmount;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x8f01dc036a886c11d8ab107b3a49a5db062ed6b423da6bdcdc9b54a76a789758\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct ArexaTokenPool {\\r\\n\\tuint256 total;\\r\\n\\tuint256 sold;\\r\\n}\\r\\n\\r\\nstruct ArexaIncomeParameter {\\r\\n\\tuint32 pool;\\r\\n\\tuint32 arexa;\\r\\n}\\r\\n\\r\\nstruct ArexaPlatformStorage {\\r\\n\\tmapping(uint8 => ArexaTokenPool) arexaTokenPool;\\r\\n\\tmapping(uint256 => ArexaIncomeParameter) arexaIncomeParameter;\\r\\n\\tIERC20 payingERC20Token; //USDT\\r\\n\\tuint256 poolBalance; //The \\\"pool\\\" part of the sum income\\r\\n\\tuint256 arexaBalance; //The \\\"owner\\\" part of the sum income\\r\\n\\t//tokenType => lastSubscriptionTokenId\\r\\n\\tmapping(uint256 => uint256) lastSubscriptionTokenIds;\\r\\n\\tIERC20 arexaERC20Token; //AREXA\\r\\n\\tuint256 stakedArexaERC20TokenQuantity;\\r\\n\\tuint256 poolPaidOutBalance; //The \\\"pool\\\" part of the sum outgoing\\r\\n\\tuint256 arexaPaidOutBalance; //The \\\"owner\\\" part of the sum outgoing\\r\\n}\\r\\n\\r\\nlibrary LibArexaPlatformStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.arexa-platform.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ArexaPlatformStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7d2612b5f31a147ff2a53c75d39eebc1dbe2c84afece53e74f2241f13b9abf77\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\nimport \\\"../../base/TokenDynamicPricing/LibTokenDynamicPricing.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformSubscriptions {\\r\\n\\t//\\r\\n\\tfunction createSubscriptions(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\tuint256 _tokenType,\\r\\n\\t\\tuint16 _year,\\r\\n\\t\\tuint8 _month,\\r\\n\\t\\tuint256 _quantity,\\r\\n\\t\\tuint256 _min,\\r\\n\\t\\tuint256 _max\\r\\n\\t) internal returns (uint256 tokenId) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\t//100 000 000 10**8\\r\\n\\t\\t// 20 240 000\\r\\n\\t\\tuint256 monthlyTokenType = _tokenType + uint256(_year) * 10 ** 4 + uint256(_month) * 10 ** 2;\\r\\n\\r\\n\\t\\trequire(int256(arexa.lastSubscriptionTokenIds[_tokenType]) - int256(monthlyTokenType) < 99, \\\"Can't create for old months\\\");\\r\\n\\r\\n\\t\\tif (arexa.lastSubscriptionTokenIds[_tokenType] < monthlyTokenType) {\\r\\n\\t\\t\\tarexa.lastSubscriptionTokenIds[_tokenType] = monthlyTokenType;\\r\\n\\t\\t}\\r\\n\\t\\tarexa.lastSubscriptionTokenIds[_tokenType]++;\\r\\n\\t\\ttokenId = arexa.lastSubscriptionTokenIds[_tokenType];\\r\\n\\t\\tLibTokenDynamicPricing.initialize(tokenId, _quantity, _min, _max);\\r\\n\\t\\tLibERC1155.mint(_operator, LibDiamond.getDiamondAddress(), tokenId, _quantity, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCurrentSubscriptionTokenId(uint256 _tokenType) internal view returns (uint256) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.lastSubscriptionTokenIds[_tokenType];\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcSubscriptionPrice(uint256 _tokenId, uint32 _quantity) internal view returns (uint256) {\\r\\n\\t\\treturn LibTokenDynamicPricing.calcTotalValue(_tokenId, _quantity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buySubscription(uint256 _tokenId, address _account, uint32 _quantity, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier1 or Tier2\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: X USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 amount = LibTokenDynamicPricing.buyQuantity(_tokenId, _quantity);\\r\\n\\r\\n\\t\\tamount = (((amount * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\t//Transfer \\\"payingERC20Token\\\" from \\\"_account\\\" account to \\\"contractAddress\\\" account\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa\\r\\n\\t\\t//SUBSCR1_TOKEN_TYPE OR SUBSCR2_TOKEN_TYPE lesz a v\\u00e9ge\\r\\n\\t\\tuint256 tokenType = (_tokenId / 100000000) * 100000000;\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(tokenType, amount);\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, _tokenId, _quantity, \\\"\\\");\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc2b67b7088323bbb5cd5fa21fa99d69803f1cbe09ab1de2451c799f5d502ffb9\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nimport { IERC20Metadata } from \\\"../../base/ERC20/metadata/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformT3 {\\r\\n\\tfunction buyTraderToken(address _operator, address _account, uint128 _value, uint8 _valueType, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier3\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: 1.0 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//_valueType: 0 is amount, 1 is quantity\\r\\n\\t\\trequire(_valueType == 0 || _valueType == 1, \\\"valueType can be 0 or 1 only!\\\");\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 decimal = 10 ** IERC20Metadata(address(arexa.payingERC20Token)).decimals();\\r\\n\\t\\tuint256 priceFactor = 10;\\r\\n\\t\\tuint256 price = decimal * priceFactor * 1;\\r\\n\\r\\n\\t\\tuint256 amount = 0;\\r\\n\\t\\tuint256 quantity = 0;\\r\\n\\t\\tif (_valueType == 1) {\\r\\n\\t\\t\\tamount = ((_value * 10 * price) / priceFactor + 5) / 10; //add 5 and div 10: rounding to the nearest\\r\\n\\t\\t\\tquantity = (amount * priceFactor) / price;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input quantity is too small for paying token!\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tquantity = (_value * priceFactor) / price;\\r\\n\\t\\t\\tamount = (quantity * price) / priceFactor;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input amount is too small for buying a token!\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tamount = (((amount * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa, fontos a sorrend, miel\\u0151tt megkapta a tokent \\u00e9s adminisztr\\u00e1ltuk a PNL v\\u00e1ltoz\\u00e1st, el\\u0151tte n\\u00f6velj\\u00fck a pool \\u00e9rt\\u00e9ket\\r\\n\\t\\t//az\\u00e9rt mert \\u00edgy a deltaPNLben nem napja meg maga ut\\u00e1n j\\u00e1r\\u00f3 r\\u00e9szt.\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(LibArexaConst.TRADER_TOKEN_ID, amount);\\r\\n\\r\\n\\t\\tLibERC1155.mint(_operator, _account, LibArexaConst.TRADER_TOKEN_ID, quantity, \\\"\\\");\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9d8d9fe25ebe8b69ae9adbff6b308ca58d79d1dc25d91a4e314dae862265b17f\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport { IERC20Metadata } from \\\"../../base/ERC20/metadata/IERC20Metadata.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformT4 {\\r\\n\\tfunction buyArexaToken(address _account, uint128 _value, uint8 _valueType, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier4\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: 0.1 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//_valueType: 0 is amount, 1 is quantity\\r\\n\\r\\n\\t\\trequire(_valueType == 0 || _valueType == 1, \\\"valueType can be 0 or 1 only!\\\");\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 decimal = 10 ** IERC20Metadata(address(arexa.payingERC20Token)).decimals();\\r\\n\\t\\tuint256 priceFactor = 10;\\r\\n\\t\\tuint256 price = ((decimal * priceFactor) * 1) / 10;\\r\\n\\r\\n\\t\\tuint256 amount = 0;\\r\\n\\t\\tuint256 quantity = 0;\\r\\n\\t\\tif (_valueType == 1) {\\r\\n\\t\\t\\tamount = ((_value * 10 * price) / priceFactor + 5) / 10; //add 5 and div 10: rounding to the nearest\\r\\n\\t\\t\\tquantity = (amount * priceFactor) / price;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input quantity is too small for paying token\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tquantity = (_value * priceFactor) / price;\\r\\n\\t\\t\\tamount = (quantity * price) / priceFactor;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input amount is too small for buying a token\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tamount = (((amount * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\tArexaTokenPool storage tokenPool = arexa.arexaTokenPool[LibArexaConst.AREXA_TOKEN_POOL_INVESTOR];\\r\\n\\t\\trequire(tokenPool.sold + quantity <= tokenPool.total, \\\"Not enough token to sell\\\");\\r\\n\\t\\ttokenPool.sold = tokenPool.sold + quantity;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa, fontos a sorrend, miel\\u0151tt megkapta a tokent \\u00e9s adminisztr\\u00e1ltuk a PNL v\\u00e1ltoz\\u00e1st, el\\u0151tte n\\u00f6velj\\u00fck a pool \\u00e9rt\\u00e9ket\\r\\n\\t\\t//az\\u00e9rt mert \\u00edgy a deltaPNLben nem napja meg maga ut\\u00e1n j\\u00e1r\\u00f3 r\\u00e9szt.\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(LibArexaConst.AREXA_TOKEN_ID, amount);\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, LibArexaConst.AREXA_TOKEN_ID, quantity, \\\"\\\");\\r\\n\\t\\tarexa.stakedArexaERC20TokenQuantity = arexa.stakedArexaERC20TokenQuantity + quantity;\\r\\n\\t}\\r\\n\\r\\n\\tfunction payByArexaToken(uint8 _poolType, address _account, uint32 _quantity) internal {\\r\\n\\t\\t//Tier4\\r\\n\\t\\t//AREXA_TOKEN GIFT\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tArexaTokenPool storage tokenPool = arexa.arexaTokenPool[_poolType];\\r\\n\\t\\trequire(tokenPool.sold + _quantity <= tokenPool.total, \\\"Not enoguh token to gift\\\");\\r\\n\\t\\ttokenPool.sold = tokenPool.sold + _quantity;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, LibArexaConst.AREXA_TOKEN_ID, _quantity, \\\"\\\");\\r\\n\\t\\tarexa.stakedArexaERC20TokenQuantity = arexa.stakedArexaERC20TokenQuantity + _quantity;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xcc777dc08993066de4e881597b07c56d780c4c7978492a80fceb89bc80527e53\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nimport { IERC20Metadata } from \\\"../../base/ERC20/metadata/IERC20Metadata.sol\\\";\\r\\nimport \\\"../../base/BridgeCentralized/IBridgeableToken.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformT5 {\\r\\n\\tfunction buyMagic100Token(address _account, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier5\\r\\n\\t\\t//MAGIC_TOKEN_ID\\r\\n\\t\\t//Price: 100.0 USDT/piece\\r\\n\\t\\t//Quantity: 1\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 decimal = 10 ** IERC20Metadata(address(arexa.payingERC20Token)).decimals();\\r\\n\\t\\tuint256 amount = (((100 * decimal * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, LibArexaConst.MAGIC_TOKEN_ID, 1, \\\"\\\");\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa, fontos a sorrend, miut\\u00e1n megkapta a tokent \\u00e9s adminisztr\\u00e1ltuk a PNL v\\u00e1ltoz\\u00e1st, ut\\u00e1na n\\u00f6velj\\u00fck a pool \\u00e9rt\\u00e9ket csak!\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(LibArexaConst.MAGIC_TOKEN_ID, amount);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3554be1037e1d3a57690861ac7ba864dda643a3deac8875b9db9d0007f7ec9d6\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibAccessControlStorage.sol\\\";\\r\\n\\r\\nimport { IERC173 } from \\\"../../interfaces/IERC173.sol\\\";\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { UintUtils } from \\\"../../utils/UintUtils.sol\\\";\\r\\nimport { AddressUtils } from \\\"../../utils/AddressUtils.sol\\\";\\r\\n\\r\\nlibrary LibAccessControl {\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing UintUtils for uint256;\\r\\n\\tusing AddressUtils for address;\\r\\n\\r\\n\\terror Ownable__NotOwner();\\r\\n\\terror Ownable__NotTransitiveOwner();\\r\\n\\r\\n\\terror AccessDenied(bytes32 role, address account);\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\tevent RoleAdminChanged(address indexed owner, bytes32 role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\tevent RoleRevoked(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\r\\n\\tbytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n\\tfunction _setOwner(address _newOwner) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\taddress previousOwner = acls.owner;\\r\\n\\t\\tacls.owner = _newOwner;\\r\\n\\r\\n\\t\\t//Init DEFAULT_ADMIN_ROLE to _newOwner\\r\\n\\t\\tLibAccessControl._grantRole(LibAccessControl.DEFAULT_ADMIN_ROLE, _newOwner);\\r\\n\\r\\n\\t\\temit OwnershipTransferred(previousOwner, _newOwner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _owner() internal view returns (address owner_) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\towner_ = acls.owner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transitiveOwner() internal view returns (address owner_) {\\r\\n\\t\\towner_ = LibAccessControl._owner();\\r\\n\\r\\n\\t\\twhile (owner_.isContract()) {\\r\\n\\t\\t\\ttry IERC173(owner_).owner() returns (address transitiveOwner) {\\r\\n\\t\\t\\t\\towner_ = transitiveOwner;\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _owner(), \\\"Not owner!\\\");\\r\\n\\t\\tif (msg.sender != _owner()) {\\r\\n\\t\\t\\trevert Ownable__NotOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsTransitiveOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _transitiveOwner(), \\\"Not transitive owner!\\\");\\r\\n\\t\\tif (msg.sender != _transitiveOwner()) {\\r\\n\\t\\t\\trevert Ownable__NotTransitiveOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice assign role to given account\\r\\n\\t * @param _role role to assign\\r\\n\\t * @param _account recipient of role assignment\\r\\n\\t */\\r\\n\\tfunction _grantRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\tacls.roles[acls.owner][_role].members.add(_account);\\r\\n\\t\\t\\temit RoleGranted(acls.owner, _role, _account, msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice unassign role from given account\\r\\n\\t * @param _role role to unassign\\r\\n\\t * @param _account account to revokeAccessControlStorage\\r\\n\\t */\\r\\n\\tfunction _revokeRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\t// require(_role != LibAccessControl.DEFAULT_ADMIN_ROLE && _account != acls.owner);\\r\\n\\t\\tacls.roles[acls.owner][_role].members.remove(_account);\\r\\n\\t\\temit RoleRevoked(acls.owner, _role, _account, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice relinquish role\\r\\n\\t * @param _role role to relinquish\\r\\n\\t */\\r\\n\\tfunction _renounceRole(bytes32 _role) internal {\\r\\n\\t\\t_revokeRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query one of the accounts that have role of the project\\r\\n\\t * @dev WARNING: When using _getProjectRoleMember and _getProjectRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _index index of role member\\r\\n\\t */\\r\\n\\tfunction _getRoleMember(bytes32 _role, uint256 _index) internal view returns (address) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.at(_index);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query the number of accounts that have role.\\r\\n\\t * @dev WARNING: When using _getRoleMember and _getRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _getRoleMemberCount(address, bytes32 _role) internal view returns (uint256) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query whether role is assigned to account\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account account to query\\r\\n\\t * @return bool whether role is assigned to account\\r\\n\\t */\\r\\n\\tfunction _hasRole(bytes32 _role, address _account) internal view returns (bool) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.contains(_account);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if sender does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role) internal view {\\r\\n\\t\\t_checkRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if given account does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role, address _account) internal view {\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\trevert AccessDenied({ role: _role, account: _account });\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query admin role for given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @return admin role\\r\\n\\t */\\r\\n\\tfunction _getRoleAdmin(bytes32 _role) internal view returns (bytes32) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].adminRole;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set role as admin role\\r\\n\\t * @param _role role to set\\r\\n\\t * @param _adminRole admin role to set\\r\\n\\t */\\r\\n\\tfunction _setRoleAdmin(bytes32 _role, bytes32 _adminRole) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tbytes32 previousAdminRole = _getRoleAdmin(_role);\\r\\n\\t\\tacls.roles[acls.owner][_role].adminRole = _adminRole;\\r\\n\\t\\temit RoleAdminChanged(acls.owner, _role, previousAdminRole, _adminRole);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2c0da263bd49a5c7a6d1a9d8866bbe5936b43f3ee39bf2c9dc4600d7045b49e9\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport \\\"./RoleData.sol\\\";\\r\\n\\r\\nstruct AccessControllStorage {\\r\\n\\t//owner => role => adminRole, members mapping\\r\\n\\taddress owner;\\r\\n\\tmapping(address => mapping(bytes32 => RoleData)) roles;\\r\\n}\\r\\n\\r\\nlibrary LibAccessControlStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.access-control.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (AccessControllStorage storage acls_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tacls_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ae5597ade94391b4f367368b5e6f5b4d15dce1e430e217ee5e549a652c8eb8b\",\"license\":\"MIT\"},\"contracts/base/AccessControl/ModifierRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibAccessControl } from \\\"./LibAccessControl.sol\\\";\\r\\n\\r\\nabstract contract ModifierRole {\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyTransitiveOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsTransitiveOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRole(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(role);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRoleAdmin(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(LibAccessControl._getRoleAdmin(role));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9a5f770772e3b447a47bbcacd0afe131c78c98bc87219da9e3dfe10a261ad64e\",\"license\":\"MIT\"},\"contracts/base/AccessControl/RoleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RoleData {\\r\\n\\tbytes32 adminRole;\\r\\n\\tEnumerableSet.AddressSet members;\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d7eaf459b09f21c482e9b9df5b5c99572095e79174de3621f5ec9e32413ac7\",\"license\":\"MIT\"},\"contracts/base/BlackWhiteList/LibBlackWhiteList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibBlackWhiteListStorage.sol\\\";\\r\\n\\r\\nlibrary LibBlackWhiteList {\\r\\n\\t//_target: which list is belongs to...\\r\\n\\t//_account: an account on a _target\\r\\n\\t//_lockValue:\\r\\n\\t//  - if _target is a blackList than true _lockValue means that the account is prohibited\\r\\n\\t//  - if _target is a blackList than false _lockValue means that the account is acceptable\\r\\n\\t//  - if _target is a whiteList than true _lockValue means that the account is acceptable\\r\\n\\t//  - if _target is a whiteList than false _lockValue means that the account is prohibited\\r\\n\\tevent AccountBlackWhiteList(bytes32 indexed _target, address indexed _account, bool _lockValue);\\r\\n\\r\\n\\tfunction getAccountBlackWhiteList(bytes32 _target, address _account) internal view returns (bool lockValue_) {\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\tlockValue_ = wls.whiteList[_target][_account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAccountBlackWhiteList(bytes32 _target, address _account, bool _lockValue) internal {\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\twls.whiteList[_target][_account] = _lockValue;\\r\\n\\t\\temit AccountBlackWhiteList(_target, _account, _lockValue);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBatchAccountBlackWhiteList(bytes32 _target, address[] calldata _accounts, bool _lockValue) internal {\\r\\n\\t\\trequire(_accounts.length <= 255, \\\"Batch: too many addresses\\\");\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\tfor (uint8 i = 0; i < _accounts.length; i++) {\\r\\n\\t\\t\\twls.whiteList[_target][_accounts[i]] = _lockValue;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc277a3892e2250b16f292d59b9943a9c584987c1325aead8a06ad5ffbc153436\",\"license\":\"MIT\"},\"contracts/base/BlackWhiteList/LibBlackWhiteListStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct BlackWhiteListStorage {\\r\\n\\tmapping(bytes32 => mapping(address => bool)) whiteList;\\r\\n}\\r\\n\\r\\nlibrary LibBlackWhiteListStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.white-list.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (BlackWhiteListStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x040e35cfc2497b8eecef40b205079d1b6dfd00a4d1e1724d31e9baa5e7752ee1\",\"license\":\"MIT\"},\"contracts/base/BridgeCentralized/IBridgeableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IBridgeableToken {\\r\\n\\tfunction mint(address to, uint256 amount) external;\\r\\n\\r\\n\\tfunction burnFrom(address from, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x82c931efcb760ff09de25b4b897f71cff783e1fbecee824cf8c92a8bbe6dc69e\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport { IDiamondCut } from \\\"../../interfaces/IDiamondCut.sol\\\";\\n\\nimport { LibAccessControl } from \\\"../AccessControl/LibAccessControl.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tfunction setDiamondAddress(address _diamondAddress) internal {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(ds.diamondAddress == address(0), \\\"Already initialized!\\\");\\n\\t\\tds.diamondAddress = _diamondAddress;\\n\\t}\\n\\n\\tfunction getDiamondAddress() internal view returns (address) {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\treturn ds.diamondAddress;\\n\\t}\\n\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tLibAccessControl._setOwner(_newOwner);\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\tLibAccessControl._enforceIsOwner();\\n\\t}\\n\\n\\t// Internal function version of diamondCut\\n\\tfunction diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n\\t\\t\\tIDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n\\t\\t\\tif (action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\t\\taddFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\t\\treplaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\t\\tremoveFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\t// if function does not exist then do nothing and return\\n\\t\\trequire(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n\\t\\tenforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n\\t\\tds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n\\t\\tds.facetAddresses.push(_facetAddress);\\n\\t}\\n\\n\\tfunction addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n\\t\\tds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n\\t\\tds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n\\t}\\n\\n\\tfunction removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n\\t\\t// an immutable function is a function defined directly in a diamond\\n\\t\\trequire(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n\\t\\t// replace selector with last selector, then delete last selector\\n\\t\\tuint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n\\t\\tuint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n\\t\\t// if not the same then replace _selector with lastSelector\\n\\t\\tif (selectorPosition != lastSelectorPosition) {\\n\\t\\t\\tbytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n\\t\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n\\t\\t\\tds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n\\t\\t}\\n\\t\\t// delete the last selector\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n\\t\\tdelete ds.selectorToFacetAndPosition[_selector];\\n\\n\\t\\t// if no more selectors for facet address then delete the facet address\\n\\t\\tif (lastSelectorPosition == 0) {\\n\\t\\t\\t// replace facet address with last facet address and delete last facet address\\n\\t\\t\\tuint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n\\t\\t\\tuint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t\\tif (facetAddressPosition != lastFacetAddressPosition) {\\n\\t\\t\\t\\taddress lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n\\t\\t\\t\\tds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n\\t\\t\\t\\tds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n\\t\\t\\t}\\n\\t\\t\\tds.facetAddresses.pop();\\n\\t\\t\\tdelete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tenforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\tif (!success) {\\n\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t// bubble up error\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(error)\\n\\t\\t\\t\\t\\trevert(add(32, error), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert InitializationFunctionReverted(_init, _calldata);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f15f134edd02ce19fb55ce2c33ef634b5766bef24fee8dcc69f53d04bfe5219\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct FacetAddressAndPosition {\\r\\n\\taddress facetAddress;\\r\\n\\tuint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n}\\r\\n\\r\\nstruct FacetFunctionSelectors {\\r\\n\\tbytes4[] functionSelectors;\\r\\n\\tuint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n}\\r\\n\\r\\nstruct DiamondStorage {\\r\\n\\taddress diamondAddress;\\r\\n\\t// maps function selector to the facet address and\\r\\n\\t// the position of the selector in the facetFunctionSelectors.selectors array\\r\\n\\tmapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n\\t// maps facet addresses to function selectors\\r\\n\\tmapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n\\t// facet addresses\\r\\n\\taddress[] facetAddresses;\\r\\n\\t// Used to query if a contract implements an interface.\\r\\n\\t// Used to implement ERC-165.\\r\\n\\tmapping(bytes4 => bool) supportedInterfaces;\\r\\n\\t//the whole diamond is paused or not\\r\\n\\tbool paused;\\r\\n}\\r\\n\\r\\nlibrary LibDiamondStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.diamond.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (DiamondStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x13a60db83059255e32f692e0508aaa9af49568a363e3aae233ae80aab0c75098\",\"license\":\"MIT\"},\"contracts/base/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * https://eips.ethereum.org/EIPS/eip-1155.\\n */\\ninterface IERC1155Receiver {\\n\\t/**\\n\\t * @notice Handle the receipt of a single ERC1155 token type.\\n\\t * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n\\t * This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n\\t * This function MUST revert if it rejects the transfer.\\n\\t * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n\\t * @param _operator The address which initiated the transfer (i.e. msg.sender)\\n\\t * @param _from The address which previously owned the token\\n\\t * @param _id The ID of the token being transferred\\n\\t * @param _value The amount of tokens being transferred\\n\\t * @param _data Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n\\t */\\n\\tfunction onERC1155Received(\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data\\n\\t) external returns (bytes4);\\n\\n\\t/**\\n\\t * @notice Handle the receipt of multiple ERC1155 token types.\\n\\t * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n\\t * This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n\\t * This function MUST revert if it rejects the transfer(s).\\n\\t * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n\\t * @param _operator The address which initiated the batch transfer (i.e. msg.sender)\\n\\t * @param _from The address which previously owned the token\\n\\t * @param _ids An array containing ids of each token being transferred (order and length must match _values array)\\n\\t * @param _values An array containing amounts of each token being transferred (order and length must match _ids array)\\n\\t * @param _data Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n\\t */\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\tuint256[] calldata _ids,\\n\\t\\tuint256[] calldata _values,\\n\\t\\tbytes calldata _data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeba602761fec3810381b28625959f0b9053b66b7b097ea766225784ad49dfef4\",\"license\":\"MIT\"},\"contracts/base/ERC1155/base/LibERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibERC1155Storage.sol\\\";\\r\\n\\r\\nimport \\\"../customization/LibERC1155Customization.sol\\\";\\r\\n\\r\\nimport { AddressUtils } from \\\"../../../utils/AddressUtils.sol\\\";\\r\\nimport { EnumerableSet } from \\\"../../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC1155Receiver } from \\\"../IERC1155Receiver.sol\\\";\\r\\n\\r\\nerror LibERC1155__BalanceQueryZeroAddress(); //Ok\\r\\nerror LibERC1155__ArrayLengthMismatch(); //Ok\\r\\nerror LibERC1155__MintToZeroAddress(); //ok\\r\\nerror LibERC1155__BurnExceedsBalance(); ///Ok\\r\\nerror LibERC1155__BurnFromZeroAddress(); //Ok\\r\\nerror LibERC1155__ERC1155ReceiverRejected(); // OK\\r\\nerror LibERC1155__ERC1155ReceiverNotImplemented(); //ok\\r\\nerror LibERC1155__TransferExceedsBalance(); //Ok\\r\\nerror LibERC1155__TransferToZeroAddress(); //Ok\\r\\nerror LibERC1155__NotOwnerOrApproved(); //Ok\\r\\nerror LibERC1155__NotOwnerOrApprovedLimit(); //Ok\\r\\nerror LibERC1155__SelfApproval(); //OK\\r\\n\\r\\nlibrary LibERC1155 {\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n\\tevent TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\r\\n\\r\\n\\tevent ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n\\tevent URI(string value, uint256 indexed tokenId);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155Allowance\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent Approval(address indexed owner, address indexed operator, uint256 indexed id, uint256 currenctValue, uint256 newValue);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155Paused\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent AllTokenPaused(address indexed account);\\r\\n\\r\\n\\tevent AllTokenUnpaused(address indexed account);\\r\\n\\r\\n\\tevent TokenPaused(address indexed account, uint256 indexed tokenId);\\r\\n\\r\\n\\tevent TokenUnpaused(address indexed account, uint256 indexed tokenId);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * Usings\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tusing AddressUtils for address;\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the balance of given token held by given address\\r\\n\\t * @param _account address to query\\r\\n\\t * @param _tokenId token to query\\r\\n\\t * @return token balance\\r\\n\\t */\\r\\n\\tfunction balanceOf(address _account, uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tif (_account == address(0)) revert LibERC1155__BalanceQueryZeroAddress();\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.balances[_tokenId][_account];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the balance of given token held by the given addresses\\r\\n\\t * @param _accounts addresses to query\\r\\n\\t * @param _tokenIds list of token IDs to query\\r\\n\\t * @return tokens' balance\\r\\n\\t */\\r\\n\\tfunction balanceOfBatch(address[] memory _accounts, uint256[] memory _tokenIds) internal view returns (uint256[] memory) {\\r\\n\\t\\trequire(_accounts.length == _tokenIds.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\r\\n\\t\\tif (_tokenIds.length != _accounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tuint256[] memory batchBalances = new uint256[](_accounts.length);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < _accounts.length; ++i) {\\r\\n\\t\\t\\tbatchBalances[i] = balanceOf(_accounts[i], _tokenIds[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn batchBalances;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice mint given quantity of tokens for given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _toAccount beneficiary of minting\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to mint\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction mint(address _operator, address _toAccount, uint256 _tokenId, uint256 _amount, bytes memory _data) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__MintToZeroAddress();\\r\\n\\r\\n\\t\\tuint256[] memory tokenIds = _asSingletonArray(_tokenId);\\r\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, address(0), _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\te1155s.balances[_tokenId][_toAccount] += _amount;\\r\\n\\t\\temit TransferSingle(_operator, address(0), _toAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, address(0), _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeTransferAcceptanceCheck(_operator, address(0), _toAccount, _tokenId, _amount, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice mint batch of tokens for given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _toAccount beneficiary of minting\\r\\n\\t * @param _tokenIds list of token IDs\\r\\n\\t * @param _amounts list of quantities of tokens to mint\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction mintBatch(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__MintToZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\t\\t\\te1155s.balances[tokenId][_toAccount] += _amounts[i];\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, address(0), _toAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice burn given quantity of tokens held by given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _fromAccount holder of tokens to burn\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to burn\\r\\n\\t */\\r\\n\\tfunction burn(address _operator, address _fromAccount, uint256 _tokenId, uint256 _amount) internal {\\r\\n\\t\\tif (_fromAccount == address(0)) revert LibERC1155__BurnFromZeroAddress();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, address(0), _asSingletonArray(_tokenId), _asSingletonArray(_amount), \\\"\\\");\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\tif (_amount > e1155s.balances[_tokenId][_fromAccount]) revert LibERC1155__BurnExceedsBalance();\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te1155s.balances[_tokenId][_fromAccount] -= _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferSingle(_operator, _fromAccount, address(0), _tokenId, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice burn given batch of tokens held by given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _fromAccount holder of tokens to burn\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to burn\\r\\n\\t */\\r\\n\\tfunction burnBatch(address _operator, address _fromAccount, uint256[] memory _tokenIds, uint256[] memory _amounts) internal {\\r\\n\\t\\tif (_fromAccount == address(0)) revert LibERC1155__BurnFromZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, address(0), _tokenIds, _amounts, \\\"\\\");\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; i++) {\\r\\n\\t\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\t\\t\\t\\tif (_amounts[i] > e1155s.balances[tokenId][_fromAccount]) revert LibERC1155__BurnExceedsBalance();\\r\\n\\t\\t\\t\\te1155s.balances[tokenId][_fromAccount] -= _amounts[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, _fromAccount, address(0), _tokenIds, _amounts);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice transfer tokens between given addresses\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction safeTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__TransferToZeroAddress();\\r\\n\\r\\n\\t\\tuint256[] memory tokenIds = _asSingletonArray(_tokenId);\\r\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\tuint256 senderBalance = e1155s.balances[_tokenId][_fromAccount];\\r\\n\\r\\n\\t\\tif (_amount > senderBalance) revert LibERC1155__TransferExceedsBalance();\\r\\n\\t\\tcheckAllowance(_operator, _fromAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te1155s.balances[_tokenId][_fromAccount] = senderBalance - _amount;\\r\\n\\t\\t\\tif (_operator != _fromAccount) {\\r\\n\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[_tokenId]) {\\r\\n\\t\\t\\t\\t\\te1155s.allowances[_fromAccount][_operator][_tokenId] = e1155s.allowances[_fromAccount][_operator][_tokenId] - _amount;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\te1155s.balances[_tokenId][_toAccount] += _amount;\\r\\n\\r\\n\\t\\temit TransferSingle(_operator, _fromAccount, _toAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, _fromAccount, _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeTransferAcceptanceCheck(_operator, _fromAccount, _toAccount, _tokenId, _amount, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice transfer batch of tokens between given addresses\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction safeTransferBatch(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__TransferToZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tcheckAllowanceBach(_operator, _fromAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\r\\n\\t\\t\\t\\tuint256 senderBalance = e1155s.balances[tokenId][_fromAccount];\\r\\n\\r\\n\\t\\t\\t\\tif (amount > senderBalance) revert LibERC1155__TransferExceedsBalance();\\r\\n\\r\\n\\t\\t\\t\\te1155s.balances[tokenId][_fromAccount] = senderBalance - amount;\\r\\n\\r\\n\\t\\t\\t\\tif (_operator != _fromAccount) {\\r\\n\\t\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[tokenId]) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.allowances[_fromAccount][_operator][tokenId] = e1155s.allowances[_fromAccount][_operator][tokenId] - amount;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\r\\n\\t\\t\\te1155s.balances[tokenId][_toAccount] += amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, _fromAccount, _toAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\r\\n\\t * @dev MUST emit the ApprovalForAll event on success.\\r\\n\\t * @param _account The owner of the tokens\\r\\n\\t * @param _operator Address to add to the set of authorized operators\\r\\n\\t * @param _approved True if the operator is approved, false to revoke approval\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address _account, address _operator, bool _approved) internal {\\r\\n\\t\\tif (_account == _operator) revert LibERC1155__SelfApproval();\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.operatorApprovals[_account][_operator] = _approved;\\r\\n\\t\\temit ApprovalForAll(_account, _operator, _approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Queries the approval status of an operator for a given owner.\\r\\n\\t * @param _account The owner of the tokens\\r\\n\\t * @param _operator Address of authorized operator\\r\\n\\t * @return True if the operator is approved, false if not\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address _account, address _operator) internal view returns (bool) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.operatorApprovals[_account][_operator];\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Receiver\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tbytes4 internal constant ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\r\\n\\tbytes4 internal constant ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\r\\n\\r\\n\\tfunction onERC1155Received(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256 _id,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) internal returns (bytes4) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tERC1155ReceiverStorage storage receivedData = e1155s.receivedTokens[e1155s.receivedTokensLength];\\r\\n\\t\\treceivedData.operator = _operator;\\r\\n\\t\\treceivedData.from = _from;\\r\\n\\t\\treceivedData.ids = _asSingletonArray(_id);\\r\\n\\t\\treceivedData.values = _asSingletonArray(_value);\\r\\n\\t\\treceivedData.data = _data;\\r\\n\\t\\te1155s.receivedTokensLength++;\\r\\n\\r\\n\\t\\t// if (shouldReject == true) {\\r\\n\\t\\t// \\trevert(\\\"onERC1155Received: transfer not accepted\\\");\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\treturn ERC1155_ACCEPTED;\\r\\n\\t\\t// }\\r\\n\\t\\treturn ERC1155_ACCEPTED;\\r\\n\\t}\\r\\n\\r\\n\\tfunction onERC1155BatchReceived(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256[] calldata _ids,\\r\\n\\t\\tuint256[] calldata _values,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) internal returns (bytes4) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tERC1155ReceiverStorage storage receivedData = e1155s.receivedTokens[e1155s.receivedTokensLength];\\r\\n\\t\\treceivedData.operator = _operator;\\r\\n\\t\\treceivedData.from = _from;\\r\\n\\t\\treceivedData.ids = _ids;\\r\\n\\t\\treceivedData.values = _values;\\r\\n\\t\\treceivedData.data = _data;\\r\\n\\t\\te1155s.receivedTokensLength++;\\r\\n\\t\\treturn ERC1155_BATCH_ACCEPTED;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Allowance\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\tfunction isOperatorSpendingLimitEnabled(uint256 _tokenId) internal view returns (bool) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.operatorSpendingLimitEnabled[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction setOperatorSpendingLimitEnabled(uint256 _tokenId, bool _enabled) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.operatorSpendingLimitEnabled[_tokenId] = _enabled;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allow other accounts/contracts to spend tokens on behalf of msg.sender\\r\\n\\t * @dev MUST emit Approval event on success.\\r\\n\\t * To minimize the risk of the approve/transferFrom attack vector (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), this function will throw if the current approved allowance does not equal the expected _currentValue, unless _value is 0.\\r\\n\\t * @param _owner Address of token owner\\r\\n\\t * @param _operator Address to approve, _operator will ba able to send token\\r\\n\\t * @param _tokenId ID of the Token\\r\\n\\t * @param _currentValue Expected current value of approved allowance.\\r\\n\\t * @param _newValue Allowance amount\\r\\n\\t */\\r\\n\\tfunction approve(address _owner, address _operator, uint256 _tokenId, uint256 _currentValue, uint256 _newValue) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.allowances[_owner][_operator][_tokenId] == _currentValue, \\\"Current value mismatch\\\");\\r\\n\\t\\te1155s.allowances[_owner][_operator][_tokenId] = _newValue;\\r\\n\\r\\n\\t\\temit Approval(_owner, _operator, _tokenId, _currentValue, _newValue);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Queries the spending limit approved for an account\\r\\n\\t * @param _owner The owner allowing the spending\\r\\n\\t * @param _operator The address allowed to spend.\\r\\n\\t * @param _tokenId ID of the Token\\r\\n\\t * @return The _operator's allowed spending balance of the Token requested\\r\\n\\t */\\r\\n\\tfunction allowance(address _owner, address _operator, uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.allowances[_owner][_operator][_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkAllowance(address _operator, address _fromAccount, uint256 _tokenId, uint256 _value) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tif (_fromAccount != _operator) {\\r\\n\\t\\t\\tif (!e1155s.operatorApprovals[_fromAccount][_operator]) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApproved();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[_tokenId] && e1155s.allowances[_fromAccount][_operator][_tokenId] < _value) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApprovedLimit();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkAllowanceBach(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts\\r\\n\\t) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tif (_fromAccount != _operator) {\\r\\n\\t\\t\\tif (!e1155s.operatorApprovals[_fromAccount][_operator]) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApproved();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\t\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[tokenId] && e1155s.allowances[_fromAccount][_operator][tokenId] < amount) {\\r\\n\\t\\t\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApprovedLimit();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Metadata\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query global metadata URI, can contain {id}, client will replace with a valid token id\\r\\n\\t */\\r\\n\\tfunction getUri() internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.uri;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set global metadata URI, can contain {id}, client will\\r\\n\\t * @param _URI global URI\\r\\n\\t */\\r\\n\\tfunction setURI(string memory _URI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.uri = _URI;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTokenBaseUri() internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.baseURI;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set base metadata URI\\r\\n\\t * @dev base URI is a non-standard feature adapted from the ERC721 specification\\r\\n\\t * @param _baseURI base URI\\r\\n\\t */\\r\\n\\tfunction setTokenBaseURI(string memory _baseURI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.baseURI = _baseURI;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTokenUri(uint256 _tokenId) internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.tokenURIs[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set pre-token metadata URI\\r\\n\\t * @param _tokenId token whose metadata URI to set\\r\\n\\t * @param _tokenURI per-token URI\\r\\n\\t */\\r\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.tokenURIs[_tokenId] = _tokenURI;\\r\\n\\t\\temit URI(_tokenURI, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * This implementation returns the concatenation of the `_baseURI`\\r\\n\\t * and the token-specific uri if the latter is set\\r\\n\\t *\\r\\n\\t * This enables the following behaviors:\\r\\n\\t *\\r\\n\\t * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\r\\n\\t *   of `_baseURI` and `_tokenURIs[tokenId]`\\r\\n\\t *\\r\\n\\t * - if `_tokenURIs[tokenId]` is NOT set then we fallback to the defaut URI\\r\\n\\t *   which contains `ERC1155.uri`;\\r\\n\\t */\\r\\n\\tfunction getUri(uint256 tokenId) internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tstring memory tokenURI = e1155s.tokenURIs[tokenId];\\r\\n\\r\\n\\t\\t// If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\r\\n\\t\\treturn bytes(tokenURI).length > 0 ? string(abi.encodePacked(e1155s.baseURI, tokenURI)) : e1155s.uri;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Enumerable\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query total minted supply of given token\\r\\n\\t * @param _tokenId token id to query\\r\\n\\t * @return token supply\\r\\n\\t */\\r\\n\\tfunction totalSupply(uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.totalSupply[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query total number of holders for given token\\r\\n\\t * @param id token id to query\\r\\n\\t * @return quantity of holders\\r\\n\\t */\\r\\n\\tfunction totalHolders(uint256 id) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.accountsByToken[id].length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query holders of given token\\r\\n\\t * @param _tokenId token id to query\\r\\n\\t * @return list of holder addresses\\r\\n\\t */\\r\\n\\tfunction accountsByToken(uint256 _tokenId) internal view returns (address[] memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tEnumerableSet.AddressSet storage accounts = e1155s.accountsByToken[_tokenId];\\r\\n\\r\\n\\t\\taddress[] memory addresses = new address[](accounts.length());\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < accounts.length(); i++) {\\r\\n\\t\\t\\t\\taddresses[i] = accounts.at(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn addresses;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query tokens held by given address\\r\\n\\t * @param _account address to query\\r\\n\\t * @return list of token ids\\r\\n\\t */\\r\\n\\tfunction tokensByAccount(address _account) internal view returns (uint256[] memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tEnumerableSet.UintSet storage tokens = e1155s.tokensByAccount[_account];\\r\\n\\r\\n\\t\\tuint256[] memory ids = new uint256[](tokens.length());\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < tokens.length(); i++) {\\r\\n\\t\\t\\t\\tids[i] = tokens.at(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ids;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Pausable\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tfunction whenNotPaused(ERC1155Storage storage e1155s) internal view {\\r\\n\\t\\trequire(!e1155s.paused, \\\"All token is paused!\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction _whenTokenNotPaused(ERC1155Storage storage e1155s, uint256 _tokenId) internal view {\\r\\n\\t\\twhenNotPaused(e1155s);\\r\\n\\t\\trequire(!e1155s.pausedToken[_tokenId], \\\"Token is paused!\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenNotPaused() internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\twhenNotPaused(e1155s);\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenTokenNotPaused(uint256 _tokenId) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction pauseAllToken(address _operator) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(!e1155s.paused, \\\"All tokens are already paused\\\");\\r\\n\\t\\te1155s.paused = true;\\r\\n\\t\\temit AllTokenPaused(_operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpauseAllToken(address _operator) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.paused, \\\"All tokens are not paused yet\\\");\\r\\n\\t\\te1155s.paused = false;\\r\\n\\t\\temit AllTokenUnpaused(_operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction pauseToken(address _operator, uint256 _tokenId) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(!e1155s.pausedToken[_tokenId], \\\"Token is already paused\\\");\\r\\n\\t\\te1155s.pausedToken[_tokenId] = true;\\r\\n\\t\\temit TokenPaused(_operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpauseToken(address _operator, uint256 _tokenId) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.pausedToken[_tokenId], \\\"Token is not paused yet\\\");\\r\\n\\t\\te1155s.pausedToken[_tokenId] = false;\\r\\n\\t\\temit TokenUnpaused(_operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * Library internal helper functions\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _doSafeTransferAcceptanceCheck(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount.isContract()) {\\r\\n\\t\\t\\ttry IERC1155Receiver(_toAccount).onERC1155Received(_operator, _fromAccount, _tokenId, _amount, _data) returns (\\r\\n\\t\\t\\t\\tbytes4 response\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155Received.selector) revert LibERC1155__ERC1155ReceiverRejected();\\r\\n\\t\\t\\t} catch Error(string memory reason) {\\r\\n\\t\\t\\t\\trevert(reason);\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\trevert LibERC1155__ERC1155ReceiverNotImplemented();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _doSafeBatchTransferAcceptanceCheck(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) private {\\r\\n\\t\\tif (_toAccount.isContract()) {\\r\\n\\t\\t\\ttry IERC1155Receiver(_toAccount).onERC1155BatchReceived(_operator, _fromAccount, _tokenIds, _amounts, _data) returns (\\r\\n\\t\\t\\t\\tbytes4 response\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155BatchReceived.selector) revert LibERC1155__ERC1155ReceiverRejected();\\r\\n\\t\\t\\t} catch Error(string memory reason) {\\r\\n\\t\\t\\t\\trevert(reason);\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\trevert LibERC1155__ERC1155ReceiverNotImplemented();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _asSingletonArray(uint256 element) internal pure returns (uint256[] memory) {\\r\\n\\t\\tuint256[] memory array = new uint256[](1);\\r\\n\\t\\tarray[0] = element;\\r\\n\\t\\treturn array;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called before all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `ids` and `amounts` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_fromAccount != _toAccount) {\\r\\n\\t\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\t\\tmapping(uint256 => EnumerableSet.AddressSet) storage tokenAccounts = e1155s.accountsByToken;\\r\\n\\r\\n\\t\\t\\tEnumerableSet.UintSet storage fromAccountTokens = e1155s.tokensByAccount[_fromAccount];\\r\\n\\t\\t\\tEnumerableSet.UintSet storage toAccountTokens = e1155s.tokensByAccount[_toAccount];\\r\\n\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\r\\n\\t\\t\\t\\tif (amount > 0) {\\r\\n\\t\\t\\t\\t\\tuint256 id = _tokenIds[i];\\r\\n\\r\\n\\t\\t\\t\\t\\tif (_fromAccount == address(0)) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.totalSupply[id] += amount;\\r\\n\\t\\t\\t\\t\\t} else if (balanceOf(_fromAccount, id) == amount) {\\r\\n\\t\\t\\t\\t\\t\\ttokenAccounts[id].remove(_fromAccount);\\r\\n\\t\\t\\t\\t\\t\\tfromAccountTokens.remove(id);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif (_toAccount == address(0)) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.totalSupply[id] -= amount;\\r\\n\\t\\t\\t\\t\\t} else if (balanceOf(_toAccount, id) == 0) {\\r\\n\\t\\t\\t\\t\\t\\ttokenAccounts[id].add(_toAccount);\\r\\n\\t\\t\\t\\t\\t\\ttoAccountTokens.add(id);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tLibERC1155Customization.beforeTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called after all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `id` and `amount` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _afterTokenTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tLibERC1155Customization.afterTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xdf2071ec984832837ceda9908949c7969cbdaa9ca0e7a8f905c42cdc092a873e\",\"license\":\"MIT\"},\"contracts/base/ERC1155/base/LibERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct ERC1155ReceiverStorage {\\r\\n\\tbytes data;\\r\\n\\taddress operator;\\r\\n\\taddress from;\\r\\n\\tuint256[] ids;\\r\\n\\tuint256[] values;\\r\\n}\\r\\n\\r\\nstruct ERC1155Storage {\\r\\n\\tmapping(uint256 => mapping(address => uint256)) balances; // Mapping from token ID to account balances\\r\\n\\tmapping(address => mapping(address => bool)) operatorApprovals; // Mapping from account to operator approvals\\r\\n\\tmapping(uint256 => bool) operatorSpendingLimitEnabled;\\r\\n\\tmapping(address => mapping(address => mapping(uint256 => uint256))) allowances;\\r\\n\\tmapping(uint256 => uint256) totalSupply;\\r\\n\\tmapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\r\\n\\tmapping(address => EnumerableSet.UintSet) tokensByAccount;\\r\\n\\tstring uri; // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\r\\n\\tstring baseURI; // Optional base URI, e.g. ipfs://53453534\\r\\n\\tmapping(uint256 => string) tokenURIs; // Optional mapping for token URIs, e.g. 4236464216781, so tokenURI will be: ipfs://53453534/4236464216781\\r\\n\\tbool paused;\\r\\n\\tmapping(uint256 => bool) pausedToken;\\r\\n\\tuint256 receivedTokensLength;\\r\\n\\tmapping(uint256 => ERC1155ReceiverStorage) receivedTokens;\\r\\n}\\r\\n\\r\\nlibrary LibERC1155Storage {\\r\\n\\tbytes32 internal constant ERC1155_STORAGE_SLOT = keccak256(\\\"usmart.contracts.erc1155-base.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ERC1155Storage storage e1155s_) {\\r\\n\\t\\tbytes32 position = ERC1155_STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\te1155s_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x4e6183d99d461002f2e4873dd8ecc52d243537e0bb5f364b708c45e4ea533ba0\",\"license\":\"MIT\"},\"contracts/base/ERC1155/customization/LibERC1155Customization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../../TokenRestriction/LibTokenRestriction.sol\\\";\\r\\nimport \\\"../../TokenPNL/LibTokenPNL.sol\\\";\\r\\n\\r\\nimport \\\"../../../ArexaPlatform/Platform/LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibERC1155Customization {\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called before all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `ids` and `amounts` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t *  param_operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t *  param_toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t *  param _data data payload\\r\\n\\t */\\r\\n\\tfunction beforeTokenTransfer(\\r\\n\\t\\taddress, //_operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress, //_toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory //_data\\r\\n\\t) internal view {\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.checkRestrictions(_fromAccount, _tokenIds, _amounts);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called after all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `id` and `amount` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * _data data payload\\r\\n\\t */\\r\\n\\tfunction afterTokenTransfer(\\r\\n\\t\\taddress, //_operator\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory //_data\\r\\n\\t) internal {\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.recalcRestrictions(_fromAccount, _tokenIds, _amounts, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_toAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.recalcRestrictions(_toAccount, _tokenIds, _amounts, 1);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tLibTokenPNL.refreshDivident(\\r\\n\\t\\t\\t\\taddress(LibArexaPlatformShared.getPayingToken()),\\r\\n\\t\\t\\t\\t_tokenIds[i],\\r\\n\\t\\t\\t\\t_fromAccount,\\r\\n\\t\\t\\t\\t_toAccount,\\r\\n\\t\\t\\t\\t_amounts[i]\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x11d07d714265224719f98115abceff6d8151acde4ca8ecf4b5332b9d92f81471\",\"license\":\"MIT\"},\"contracts/base/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice query the total minted token supply\\n\\t * @return token supply\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the token balance of given account\\n\\t * @param account address to query\\n\\t * @return token balance\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the allowance granted from given holder to given spender\\n\\t * @param holder approver of allowance\\n\\t * @param spender recipient of allowance\\n\\t * @return token allowance\\n\\t */\\n\\tfunction allowance(address holder, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice grant approval to spender to spend tokens\\n\\t * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n\\t * @param spender recipient of allowance\\n\\t * @param amount quantity of tokens approved for spending\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient on behalf of given holder\\n\\t * @param holder holder of tokens prior to transfer\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transferFrom(address holder, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2225a383553a4a87b9b6577c7b90eff90b4b6a0e967c97d0a3fd5291a290d8db\",\"license\":\"MIT\"},\"contracts/base/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata {\\n\\t/**\\n\\t * @notice return token name\\n\\t * @return token name\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice return token symbol\\n\\t * @return token symbol\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice return token decimals, generally used only for display purposes\\n\\t * @return token decimals\\n\\t */\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaef9c65c2330d80a184d3d59dbe37f80af62f88c5f707a2e36dd1377ba04898d\",\"license\":\"MIT\"},\"contracts/base/Shared/LibReentryProtectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct ReentryProtectionStorage {\\r\\n\\tuint256 lockCounter;\\r\\n}\\r\\n\\r\\nlibrary LibReentryProtectionStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.reentry-protection.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ReentryProtectionStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x714a63213322463450b11e8b93de31689463a823c27333cc38339d09a68b3e45\",\"license\":\"MIT\"},\"contracts/base/Shared/ProtectedCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibDiamond } from \\\"../Diamond/LibDiamond.sol\\\";\\r\\n\\r\\ncontract CallProtection {\\r\\n\\tmodifier protectedCall() {\\r\\n\\t\\trequire(address(this) == LibDiamond.getDiamondAddress(), \\\"NOT_ALLOWED\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc15612f2411ec779b6036b14a4495f5b402178ebb0864d727cb5cc01f917b798\",\"license\":\"MIT\"},\"contracts/base/Shared/ReentryProtection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibReentryProtectionStorage.sol\\\";\\r\\n\\r\\ncontract ReentryProtection {\\r\\n\\tmodifier noReentry() {\\r\\n\\t\\t// Use counter to only write to storage once\\r\\n\\t\\tReentryProtectionStorage storage rps = LibReentryProtectionStorage.layout();\\r\\n\\t\\trps.lockCounter++;\\r\\n\\t\\tuint256 lockValue = rps.lockCounter;\\r\\n\\t\\t_;\\r\\n\\t\\trequire(lockValue == rps.lockCounter, \\\"ReentryProtection: reentry detected!\\\");\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x5732ab76b965ca868de7cb20569eef5a1a7e6b6bba87d3d471c96b3bbb86c6b6\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTargetedPausableStorage.sol\\\";\\r\\n\\r\\nlibrary LibTargetedPausable {\\r\\n\\terror TargetedPausable__TargetedPaused();\\r\\n\\terror TargetedPausable__NotTargetedPaused();\\r\\n\\r\\n\\t//target: what was paused\\r\\n\\t//account: the operator who is paused the target\\r\\n\\tevent TargetedPaused(bytes32 indexed target, address indexed account);\\r\\n\\r\\n\\t//target: what was unpaused\\r\\n\\t//account: the operator who is unpaused the target\\r\\n\\tevent TargetedUnpaused(bytes32 target, address indexed account);\\r\\n\\r\\n\\tfunction whenNotPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (LibTargetedPausable.paused(_target)) revert TargetedPausable__TargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (!LibTargetedPausable.paused(_target)) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction paused(bytes32 _target) internal view returns (bool paused_) {\\r\\n\\t\\tpaused_ = LibTargetedPausableStorage.layout().paused[_target];\\r\\n\\t}\\r\\n\\r\\n\\tfunction pause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (ps.paused[_target]) revert TargetedPausable__TargetedPaused();\\r\\n\\t\\tps.paused[_target] = true;\\r\\n\\t\\temit TargetedPaused(_target, _operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (!ps.paused[_target]) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t\\tps.paused[_target] = false;\\r\\n\\t\\tdelete ps.paused[_target];\\r\\n\\t\\temit TargetedUnpaused(_target, _operator);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x8380f056a3357d3405ab36740a5eb5b0be64e8f837c1a6a2456431e9a30ae053\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct TargetedPausableStorage {\\r\\n\\tmapping(bytes32 => bool) paused;\\r\\n}\\r\\n\\r\\nlibrary LibTargetedPausableStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.targeted-pausable.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TargetedPausableStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3a8d48db3da71fb9df91fe855d32fb0dd634556499739c6c277842021c92438d\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/ModifierPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibTargetedPausable } from \\\"./LibTargetedPausable.sol\\\";\\r\\n\\r\\nabstract contract ModifierPausable {\\r\\n\\t//\\r\\n\\tmodifier whenNotPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable.whenNotPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable.whenPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7ff443365b09572428f1808517faf1a3fff06cc7543da6e57045c0641f660aa5\",\"license\":\"MIT\"},\"contracts/base/TokenDynamicPricing/LibTokenDynamicPricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTokenDynamicPricingStorage.sol\\\";\\r\\n\\r\\nimport \\\"../../utils/Math.sol\\\";\\r\\n\\r\\nlibrary LibTokenDynamicPricing {\\r\\n\\tfunction initialize(uint256 _tokenId, uint256 _initialQuantity, uint256 _min, uint256 _max) internal {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\r\\n\\t\\tpricing.isEnabled = true;\\r\\n\\t\\tpricing.quantity = _initialQuantity;\\r\\n\\t\\tpricing.k = (_min == 0) ? _initialQuantity * _initialQuantity : _initialQuantity * _initialQuantity * _min;\\r\\n\\t\\tpricing.min = _min; //must contain the decimals of the paying token!!!\\r\\n\\t\\tpricing.max = (_max == 0 || _max < _min) ? pricing.k : _max; //must contain the decimals of the paying token!!!\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calcTotalValue(DynamicPricing storage pricing, uint256 _quantity) internal view returns (uint256) {\\r\\n\\t\\trequire(pricing.isEnabled, \\\"Calculation is not enabled for the token!\\\");\\r\\n\\t\\trequire(_quantity <= pricing.quantity, \\\"Not enought quantity left!\\\");\\r\\n\\t\\tuint256 totalValue = (((10 * _quantity * pricing.k) / (pricing.quantity * (pricing.quantity - _quantity + 1))) + 5) / 10;\\r\\n\\t\\treturn Math.min(_quantity * pricing.max, Math.max(_quantity * pricing.min, totalValue));\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcTotalValue(uint256 _tokenId, uint256 _quantity) internal view returns (uint256) {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\treturn _calcTotalValue(pricing, _quantity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyQuantity(uint256 _tokenId, uint256 _quantity) internal returns (uint256) {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\tuint256 totalValue = _calcTotalValue(pricing, _quantity);\\r\\n\\r\\n\\t\\tpricing.quantity = pricing.quantity - _quantity;\\r\\n\\t\\tpricing.totalValue = pricing.totalValue + totalValue;\\r\\n\\r\\n\\t\\tif (pricing.quantity == 0) {\\r\\n\\t\\t\\tpricing.isEnabled = false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn totalValue;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getEnabled(uint256 _tokenId) internal view returns (bool) {\\r\\n\\t\\t//\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\treturn pricing.isEnabled;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPricingEnabled(uint256 _tokenId, bool _enabledValue) internal {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!_enabledValue || (_enabledValue && pricing.quantity > 0),\\r\\n\\t\\t\\t\\\"Reenable of token pricing is only availabe is there is som token left to sell!\\\"\\r\\n\\t\\t);\\r\\n\\t\\tpricing.isEnabled = _enabledValue;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc812e1d7630c7bd8fd1ea671d8071ea4073f795248963a24310c194d80aea06a\",\"license\":\"MIT\"},\"contracts/base/TokenDynamicPricing/LibTokenDynamicPricingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct DynamicPricing {\\r\\n\\tbool isEnabled;\\r\\n\\tuint256 quantity;\\r\\n\\tuint256 totalValue;\\r\\n\\tuint256 k;\\r\\n\\tuint256 min;\\r\\n\\tuint256 max;\\r\\n}\\r\\n\\r\\nstruct TokenDynamicPricingStorage {\\r\\n\\t//tokenId => restriction, every token have\\r\\n\\tmapping(uint256 => DynamicPricing) tokenDynamicPricing;\\r\\n}\\r\\n\\r\\nlibrary LibTokenDynamicPricingStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-dynamic-pricing.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenDynamicPricingStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c22e58724632328816b6c260a176e5ed1788e37966f7775a0dd19ef0ae4d92\",\"license\":\"MIT\"},\"contracts/base/TokenPNL/LibTokenPNL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTokenPNLStorage.sol\\\";\\r\\n\\r\\nlibrary LibTokenPNL {\\r\\n\\tfunction initTokenPNL(address _contract, uint256 _tokenId) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tinventory.isEnabled = true;\\r\\n\\t\\tinventory.sumQuantity = 0;\\r\\n\\t\\tinventory.sumAmount = 0;\\r\\n\\t\\tinventory.sumPnl = 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeTotalValue(address _contract, uint256 _tokenId, int256 _amount) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//because every transfer, mint and burn do like ralizing the pnl\\r\\n\\t\\t//and after this realizing the user can payout the collected a PNL\\r\\n\\t\\t//so decreasing the value can cause money loss in the contract!!!\\r\\n\\t\\t//if wanted full inventory feature in a distributed way: ask uSmart ;)\\r\\n\\t\\trequire(_amount >= 0, \\\"Pool can only increase!\\\");\\r\\n\\r\\n\\t\\tinventory.sumAmount += _amount;\\r\\n\\t\\tinventory.sumPnl += _amount; //Here is the MAGIC!\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInventory(\\r\\n\\t\\taddress _contract,\\r\\n\\t\\tuint256 _tokenId\\r\\n\\t) internal view returns (bool isEnabled, int256 sumQuantity, int256 sumAmount, int256 sumPnl) {\\r\\n\\t\\t//\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\treturn (inventory.isEnabled, inventory.sumQuantity, inventory.sumAmount, inventory.sumPnl);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInventoryItem(\\r\\n\\t\\taddress _contract,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\taddress _account\\r\\n\\t) internal view returns (int256 quantity, int256 deltaPnl, int256 payedPnl) {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\treturn (inventory.divident[_account].quantity, inventory.divident[_account].deltaPnl, inventory.divident[_account].payedPnl);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _refreshDividentInternal(Inventory storage inventory, address _account, int256 _quantity) internal {\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\r\\n\\t\\trequire(inventory.sumQuantity + _quantity >= 0, \\\"Pool token quanity can't be less then zero!\\\");\\r\\n\\t\\trequire(inventoryItem.quantity + _quantity >= 0, \\\"User token quanity can't be less then zero!\\\");\\r\\n\\r\\n\\t\\tint256 addressPnlDelta = 0;\\r\\n\\t\\tif (inventory.sumQuantity != 0) {\\r\\n\\t\\t\\taddressPnlDelta = (inventory.sumPnl * _quantity) / inventory.sumQuantity;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tinventory.sumQuantity = inventory.sumQuantity + _quantity;\\r\\n\\t\\tinventory.sumPnl = inventory.sumPnl + addressPnlDelta;\\r\\n\\t\\tinventoryItem.quantity = inventoryItem.quantity + _quantity;\\r\\n\\t\\tinventoryItem.deltaPnl = inventoryItem.deltaPnl - addressPnlDelta;\\r\\n\\t}\\r\\n\\r\\n\\tfunction refreshDivident(address _contract, uint256 _tokenId, address _fromAccount, address _toAccount, uint256 _quantity) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\t_refreshDividentInternal(inventory, _fromAccount, -1 * int256(_quantity));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_toAccount != address(0)) {\\r\\n\\t\\t\\t_refreshDividentInternal(inventory, _toAccount, int256(_quantity));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcDivident(address _contract, uint256 _tokenId, address _account) internal view returns (int256) {\\r\\n\\t\\tif (_account == address(0)) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\t\\t//calculate actual value of the token\\r\\n\\t\\tint256 actValue = 0;\\r\\n\\t\\tif (inventory.sumQuantity != 0) {\\r\\n\\t\\t\\tactValue = (inventory.sumPnl * inventoryItem.quantity) / inventory.sumQuantity;\\r\\n\\t\\t}\\r\\n\\t\\t//the divident is equal with the actual value minus the summa pnlDelta\\r\\n\\t\\t//note: the pnlDelta already have the negative sign!!!\\r\\n\\t\\tint256 actDivident = actValue + inventoryItem.deltaPnl - inventoryItem.payedPnl;\\r\\n\\r\\n\\t\\treturn actDivident;\\r\\n\\t}\\r\\n\\r\\n\\tfunction refreshPayoutDivident(address _contract, uint256 _tokenId, address _account, int256 _amount) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\trequire(_amount >= 0, \\\"Only positive amount can be payed out!\\\");\\r\\n\\r\\n\\t\\tint256 payableDivident = calcDivident(_contract, _tokenId, _account);\\r\\n\\r\\n\\t\\trequire(_amount <= payableDivident, \\\"The amount is bigger then tha payable divident!\\\");\\r\\n\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\t\\tinventoryItem.payedPnl = inventoryItem.payedPnl + _amount;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x1da1a327712fe15642f1d070f0a4005fe01c7e5a2846706959dfa35a212e537c\",\"license\":\"MIT\"},\"contracts/base/TokenPNL/LibTokenPNLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct InventoryItem {\\r\\n\\tint256 quantity;\\r\\n\\tint256 deltaPnl; //After calculating the act Pnl based on the quantity this is a Pnl modification factor!\\r\\n\\tint256 payedPnl;\\r\\n}\\r\\n\\r\\nstruct Inventory {\\r\\n\\tbool isEnabled;\\r\\n\\tint256 sumQuantity;\\r\\n\\tint256 sumAmount;\\r\\n\\tint256 sumPnl;\\r\\n\\t//Account - pool divident calculation\\r\\n\\tmapping(address => InventoryItem) divident;\\r\\n}\\r\\n\\r\\nstruct TokenPNLStorage {\\r\\n\\t//contract => tokenId => inventory map\\r\\n\\t//Eg: IERC20 => 0 => inventory\\r\\n\\t//Eg: IERC1155 => tokenId => Inventory\\r\\n\\tmapping(address => mapping(uint256 => Inventory)) inventory;\\r\\n}\\r\\n\\r\\nlibrary LibTokenPNLStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-pnl.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenPNLStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2ad5ccdae091ea94e36dce8d852d697f8569b438284f51a4a983a7c0d4b9de8b\",\"license\":\"MIT\"},\"contracts/base/TokenRestriction/LibTokenRestriction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTokenRestrictionStorage.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\nimport \\\"../../utils/Math.sol\\\";\\r\\n\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary LibTokenRestriction {\\r\\n\\tfunction initTokenRestriction(uint256 _tokenId, uint256 _endOfRestriction, uint256 _endOfRestrictionCalc, uint256 _timeDelta) internal {\\r\\n\\t\\t// require(block.number + 12 * _timeDelta < _endOfRestriction);\\r\\n\\t\\t// require(_endOfRestriction + 12 * _timeDelta < _endOfRestrictionCalc);\\r\\n\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\t\\tif ((restriction.endOfRestrictionCalc == 0) || (restriction.endOfRestriction + 1 == restriction.endOfRestrictionCalc)) {\\r\\n\\t\\t\\trestriction.endOfRestriction = _endOfRestriction;\\r\\n\\t\\t\\trestriction.endOfRestrictionCalc = _endOfRestrictionCalc;\\r\\n\\t\\t\\trestriction.timeDelta = _timeDelta;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcUnrestrictedAmount(address _account, uint256 _tokenId, uint256 _amount) internal view returns (uint256) {\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc < block.number) {\\r\\n\\t\\t\\treturn _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((K8-I8)/L8)*(E8-M8)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumulated)/12)\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\r\\n\\t\\t//=MIN(M10+Q10;E10)-G10\\r\\n\\t\\t//=MIN(accumulated+helper;bought)-sold\\r\\n\\t\\tuint256 canSell = Math.min(accRestr.accumulated + helper, accRestr.bought) - accRestr.sold;\\r\\n\\r\\n\\t\\treturn canSell;\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkRestriction(address _account, uint256 _tokenId, uint256 _amount) internal view returns (bool) {\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc <= block.number) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// if (restriction.endOfRestriction < block.number) {\\r\\n\\t\\t// \\treturn;\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((K8-I8)/L8)*(E8-M8)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumulated)/12)\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\r\\n\\t\\t//=MIN(M10+Q10;E10)-G10\\r\\n\\t\\t//=MIN(accumulated+helper;bought)-sold\\r\\n\\t\\tuint256 canSell = Math.min(accRestr.accumulated + helper, accRestr.bought) - accRestr.sold;\\r\\n\\r\\n\\t\\trequire(_amount <= canSell, \\\"The amount is grater then the accumlated ('sellable') amount!\\\");\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkRestrictions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts) internal view returns (bool) {\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tcheckRestriction(_account, _tokenIds[i], _amounts[i]);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction recalcRestriction(address _account, uint256 _tokenId, uint256 _amount, uint8 _direction) internal {\\r\\n\\t\\t//eladhat\\u00f3 mennyis\\u00e9g kalkul\\u00e1ci\\u00f3hoz\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc <= block.number) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestriction <= block.number) {\\r\\n\\t\\t\\t//valami m\\u00e1st kell csin\\u00e1lni\\r\\n\\t\\t\\tif (_direction == 1) {\\r\\n\\t\\t\\t\\taccRestr.bought += _amount;\\r\\n\\t\\t\\t\\taccRestr.accumulated += _amount;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//friss\\u00edteni \\u00fczemszer\\u0171en.\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((J12-I12)/L12)*(E12-M12)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumlated)/12)\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\r\\n\\t\\t//=MIN(M12+N12; E12)\\r\\n\\t\\t//=MIN(accumulated+helper; bought)\\r\\n\\t\\taccRestr.accumulated = Math.min(accRestr.accumulated + helper, accRestr.bought);\\r\\n\\r\\n\\t\\t//vesz, elad\\r\\n\\t\\tif (_direction == 1) {\\r\\n\\t\\t\\taccRestr.bought += _amount;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\taccRestr.sold += _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\taccRestr.time = block.number;\\r\\n\\t}\\r\\n\\r\\n\\tfunction recalcRestrictions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts, uint8 _direction) internal {\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\trecalcRestriction(_account, _tokenIds[i], _amounts[i], _direction);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x931198a2597f76ea6f03019098478c3d5dd2ca0f5937461c55dc53d0532c14e7\",\"license\":\"MIT\"},\"contracts/base/TokenRestriction/LibTokenRestrictionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RestrictionCalc {\\r\\n\\tuint256 bought;\\r\\n\\tuint256 sold;\\r\\n\\tuint256 time; //blockheight * 1 000 000 000\\r\\n\\tuint256 accumulated;\\r\\n}\\r\\n\\r\\nstruct Restriction {\\r\\n\\tuint256 endOfRestriction; //if act-time is lower then endOfRestriction then only calculating the a previous data, new tokens do not restircted\\r\\n\\tuint256 endOfRestrictionCalc; //if act-time is lower then endOfRestrictionCalc then now calculation at all\\r\\n\\tuint256 timeDelta; //if time is blockHeight based then delta should be calculated like that. If second based then...\\r\\n\\t//Account - restriction calculation params\\r\\n\\tmapping(address => RestrictionCalc) restriction;\\r\\n}\\r\\n\\r\\nstruct TokenRestrictionStorage {\\r\\n\\t//tokenId => restriction, every token have\\r\\n\\tmapping(uint256 => Restriction) tokenRestriction;\\r\\n}\\r\\n\\r\\nlibrary LibTokenRestrictionStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-restriction.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenRestrictionStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xe358c34214fecb91a975cd5269031d6b92f13d0d8af754b2d4dc56fc5246a744\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n\\tenum FacetCutAction {\\n\\t\\tAdd,\\n\\t\\tReplace,\\n\\t\\tRemove\\n\\t}\\n\\t// Add=0, Replace=1, Remove=2\\n\\n\\tstruct FacetCut {\\n\\t\\taddress facetAddress;\\n\\t\\tFacetCutAction action;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n\\tevent DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x38a0a1b25fb31d2205f5aaedb20f1788a38bc4147a4a20ee030335b7cdbaa0c4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\ninterface IERC173 {\\r\\n\\t/// @dev This emits when ownership of a contract changes.\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/// @notice Get the address of the owner\\r\\n\\t/// @return owner_ The address of the owner.\\r\\n\\tfunction owner() external view returns (address owner_);\\r\\n\\r\\n\\t/// @notice Set the address of the new owner of the contract\\r\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n\\t/// @param _newOwner The address of the new owner of the contract\\r\\n\\tfunction transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x92d3f89d7077a9b49b41fd69091ce8f8c1b20c5695dafbbb4b13e7b6f0d6e6ef\",\"license\":\"MIT\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { UintUtils } from \\\"./UintUtils.sol\\\";\\n\\nlibrary AddressUtils {\\n\\tusing UintUtils for uint256;\\n\\n\\terror AddressUtils__InsufficientBalance();\\n\\terror AddressUtils__NotContract();\\n\\terror AddressUtils__SendValueFailed();\\n\\n\\tfunction toString(address account) internal pure returns (string memory) {\\n\\t\\treturn uint256(uint160(account)).toHexString(20);\\n\\t}\\n\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\tfunction sendValue(address payable account, uint256 amount) internal {\\n\\t\\t(bool success, ) = account.call{ value: amount }(\\\"\\\");\\n\\t\\tif (!success) revert AddressUtils__SendValueFailed();\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"AddressUtils: failed low-level call\\\");\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n\\t\\treturn _functionCallWithValue(target, data, 0, error);\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"AddressUtils: failed low-level call with value\\\");\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) internal returns (bytes memory) {\\n\\t\\tif (value > address(this).balance) revert AddressUtils__InsufficientBalance();\\n\\t\\treturn _functionCallWithValue(target, data, value, error);\\n\\t}\\n\\n\\t/**\\n\\t * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n\\t * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n\\t * @param target recipient of call\\n\\t * @param gasAmount gas allowance for call\\n\\t * @param value native token value to include in call\\n\\t * @param maxCopy maximum number of bytes to copy from return data\\n\\t * @param data encoded call data\\n\\t * @return success whether call is successful\\n\\t * @return returnData copied return data\\n\\t */\\n\\tfunction excessivelySafeCall(\\n\\t\\taddress target,\\n\\t\\tuint256 gasAmount,\\n\\t\\tuint256 value,\\n\\t\\tuint16 maxCopy,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool success, bytes memory returnData) {\\n\\t\\treturnData = new bytes(maxCopy);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// execute external call via assembly to avoid automatic copying of return data\\n\\t\\t\\tsuccess := call(gasAmount, target, value, add(data, 0x20), mload(data), 0, 0)\\n\\n\\t\\t\\t// determine whether to limit amount of data to copy\\n\\t\\t\\tlet toCopy := returndatasize()\\n\\n\\t\\t\\tif gt(toCopy, maxCopy) {\\n\\t\\t\\t\\ttoCopy := maxCopy\\n\\t\\t\\t}\\n\\n\\t\\t\\t// store the length of the copied bytes\\n\\t\\t\\tmstore(returnData, toCopy)\\n\\n\\t\\t\\t// copy the bytes from returndata[0:toCopy]\\n\\t\\t\\treturndatacopy(add(returnData, 0x20), 0, toCopy)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) private returns (bytes memory) {\\n\\t\\tif (!isContract(target)) revert AddressUtils__NotContract();\\n\\n\\t\\t(bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n\\t\\tif (success) {\\n\\t\\t\\treturn returnData;\\n\\t\\t} else if (returnData.length > 0) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet returnData_size := mload(returnData)\\n\\t\\t\\t\\trevert(add(32, returnData), returnData_size)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\trevert(error);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7dec1466e1e606394a35fa837156a011f761ac6a6e9097b89a348fad1f2f692\",\"license\":\"MIT\"},\"contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n\\terror EnumerableSet__IndexOutOfBounds();\\n\\n\\tstruct Set {\\n\\t\\tbytes32[] _values;\\n\\t\\t// 1-indexed to allow 0 to signify nonexistence\\n\\t\\tmapping(bytes32 => uint256) _indexes;\\n\\t}\\n\\n\\tstruct Bytes32Set {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct AddressSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct UintSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n\\t\\treturn _at(set._inner, index);\\n\\t}\\n\\n\\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\n\\t\\treturn address(uint160(uint256(_at(set._inner, index))));\\n\\t}\\n\\n\\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n\\t\\treturn uint256(_at(set._inner, index));\\n\\t}\\n\\n\\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, value);\\n\\t}\\n\\n\\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction indexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, value);\\n\\t}\\n\\n\\tfunction indexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction indexOf(UintSet storage set, uint256 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(AddressSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(UintSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, value);\\n\\t}\\n\\n\\tfunction add(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, value);\\n\\t}\\n\\n\\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction toArray(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n\\t\\treturn set._inner._values;\\n\\t}\\n\\n\\tfunction toArray(AddressSet storage set) internal view returns (address[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\taddress[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction toArray(UintSet storage set) internal view returns (uint256[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\tuint256[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\n\\t\\tif (index >= set._values.length) revert EnumerableSet__IndexOutOfBounds();\\n\\t\\treturn set._values[index];\\n\\t}\\n\\n\\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\n\\t\\treturn set._indexes[value] != 0;\\n\\t}\\n\\n\\tfunction _indexOf(Set storage set, bytes32 value) private view returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn set._indexes[value] - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _length(Set storage set) private view returns (uint256) {\\n\\t\\treturn set._values.length;\\n\\t}\\n\\n\\tfunction _add(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tif (!_contains(set, value)) {\\n\\t\\t\\tset._values.push(value);\\n\\t\\t\\tset._indexes[value] = set._values.length;\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _remove(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tuint256 valueIndex = set._indexes[value];\\n\\n\\t\\tif (valueIndex != 0) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tbytes32 last = set._values[set._values.length - 1];\\n\\n\\t\\t\\t\\t// move last value to now-vacant index\\n\\n\\t\\t\\t\\tset._values[valueIndex - 1] = last;\\n\\t\\t\\t\\tset._indexes[last] = valueIndex;\\n\\t\\t\\t}\\n\\t\\t\\t// clear last index\\n\\n\\t\\t\\tset._values.pop();\\n\\t\\t\\tdelete set._indexes[value];\\n\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x442e9fd507b659095a1fec47f8cb6e540442165217af05db1afa2703a993e038\",\"license\":\"MIT\"},\"contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nlibrary Math {\\n\\t/**\\n\\t * @notice calculate the absolute value of a number\\n\\t * @param a number whose absoluve value to calculate\\n\\t * @return absolute value\\n\\t */\\n\\tfunction abs(int256 a) internal pure returns (uint256) {\\n\\t\\treturn uint256(a < 0 ? -a : a);\\n\\t}\\n\\n\\t/**\\n\\t * @notice select the greater of two numbers\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return greater number\\n\\t */\\n\\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a > b ? a : b;\\n\\t}\\n\\n\\t/**\\n\\t * @notice select the lesser of two numbers\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return lesser number\\n\\t */\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a > b ? b : a;\\n\\t}\\n\\n\\t/**\\n\\t * @notice calculate the average of two numbers, rounded down\\n\\t * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return mean value\\n\\t */\\n\\tfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn (a & b) + ((a ^ b) >> 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice estimate square root of number\\n\\t * @dev uses Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n\\t * @param x input number\\n\\t * @return y square root\\n\\t */\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256 y) {\\n\\t\\tuint256 z = (x + 1) >> 1;\\n\\t\\ty = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = (x / z + z) >> 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x032ee4f9c6cc152b1930c8c84a11bc736dc627a71a41a73e28b09b3ad7a231b3\",\"license\":\"MIT\"},\"contracts/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../base/ERC20/IERC20.sol\\\";\\r\\nimport { AddressUtils } from \\\"./AddressUtils.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n\\terror SafeERC20FailedOperation(address token);\\r\\n\\tusing AddressUtils for address;\\r\\n\\r\\n\\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n\\t\\tbytes memory returndata = address(token).functionCall(abi.encodeCall(token.transfer, (to, value)));\\r\\n\\t\\tif (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\r\\n\\t\\t\\trevert SafeERC20FailedOperation(address(token));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n\\t\\tbytes memory returndata = address(token).functionCall(abi.encodeCall(token.transferFrom, (from, to, value)));\\r\\n\\t\\tif (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\r\\n\\t\\t\\trevert SafeERC20FailedOperation(address(token));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xdc53bc172ef7a4c0200036e81b9c2bb111ba29aaa51367617d343ab912072d2f\",\"license\":\"MIT\"},\"contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n\\terror UintUtils__InsufficientHexLength();\\n\\n\\tbytes16 private constant HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n\\tfunction add(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? sub(a, -b) : a + uint256(b);\\n\\t}\\n\\n\\tfunction sub(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? add(a, -b) : a - uint256(b);\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 length = 0;\\n\\n\\t\\tfor (uint256 temp = value; temp != 0; temp >>= 8) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tlength++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\t\\tbuffer[i] = HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\t\\tvalue >>= 4;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\",\"keccak256\":\"0xec4d89ef08ad402e0c8b30b8e4e135991009384aa72f0cb7c6165721ec5050e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061519e806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636442a5ed116100ad578063d19bcdf311610071578063d19bcdf3146102f9578063d5ddea0414610317578063da47320214610335578063dbcc4d9414610353578063f396f3d6146103715761012c565b80636442a5ed146102675780636a6128f41461028557806372b88f1b146102a1578063c1c64f0f146102d1578063cd304355146102db5761012c565b806336b01423116100f457806336b01423146101d55780634ba6348b146101f35780635aecf1891461020f5780635fc86ab91461022d57806361690b501461024b5761012c565b806303d1229c1461013157806308e7f2c51461014d5780631791bf201461016b5780632db4e5691461019b5780632dc00434146101b9575b600080fd5b61014b60048036038101906101469190613b5c565b61038f565b005b61015561049a565b6040516101629190613bb8565b60405180910390f35b61018560048036038101906101809190613bd3565b61049f565b6040516101929190613c0f565b60405180910390f35b6101a3610526565b6040516101b09190613c0f565b60405180910390f35b6101d360048036038101906101ce9190613c2a565b61052e565b005b6101dd61064a565b6040516101ea9190613c0f565b60405180910390f35b61020d60048036038101906102089190613ccb565b610652565b005b61021761075d565b6040516102249190613bb8565b60405180910390f35b610235610762565b6040516102429190613bb8565b60405180910390f35b61026560048036038101906102609190613c2a565b610767565b005b61026f610883565b60405161027c9190613c0f565b60405180910390f35b61029f600480360381019061029a9190613ccb565b61088b565b005b6102bb60048036038101906102b69190613b5c565b610997565b6040516102c89190613c0f565b60405180910390f35b6102d9610a20565b005b6102e3610c12565b6040516102f09190613bb8565b60405180910390f35b610301610c17565b60405161030e9190613bb8565b60405180910390f35b61031f610c1c565b60405161032c9190613bb8565b60405180910390f35b61033d610c21565b60405161034a9190613c0f565b60405180910390f35b61035b610c29565b6040516103689190613bb8565b60405180910390f35b610379610c2e565b6040516103869190613c0f565b60405180910390f35b610397610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90613d68565b60405180910390fd5b600061040e610c6e565b905080600001600081548092919061042590613db7565b91905055506000816000015490506000801b61044081610c9b565b61044d8533866000610cde565b5081600001548114610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90613e71565b60405180910390fd5b50505050565b600581565b60006104a9610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050d90613d68565b60405180910390fd5b61051f82610e33565b9050919050565b631dcd650081565b610536610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059a90613d68565b60405180910390fd5b60006105ad610c6e565b90508060000160008154809291906105c490613db7565b91905055506000816000015490506000801b6105df81610c9b565b60006105ee630bebc200610e33565b90506105fd8133876000610cde565b505081600001548114610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90613e71565b60405180910390fd5b505050565b6317d7840081565b61065a610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be90613d68565b60405180910390fd5b60006106d1610c6e565b90508060000160008154809291906106e890613db7565b91905055506000816000015490506000801b61070381610c9b565b6107103386866000610e5e565b5081600001548114610757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074e90613e71565b60405180910390fd5b50505050565b600081565b600481565b61076f610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d390613d68565b60405180910390fd5b60006107e6610c6e565b90508060000160008154809291906107fd90613db7565b91905055506000816000015490506000801b61081881610c9b565b60006108276305f5e100610e33565b90506108368133876000610cde565b50508160000154811461087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590613e71565b60405180910390fd5b505050565b630bebc20081565b610893610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790613d68565b60405180910390fd5b600061090a610c6e565b905080600001600081548092919061092190613db7565b91905055506000816000015490506000801b61093c81610c9b565b61094a3333878760006112af565b5081600001548114610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098890613e71565b60405180910390fd5b50505050565b60006109a1610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0590613d68565b60405180910390fd5b610a18838361164d565b905092915050565b610a28610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c90613d68565b60405180910390fd5b6000610a9f610c6e565b9050806000016000815480929190610ab690613db7565b91905055506000816000015490506000801b610ad181610c9b565b610afb7f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c833611667565b610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613f03565b60405180910390fd5b610b667f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c83360006116dd565b6000610b7633631dcd65006117a8565b905060008114610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290613f95565b60405180910390fd5b610bc6336000611877565b505081600001548114610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0590613e71565b60405180910390fd5b5050565b600381565b600281565b600181565b6311e1a30081565b600181565b6305f5e10081565b600080610c41611a4b565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000807f428e3b8892e2a2bc8574ce4723c321a1755cf7dc73aa1328e37a7b6996fe907f90508091505090565b610ca481611a78565b15610cdb576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6127108161ffff161115610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e90614027565b60405180910390fd5b6000610d31611aab565b90506000610d45868563ffffffff16611ad8565b9050600a6005612710600a86612710610d5e9190614055565b61ffff1685610d6d919061408b565b610d77919061408b565b610d8191906140fc565b610d8b919061412d565b610d9591906140fc565b90506000610da1610c36565b90506000821115610ddd57610ddc8360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878385611b72565b5b60006305f5e1008089610df091906140fc565b610dfa919061408b565b9050610e068184611c7d565b610e298283898b8a63ffffffff1660405180602001604052806000815250611db3565b5050505050505050565b600080610e3e611aab565b905080600501600084815260200190815260200160002054915050919050565b60008260ff161480610e73575060018260ff16145b610eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea9906141ad565b60405180910390fd5b6127108161ffff161115610efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef290614027565b60405180910390fd5b6000610f05611aab565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c91906141e2565b600a610fa89190614342565b90506000600a90506000600a60018385610fc2919061408b565b610fcc919061408b565b610fd691906140fc565b905060008060018860ff16036110a257600a60058585600a8d610ff9919061438d565b6fffffffffffffffffffffffffffffffff16611015919061408b565b61101f91906140fc565b611029919061412d565b61103391906140fc565b9150828483611042919061408b565b61104c91906140fc565b905060008211801561105e5750600081115b61109d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110949061443c565b60405180910390fd5b611136565b82848a6fffffffffffffffffffffffffffffffff166110c1919061408b565b6110cb91906140fc565b90508383826110da919061408b565b6110e491906140fc565b91506000821180156110f65750600081115b611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112c906144ce565b60405180910390fd5b5b600a6005612710600a8a61271061114d9190614055565b61ffff168661115c919061408b565b611166919061408b565b61117091906140fc565b61117a919061412d565b61118491906140fc565b91506000866000016000600160ff1660ff168152602001908152602001600020905080600001548282600101546111bb919061412d565b11156111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f39061453a565b60405180910390fd5b81816001015461120c919061412d565b8160010181905550600061121e610c36565b9050600084111561125a576112598860020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d8387611b72565b5b6112686317d7840085611c7d565b61128981828e6317d784008760405180602001604052806000815250611db3565b828860070154611299919061412d565b8860070181905550505050505050505050505050565b60008260ff1614806112c4575060018260ff16145b611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa906141ad565b60405180910390fd5b6127108161ffff16111561134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134390614027565b60405180910390fd5b6000611356611aab565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed91906141e2565b600a6113f99190614342565b90506000600a9050600060018284611411919061408b565b61141b919061408b565b905060008060018860ff16036114e757600a60058585600a8d61143e919061438d565b6fffffffffffffffffffffffffffffffff1661145a919061408b565b61146491906140fc565b61146e919061412d565b61147891906140fc565b9150828483611487919061408b565b61149191906140fc565b90506000821180156114a35750600081115b6114e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d9906145cc565b60405180910390fd5b61157b565b82848a6fffffffffffffffffffffffffffffffff16611506919061408b565b61151091906140fc565b905083838261151f919061408b565b61152991906140fc565b915060008211801561153b5750600081115b61157a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115719061465e565b60405180910390fd5b5b600a6005612710600a8a6127106115929190614055565b61ffff16866115a1919061408b565b6115ab919061408b565b6115b591906140fc565b6115bf919061412d565b6115c991906140fc565b915060006115d5610c36565b90506000831115611611576116108760020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8386611b72565b5b61161f6311e1a30084611c7d565b61163f8c8c6311e1a30085604051806020016040528060008152506121de565b505050505050505050505050565b600061165f838363ffffffff16612393565b905092915050565b6000806116726123cd565b905080600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60006116e76123cd565b90508181600001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f696f1e09104a0bef7512faf461f1a6962c3c8151a4d5979d4fdfa5112fccc5198460405161179a9190614699565b60405180910390a350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361180f576040517f4a772c2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006118196123fa565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6127108161ffff1611156118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b790614027565b60405180910390fd5b60006118ca611aab565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196191906141e2565b600a61196d9190614342565b90506000600a6005612710600a876127106119889190614055565b61ffff16866064611999919061408b565b6119a3919061408b565b6119ad919061408b565b6119b791906140fc565b6119c1919061412d565b6119cb91906140fc565b905060006119d7610c36565b90506000821115611a1357611a128460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878385611b72565b5b611a35818288631dcd6500600160405180602001604052806000815250611db3565b611a43631dcd650083611c7d565b505050505050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000611a82612427565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000807f1a2f703e435318ee39feac62abda44020ca215505d5ba3284195182c842a2d3090508091505090565b600080611ae3612454565b9050600081600001600086815260200190815260200160002090506000611b0a8286612481565b9050848260010154611b1c91906146b4565b8260010181905550808260020154611b34919061412d565b82600201819055506000826001015403611b665760008260000160006101000a81548160ff0219169083151502179055505b80935050505092915050565b6000611c0f8573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611ba893929190614729565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff166125c290919063ffffffff16565b90506000815114158015611c34575080806020019051810190611c32919061478c565b155b15611c7657846040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611c6d91906147b9565b60405180910390fd5b5050505050565b6000611c87611aab565b9050600081600101600085815260200190815260200160002060000160049054906101000a900463ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff16611ce791906147d4565b63ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1684611d27919061408b565b611d3191906140fc565b905060008184611d4191906146b4565b9050611d768360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166317d78400846125ef565b81836003016000828254611d8a919061412d565b9250508190555080836004016000828254611da5919061412d565b925050819055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611e19576040517fa25202b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e24846126f0565b90506000611e31846126f0565b9050611e4188888885858861276a565b6000611e4b6123fa565b9050611e578187612a1b565b600081600001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115611ee8576040517fb38aedf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ef48a8a8989612a8b565b85810382600001600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146120cf5781600201600088815260200190815260200160002060009054906101000a900460ff16156120ce57858260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002054038260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020819055505b5b8582600001600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612131919061412d565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516121ae92919061480c565b60405180910390a46121c48a8a8a87878a612c88565b6121d28a8a8a8a8a8a612c9e565b50505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612244576040517fefac521700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061224f846126f0565b9050600061225c846126f0565b905061226d8760008885858861276a565b60006122776123fa565b90506122838187612a1b565b8481600001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122e5919061412d565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161236392919061480c565b60405180910390a461237a88600089868689612c88565b61238988600089898989612c9e565b5050505050505050565b60008061239e612454565b9050600081600001600086815260200190815260200160002090506123c38185612481565b9250505092915050565b6000807f7fb8776fdb93079091f516133d7bb98c82f37f53f39f39f153c42a90e5e5891290508091505090565b6000807fe20f5a7f7e820e4505f9ef8ed1186e372d3490e37d8001618819927829be4e0590508091505090565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b6000807f47b8e8b32475ba6530f41efddbadc333684d4f798e5f4689344334684c5f262590508091505090565b60008260000160009054906101000a900460ff166124d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124cb906148a7565b60405180910390fd5b826001015482111561251b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251290614913565b60405180910390fd5b6000600a6005600185876001015461253391906146b4565b61253d919061412d565b866001015461254c919061408b565b866003015486600a61255e919061408b565b612568919061408b565b61257291906140fc565b61257c919061412d565b61258691906140fc565b90506125b984600501548461259b919061408b565b6125b48660040154866125ae919061408b565b84612e63565b612e7c565b91505092915050565b60606125e7838360405180606001604052806023815260200161514660239139612e95565b905092915050565b60006125f9612ead565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090508060000160009054906101000a900460ff1661266e5750506126eb565b60008312156126b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a99061497f565b60405180910390fd5b828160020160008282546126c691906149a9565b92505081905550828160030160008282546126e191906149a9565b9250508190555050505b505050565b60606000600167ffffffffffffffff81111561270f5761270e6149ed565b5b60405190808252806020026020018201604052801561273d5781602001602082028036833780820191505090505b509050828160008151811061275557612754614a1c565b5b60200260200101818152505080915050919050565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612a055760006127a76123fa565b9050600081600501905060008260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008360060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b87518110156129ff57600087828151811061285c5761285b614a1c565b5b6020026020010151905060008111156129f157600089838151811061288457612883614a1c565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16036128f3578187600401600083815260200190815260200160002060008282546128e7919061412d565b9250508190555061293e565b816128fe8d836117a8565b0361293d576129278c876000848152602001908152602001600020612eda90919063ffffffff16565b5061293b8186612f0a90919063ffffffff16565b505b5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16036129a35781876004016000838152602001908152602001600020600082825461299791906146b4565b925050819055506129ef565b60006129af8c836117a8565b036129ee576129d88b876000848152602001908152602001600020612f2490919063ffffffff16565b506129ec8185612f5490919063ffffffff16565b505b5b505b81806001019250505061283e565b50505050505b612a13868686868686612f6e565b505050505050565b612a2482612fb7565b81600b01600082815260200190815260200160002060009054906101000a900460ff1615612a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7e90614a97565b60405180910390fd5b5050565b6000612a956123fa565b90508473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612c81578060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612b8c576040517f3d2f0b3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600201600084815260200190815260200160002060009054906101000a900460ff168015612c495750818160030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054105b15612c80576040517f32af163800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5050505050565b612c9686868686868661300c565b505050505050565b612cbd8473ffffffffffffffffffffffffffffffffffffffff166130fa565b15612e5b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612d03959493929190614b47565b6020604051808303816000875af1925050508015612d3f57506040513d601f19601f82011682018060405250810190612d3c9190614bf9565b60015b612ddb57612d4b614c33565b806308c379a003612da75750612d5f614c86565b80612d6a5750612da9565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9e9190614d5a565b60405180910390fd5b505b6040517f4eebd08100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e59576040517f542073e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b505050505050565b6000818311612e725781612e74565b825b905092915050565b6000818311612e8b5782612e8d565b815b905092915050565b6060612ea4848460008561310d565b90509392505050565b6000807ff0375085caeab71645bf74d020ee2aa37bc7b653d9e55911c1084d8c88b3c05c90508091505090565b6000612f02836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613226565b905092915050565b6000612f1c836000018360001b613226565b905092915050565b6000612f4c836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61330a565b905092915050565b6000612f66836000018360001b61330a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612faf57612fad858484613371565b505b505050505050565b80600a0160009054906101000a900460ff1615613009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300090614dc8565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461304e5761304d8584846000613413565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146130905761308f8484846001613413565b5b60005b83518110156130f1576130e46130a76134ae565b8583815181106130ba576130b9614a1c565b5b602002602001015188888786815181106130d7576130d6614a1c565b5b60200260200101516134e6565b8080600101915050613093565b50505050505050565b600080823b905060008111915050919050565b6060613118856130fa565b61314e576040517f89c35afc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131779190614e24565b60006040518083038185875af1925050503d80600081146131b4576040519150601f19603f3d011682016040523d82523d6000602084013e6131b9565b606091505b509150915081156131ce57809250505061321e565b6000815111156131e15780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132159190614d5a565b60405180910390fd5b949350505050565b600080836001016000848152602001908152602001600020549050600081146133035760008460000160018660000180549050038154811061326b5761326a614a1c565b5b906000526020600020015490508085600001600184038154811061329257613291614a1c565b5b9060005260206000200181905550818560010160008381526020019081526020016000208190555050836000018054806132cf576132ce614e3b565b5b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b6000613316838361361a565b61336b5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190505b92915050565b600081518351146133ae576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8351811015613407576133f9858583815181106133d1576133d0614a1c565b5b60200260200101518584815181106133ec576133eb614a1c565b5b602002602001015161363d565b5080806001019150506133b1565b50600190509392505050565b815183511461344e576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518110156134a75761349a8585838151811061347157613470614a1c565b5b602002602001015185848151811061348c5761348b614a1c565b5b60200260200101518561378f565b8080600101915050613451565b5050505050565b6000806134b9611aab565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006134f0612ead565b905060008160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002090508060000160009054906101000a900460ff16613565575050613613565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146135d0576135cf8186857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6135ca9190614e6a565b61392d565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146136105761360f81858561392d565b5b50505b5050505050565b600080836001016000848152602001908152602001600020541415905092915050565b600080613648613aae565b9050600081600001600086815260200190815260200160002090504381600101541161367957600192505050613788565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c826003015483600001546136d691906146b4565b6136e091906140fc565b83600201548360020154436136f591906146b4565b6136ff91906140fc565b613709919061408b565b90506000826001015461372f838560030154613725919061412d565b8560000154612e7c565b61373991906146b4565b90508087111561377e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161377590614f54565b60405180910390fd5b6001955050505050505b9392505050565b6000613799613aae565b905060008160000160008681526020019081526020016000209050438160010154116137c6575050613927565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050438260000154116138605760018460ff16036138585784816000016000828254613835919061412d565b9250508190555084816003016000828254613850919061412d565b925050819055505b505050613927565b6000600c8260030154836000015461387891906146b4565b61388291906140fc565b836002015483600201544361389791906146b4565b6138a191906140fc565b6138ab919061408b565b90506138ca8183600301546138c0919061412d565b8360000154612e7c565b826003018190555060018560ff16036138fd57858260000160008282546138f1919061412d565b92505081905550613919565b85826001016000828254613911919061412d565b925050819055505b438260020181905550505050505b50505050565b60008360040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082856001015461398491906149a9565b12156139c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139bc90614fe6565b60405180910390fd5b60008282600001546139d791906149a9565b1215613a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a0f90615078565b60405180910390fd5b600080856001015414613a47578460010154838660030154613a3a9190614e6a565b613a449190615098565b90505b828560010154613a5791906149a9565b8560010181905550808560030154613a6f91906149a9565b8560030181905550828260000154613a8791906149a9565b8260000181905550808260010154613a9f9190615102565b82600101819055505050505050565b6000807fb666c964c288db81fc3205a9feeb13cfebbde2a4a4664c45ea26ef9d3d8de79290508091505090565b6000604051905090565b600080fd5b6000819050919050565b613afd81613aea565b8114613b0857600080fd5b50565b600081359050613b1a81613af4565b92915050565b600063ffffffff82169050919050565b613b3981613b20565b8114613b4457600080fd5b50565b600081359050613b5681613b30565b92915050565b60008060408385031215613b7357613b72613ae5565b5b6000613b8185828601613b0b565b9250506020613b9285828601613b47565b9150509250929050565b600060ff82169050919050565b613bb281613b9c565b82525050565b6000602082019050613bcd6000830184613ba9565b92915050565b600060208284031215613be957613be8613ae5565b5b6000613bf784828501613b0b565b91505092915050565b613c0981613aea565b82525050565b6000602082019050613c246000830184613c00565b92915050565b600060208284031215613c4057613c3f613ae5565b5b6000613c4e84828501613b47565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b613c7c81613c57565b8114613c8757600080fd5b50565b600081359050613c9981613c73565b92915050565b613ca881613b9c565b8114613cb357600080fd5b50565b600081359050613cc581613c9f565b92915050565b60008060408385031215613ce257613ce1613ae5565b5b6000613cf085828601613c8a565b9250506020613d0185828601613cb6565b9150509250929050565b600082825260208201905092915050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b6000613d52600b83613d0b565b9150613d5d82613d1c565b602082019050919050565b60006020820190508181036000830152613d8181613d45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613dc282613aea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613df457613df3613d88565b5b600182019050919050565b7f5265656e74727950726f74656374696f6e3a207265656e74727920646574656360008201527f7465642100000000000000000000000000000000000000000000000000000000602082015250565b6000613e5b602483613d0b565b9150613e6682613dff565b604082019050919050565b60006020820190508181036000830152613e8a81613e4e565b9050919050565b7f4f6e6c7920616e20617070726f766564206163636f756e742063616e2062757960008201527f20746865204d6167696320746f6b656e00000000000000000000000000000000602082015250565b6000613eed603083613d0b565b9150613ef882613e91565b604082019050919050565b60006020820190508181036000830152613f1c81613ee0565b9050919050565b7f4f6e6c792031204d6167696320746f6b656e2063616e20626520626f7567687460008201527f206e6f7721000000000000000000000000000000000000000000000000000000602082015250565b6000613f7f602583613d0b565b9150613f8a82613f23565b604082019050919050565b60006020820190508181036000830152613fae81613f72565b9050919050565b7f446973636f756e742070657263656e742063616e6e6f74206265206d6f72652060008201527f7468656e203130302c3030250000000000000000000000000000000000000000602082015250565b6000614011602c83613d0b565b915061401c82613fb5565b604082019050919050565b6000602082019050818103600083015261404081614004565b9050919050565b600061ffff82169050919050565b600061406082614047565b915061406b83614047565b9250828203905061ffff81111561408557614084613d88565b5b92915050565b600061409682613aea565b91506140a183613aea565b92508282026140af81613aea565b915082820484148315176140c6576140c5613d88565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061410782613aea565b915061411283613aea565b925082614122576141216140cd565b5b828204905092915050565b600061413882613aea565b915061414383613aea565b925082820190508082111561415b5761415a613d88565b5b92915050565b7f76616c7565547970652063616e2062652030206f722031206f6e6c7921000000600082015250565b6000614197601d83613d0b565b91506141a282614161565b602082019050919050565b600060208201905081810360008301526141c68161418a565b9050919050565b6000815190506141dc81613c9f565b92915050565b6000602082840312156141f8576141f7613ae5565b5b6000614206848285016141cd565b91505092915050565b60008160011c9050919050565b6000808291508390505b60018511156142665780860481111561424257614241613d88565b5b60018516156142515780820291505b808102905061425f8561420f565b9450614226565b94509492505050565b60008261427f576001905061433b565b8161428d576000905061433b565b81600181146142a357600281146142ad576142dc565b600191505061433b565b60ff8411156142bf576142be613d88565b5b8360020a9150848211156142d6576142d5613d88565b5b5061433b565b5060208310610133831016604e8410600b84101617156143115782820a90508381111561430c5761430b613d88565b5b61433b565b61431e848484600161421c565b9250905081840481111561433557614334613d88565b5b81810290505b9392505050565b600061434d82613aea565b915061435883613b9c565b92506143857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461426f565b905092915050565b600061439882613c57565b91506143a383613c57565b92508282026143b181613c57565b91508082146143c3576143c2613d88565b5b5092915050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e00000000000000000000000000000000602082015250565b6000614426603083613d0b565b9150614431826143ca565b604082019050919050565b6000602082019050818103600083015261445581614419565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e00000000000000000000000000000000602082015250565b60006144b8603083613d0b565b91506144c38261445c565b604082019050919050565b600060208201905081810360008301526144e7816144ab565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b6000614524601883613d0b565b915061452f826144ee565b602082019050919050565b6000602082019050818103600083015261455381614517565b9050919050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e21000000000000000000000000000000602082015250565b60006145b6603183613d0b565b91506145c18261455a565b604082019050919050565b600060208201905081810360008301526145e5816145a9565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e21000000000000000000000000000000602082015250565b6000614648603183613d0b565b9150614653826145ec565b604082019050919050565b600060208201905081810360008301526146778161463b565b9050919050565b60008115159050919050565b6146938161467e565b82525050565b60006020820190506146ae600083018461468a565b92915050565b60006146bf82613aea565b91506146ca83613aea565b92508282039050818111156146e2576146e1613d88565b5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614713826146e8565b9050919050565b61472381614708565b82525050565b600060608201905061473e600083018661471a565b61474b602083018561471a565b6147586040830184613c00565b949350505050565b6147698161467e565b811461477457600080fd5b50565b60008151905061478681614760565b92915050565b6000602082840312156147a2576147a1613ae5565b5b60006147b084828501614777565b91505092915050565b60006020820190506147ce600083018461471a565b92915050565b60006147df82613b20565b91506147ea83613b20565b9250828201905063ffffffff81111561480657614805613d88565b5b92915050565b60006040820190506148216000830185613c00565b61482e6020830184613c00565b9392505050565b7f43616c63756c6174696f6e206973206e6f7420656e61626c656420666f72207460008201527f686520746f6b656e210000000000000000000000000000000000000000000000602082015250565b6000614891602983613d0b565b915061489c82614835565b604082019050919050565b600060208201905081810360008301526148c081614884565b9050919050565b7f4e6f7420656e6f75676874207175616e74697479206c65667421000000000000600082015250565b60006148fd601a83613d0b565b9150614908826148c7565b602082019050919050565b6000602082019050818103600083015261492c816148f0565b9050919050565b7f506f6f6c2063616e206f6e6c7920696e63726561736521000000000000000000600082015250565b6000614969601783613d0b565b915061497482614933565b602082019050919050565b600060208201905081810360008301526149988161495c565b9050919050565b6000819050919050565b60006149b48261499f565b91506149bf8361499f565b9250828201905082811215600083121683821260008412151617156149e7576149e6613d88565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546f6b656e206973207061757365642100000000000000000000000000000000600082015250565b6000614a81601083613d0b565b9150614a8c82614a4b565b602082019050919050565b60006020820190508181036000830152614ab081614a74565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614af1578082015181840152602081019050614ad6565b60008484015250505050565b6000601f19601f8301169050919050565b6000614b1982614ab7565b614b238185614ac2565b9350614b33818560208601614ad3565b614b3c81614afd565b840191505092915050565b600060a082019050614b5c600083018861471a565b614b69602083018761471a565b614b766040830186613c00565b614b836060830185613c00565b8181036080830152614b958184614b0e565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614bd681614ba1565b8114614be157600080fd5b50565b600081519050614bf381614bcd565b92915050565b600060208284031215614c0f57614c0e613ae5565b5b6000614c1d84828501614be4565b91505092915050565b60008160e01c9050919050565b600060033d1115614c525760046000803e614c4f600051614c26565b90505b90565b614c5e82614afd565b810181811067ffffffffffffffff82111715614c7d57614c7c6149ed565b5b80604052505050565b600060443d10614d1357614c98613adb565b60043d036004823e80513d602482011167ffffffffffffffff82111715614cc0575050614d13565b808201805167ffffffffffffffff811115614cde5750505050614d13565b80602083010160043d038501811115614cfb575050505050614d13565b614d0a82602001850186614c55565b82955050505050505b90565b600081519050919050565b6000614d2c82614d16565b614d368185613d0b565b9350614d46818560208601614ad3565b614d4f81614afd565b840191505092915050565b60006020820190508181036000830152614d748184614d21565b905092915050565b7f416c6c20746f6b656e2069732070617573656421000000000000000000000000600082015250565b6000614db2601483613d0b565b9150614dbd82614d7c565b602082019050919050565b60006020820190508181036000830152614de181614da5565b9050919050565b600081905092915050565b6000614dfe82614ab7565b614e088185614de8565b9350614e18818560208601614ad3565b80840191505092915050565b6000614e308284614df3565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000614e758261499f565b9150614e808361499f565b9250828202614e8e8161499f565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615614ec657614ec5613d88565b5b8282058414831517614edb57614eda613d88565b5b5092915050565b7f54686520616d6f756e7420697320677261746572207468656e2074686520616360008201527f63756d6c6174656420282773656c6c61626c65272920616d6f756e7421000000602082015250565b6000614f3e603d83613d0b565b9150614f4982614ee2565b604082019050919050565b60006020820190508181036000830152614f6d81614f31565b9050919050565b7f506f6f6c20746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000614fd0602b83613d0b565b9150614fdb82614f74565b604082019050919050565b60006020820190508181036000830152614fff81614fc3565b9050919050565b7f5573657220746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000615062602b83613d0b565b915061506d82615006565b604082019050919050565b6000602082019050818103600083015261509181615055565b9050919050565b60006150a38261499f565b91506150ae8361499f565b9250826150be576150bd6140cd565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156150f7576150f6613d88565b5b828205905092915050565b600061510d8261499f565b91506151188361499f565b925082820390508181126000841216828213600085121516171561513f5761513e613d88565b5b9291505056fe416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6ca2646970667358221220b600ebc5f86d559ecb36e9b3c64e9369cb7e59d5bd6f4b962aa21b472d3a533e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636442a5ed116100ad578063d19bcdf311610071578063d19bcdf3146102f9578063d5ddea0414610317578063da47320214610335578063dbcc4d9414610353578063f396f3d6146103715761012c565b80636442a5ed146102675780636a6128f41461028557806372b88f1b146102a1578063c1c64f0f146102d1578063cd304355146102db5761012c565b806336b01423116100f457806336b01423146101d55780634ba6348b146101f35780635aecf1891461020f5780635fc86ab91461022d57806361690b501461024b5761012c565b806303d1229c1461013157806308e7f2c51461014d5780631791bf201461016b5780632db4e5691461019b5780632dc00434146101b9575b600080fd5b61014b60048036038101906101469190613b5c565b61038f565b005b61015561049a565b6040516101629190613bb8565b60405180910390f35b61018560048036038101906101809190613bd3565b61049f565b6040516101929190613c0f565b60405180910390f35b6101a3610526565b6040516101b09190613c0f565b60405180910390f35b6101d360048036038101906101ce9190613c2a565b61052e565b005b6101dd61064a565b6040516101ea9190613c0f565b60405180910390f35b61020d60048036038101906102089190613ccb565b610652565b005b61021761075d565b6040516102249190613bb8565b60405180910390f35b610235610762565b6040516102429190613bb8565b60405180910390f35b61026560048036038101906102609190613c2a565b610767565b005b61026f610883565b60405161027c9190613c0f565b60405180910390f35b61029f600480360381019061029a9190613ccb565b61088b565b005b6102bb60048036038101906102b69190613b5c565b610997565b6040516102c89190613c0f565b60405180910390f35b6102d9610a20565b005b6102e3610c12565b6040516102f09190613bb8565b60405180910390f35b610301610c17565b60405161030e9190613bb8565b60405180910390f35b61031f610c1c565b60405161032c9190613bb8565b60405180910390f35b61033d610c21565b60405161034a9190613c0f565b60405180910390f35b61035b610c29565b6040516103689190613bb8565b60405180910390f35b610379610c2e565b6040516103869190613c0f565b60405180910390f35b610397610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90613d68565b60405180910390fd5b600061040e610c6e565b905080600001600081548092919061042590613db7565b91905055506000816000015490506000801b61044081610c9b565b61044d8533866000610cde565b5081600001548114610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90613e71565b60405180910390fd5b50505050565b600581565b60006104a9610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050d90613d68565b60405180910390fd5b61051f82610e33565b9050919050565b631dcd650081565b610536610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059a90613d68565b60405180910390fd5b60006105ad610c6e565b90508060000160008154809291906105c490613db7565b91905055506000816000015490506000801b6105df81610c9b565b60006105ee630bebc200610e33565b90506105fd8133876000610cde565b505081600001548114610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90613e71565b60405180910390fd5b505050565b6317d7840081565b61065a610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be90613d68565b60405180910390fd5b60006106d1610c6e565b90508060000160008154809291906106e890613db7565b91905055506000816000015490506000801b61070381610c9b565b6107103386866000610e5e565b5081600001548114610757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074e90613e71565b60405180910390fd5b50505050565b600081565b600481565b61076f610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d390613d68565b60405180910390fd5b60006107e6610c6e565b90508060000160008154809291906107fd90613db7565b91905055506000816000015490506000801b61081881610c9b565b60006108276305f5e100610e33565b90506108368133876000610cde565b50508160000154811461087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590613e71565b60405180910390fd5b505050565b630bebc20081565b610893610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790613d68565b60405180910390fd5b600061090a610c6e565b905080600001600081548092919061092190613db7565b91905055506000816000015490506000801b61093c81610c9b565b61094a3333878760006112af565b5081600001548114610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098890613e71565b60405180910390fd5b50505050565b60006109a1610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0590613d68565b60405180910390fd5b610a18838361164d565b905092915050565b610a28610c36565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c90613d68565b60405180910390fd5b6000610a9f610c6e565b9050806000016000815480929190610ab690613db7565b91905055506000816000015490506000801b610ad181610c9b565b610afb7f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c833611667565b610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613f03565b60405180910390fd5b610b667f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c83360006116dd565b6000610b7633631dcd65006117a8565b905060008114610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290613f95565b60405180910390fd5b610bc6336000611877565b505081600001548114610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0590613e71565b60405180910390fd5b5050565b600381565b600281565b600181565b6311e1a30081565b600181565b6305f5e10081565b600080610c41611a4b565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000807f428e3b8892e2a2bc8574ce4723c321a1755cf7dc73aa1328e37a7b6996fe907f90508091505090565b610ca481611a78565b15610cdb576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6127108161ffff161115610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e90614027565b60405180910390fd5b6000610d31611aab565b90506000610d45868563ffffffff16611ad8565b9050600a6005612710600a86612710610d5e9190614055565b61ffff1685610d6d919061408b565b610d77919061408b565b610d8191906140fc565b610d8b919061412d565b610d9591906140fc565b90506000610da1610c36565b90506000821115610ddd57610ddc8360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878385611b72565b5b60006305f5e1008089610df091906140fc565b610dfa919061408b565b9050610e068184611c7d565b610e298283898b8a63ffffffff1660405180602001604052806000815250611db3565b5050505050505050565b600080610e3e611aab565b905080600501600084815260200190815260200160002054915050919050565b60008260ff161480610e73575060018260ff16145b610eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea9906141ad565b60405180910390fd5b6127108161ffff161115610efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef290614027565b60405180910390fd5b6000610f05611aab565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c91906141e2565b600a610fa89190614342565b90506000600a90506000600a60018385610fc2919061408b565b610fcc919061408b565b610fd691906140fc565b905060008060018860ff16036110a257600a60058585600a8d610ff9919061438d565b6fffffffffffffffffffffffffffffffff16611015919061408b565b61101f91906140fc565b611029919061412d565b61103391906140fc565b9150828483611042919061408b565b61104c91906140fc565b905060008211801561105e5750600081115b61109d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110949061443c565b60405180910390fd5b611136565b82848a6fffffffffffffffffffffffffffffffff166110c1919061408b565b6110cb91906140fc565b90508383826110da919061408b565b6110e491906140fc565b91506000821180156110f65750600081115b611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112c906144ce565b60405180910390fd5b5b600a6005612710600a8a61271061114d9190614055565b61ffff168661115c919061408b565b611166919061408b565b61117091906140fc565b61117a919061412d565b61118491906140fc565b91506000866000016000600160ff1660ff168152602001908152602001600020905080600001548282600101546111bb919061412d565b11156111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f39061453a565b60405180910390fd5b81816001015461120c919061412d565b8160010181905550600061121e610c36565b9050600084111561125a576112598860020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d8387611b72565b5b6112686317d7840085611c7d565b61128981828e6317d784008760405180602001604052806000815250611db3565b828860070154611299919061412d565b8860070181905550505050505050505050505050565b60008260ff1614806112c4575060018260ff16145b611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa906141ad565b60405180910390fd5b6127108161ffff16111561134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134390614027565b60405180910390fd5b6000611356611aab565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed91906141e2565b600a6113f99190614342565b90506000600a9050600060018284611411919061408b565b61141b919061408b565b905060008060018860ff16036114e757600a60058585600a8d61143e919061438d565b6fffffffffffffffffffffffffffffffff1661145a919061408b565b61146491906140fc565b61146e919061412d565b61147891906140fc565b9150828483611487919061408b565b61149191906140fc565b90506000821180156114a35750600081115b6114e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d9906145cc565b60405180910390fd5b61157b565b82848a6fffffffffffffffffffffffffffffffff16611506919061408b565b61151091906140fc565b905083838261151f919061408b565b61152991906140fc565b915060008211801561153b5750600081115b61157a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115719061465e565b60405180910390fd5b5b600a6005612710600a8a6127106115929190614055565b61ffff16866115a1919061408b565b6115ab919061408b565b6115b591906140fc565b6115bf919061412d565b6115c991906140fc565b915060006115d5610c36565b90506000831115611611576116108760020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8386611b72565b5b61161f6311e1a30084611c7d565b61163f8c8c6311e1a30085604051806020016040528060008152506121de565b505050505050505050505050565b600061165f838363ffffffff16612393565b905092915050565b6000806116726123cd565b905080600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60006116e76123cd565b90508181600001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f696f1e09104a0bef7512faf461f1a6962c3c8151a4d5979d4fdfa5112fccc5198460405161179a9190614699565b60405180910390a350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361180f576040517f4a772c2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006118196123fa565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6127108161ffff1611156118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b790614027565b60405180910390fd5b60006118ca611aab565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196191906141e2565b600a61196d9190614342565b90506000600a6005612710600a876127106119889190614055565b61ffff16866064611999919061408b565b6119a3919061408b565b6119ad919061408b565b6119b791906140fc565b6119c1919061412d565b6119cb91906140fc565b905060006119d7610c36565b90506000821115611a1357611a128460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878385611b72565b5b611a35818288631dcd6500600160405180602001604052806000815250611db3565b611a43631dcd650083611c7d565b505050505050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000611a82612427565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000807f1a2f703e435318ee39feac62abda44020ca215505d5ba3284195182c842a2d3090508091505090565b600080611ae3612454565b9050600081600001600086815260200190815260200160002090506000611b0a8286612481565b9050848260010154611b1c91906146b4565b8260010181905550808260020154611b34919061412d565b82600201819055506000826001015403611b665760008260000160006101000a81548160ff0219169083151502179055505b80935050505092915050565b6000611c0f8573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611ba893929190614729565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff166125c290919063ffffffff16565b90506000815114158015611c34575080806020019051810190611c32919061478c565b155b15611c7657846040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611c6d91906147b9565b60405180910390fd5b5050505050565b6000611c87611aab565b9050600081600101600085815260200190815260200160002060000160049054906101000a900463ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff16611ce791906147d4565b63ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1684611d27919061408b565b611d3191906140fc565b905060008184611d4191906146b4565b9050611d768360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166317d78400846125ef565b81836003016000828254611d8a919061412d565b9250508190555080836004016000828254611da5919061412d565b925050819055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611e19576040517fa25202b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e24846126f0565b90506000611e31846126f0565b9050611e4188888885858861276a565b6000611e4b6123fa565b9050611e578187612a1b565b600081600001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115611ee8576040517fb38aedf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ef48a8a8989612a8b565b85810382600001600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146120cf5781600201600088815260200190815260200160002060009054906101000a900460ff16156120ce57858260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002054038260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020819055505b5b8582600001600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612131919061412d565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516121ae92919061480c565b60405180910390a46121c48a8a8a87878a612c88565b6121d28a8a8a8a8a8a612c9e565b50505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612244576040517fefac521700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061224f846126f0565b9050600061225c846126f0565b905061226d8760008885858861276a565b60006122776123fa565b90506122838187612a1b565b8481600001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122e5919061412d565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161236392919061480c565b60405180910390a461237a88600089868689612c88565b61238988600089898989612c9e565b5050505050505050565b60008061239e612454565b9050600081600001600086815260200190815260200160002090506123c38185612481565b9250505092915050565b6000807f7fb8776fdb93079091f516133d7bb98c82f37f53f39f39f153c42a90e5e5891290508091505090565b6000807fe20f5a7f7e820e4505f9ef8ed1186e372d3490e37d8001618819927829be4e0590508091505090565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b6000807f47b8e8b32475ba6530f41efddbadc333684d4f798e5f4689344334684c5f262590508091505090565b60008260000160009054906101000a900460ff166124d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124cb906148a7565b60405180910390fd5b826001015482111561251b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251290614913565b60405180910390fd5b6000600a6005600185876001015461253391906146b4565b61253d919061412d565b866001015461254c919061408b565b866003015486600a61255e919061408b565b612568919061408b565b61257291906140fc565b61257c919061412d565b61258691906140fc565b90506125b984600501548461259b919061408b565b6125b48660040154866125ae919061408b565b84612e63565b612e7c565b91505092915050565b60606125e7838360405180606001604052806023815260200161514660239139612e95565b905092915050565b60006125f9612ead565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090508060000160009054906101000a900460ff1661266e5750506126eb565b60008312156126b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a99061497f565b60405180910390fd5b828160020160008282546126c691906149a9565b92505081905550828160030160008282546126e191906149a9565b9250508190555050505b505050565b60606000600167ffffffffffffffff81111561270f5761270e6149ed565b5b60405190808252806020026020018201604052801561273d5781602001602082028036833780820191505090505b509050828160008151811061275557612754614a1c565b5b60200260200101818152505080915050919050565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612a055760006127a76123fa565b9050600081600501905060008260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008360060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b87518110156129ff57600087828151811061285c5761285b614a1c565b5b6020026020010151905060008111156129f157600089838151811061288457612883614a1c565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16036128f3578187600401600083815260200190815260200160002060008282546128e7919061412d565b9250508190555061293e565b816128fe8d836117a8565b0361293d576129278c876000848152602001908152602001600020612eda90919063ffffffff16565b5061293b8186612f0a90919063ffffffff16565b505b5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16036129a35781876004016000838152602001908152602001600020600082825461299791906146b4565b925050819055506129ef565b60006129af8c836117a8565b036129ee576129d88b876000848152602001908152602001600020612f2490919063ffffffff16565b506129ec8185612f5490919063ffffffff16565b505b5b505b81806001019250505061283e565b50505050505b612a13868686868686612f6e565b505050505050565b612a2482612fb7565b81600b01600082815260200190815260200160002060009054906101000a900460ff1615612a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7e90614a97565b60405180910390fd5b5050565b6000612a956123fa565b90508473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612c81578060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612b8c576040517f3d2f0b3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600201600084815260200190815260200160002060009054906101000a900460ff168015612c495750818160030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054105b15612c80576040517f32af163800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5050505050565b612c9686868686868661300c565b505050505050565b612cbd8473ffffffffffffffffffffffffffffffffffffffff166130fa565b15612e5b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612d03959493929190614b47565b6020604051808303816000875af1925050508015612d3f57506040513d601f19601f82011682018060405250810190612d3c9190614bf9565b60015b612ddb57612d4b614c33565b806308c379a003612da75750612d5f614c86565b80612d6a5750612da9565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9e9190614d5a565b60405180910390fd5b505b6040517f4eebd08100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e59576040517f542073e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b505050505050565b6000818311612e725781612e74565b825b905092915050565b6000818311612e8b5782612e8d565b815b905092915050565b6060612ea4848460008561310d565b90509392505050565b6000807ff0375085caeab71645bf74d020ee2aa37bc7b653d9e55911c1084d8c88b3c05c90508091505090565b6000612f02836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613226565b905092915050565b6000612f1c836000018360001b613226565b905092915050565b6000612f4c836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61330a565b905092915050565b6000612f66836000018360001b61330a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612faf57612fad858484613371565b505b505050505050565b80600a0160009054906101000a900460ff1615613009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300090614dc8565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461304e5761304d8584846000613413565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146130905761308f8484846001613413565b5b60005b83518110156130f1576130e46130a76134ae565b8583815181106130ba576130b9614a1c565b5b602002602001015188888786815181106130d7576130d6614a1c565b5b60200260200101516134e6565b8080600101915050613093565b50505050505050565b600080823b905060008111915050919050565b6060613118856130fa565b61314e576040517f89c35afc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131779190614e24565b60006040518083038185875af1925050503d80600081146131b4576040519150601f19603f3d011682016040523d82523d6000602084013e6131b9565b606091505b509150915081156131ce57809250505061321e565b6000815111156131e15780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132159190614d5a565b60405180910390fd5b949350505050565b600080836001016000848152602001908152602001600020549050600081146133035760008460000160018660000180549050038154811061326b5761326a614a1c565b5b906000526020600020015490508085600001600184038154811061329257613291614a1c565b5b9060005260206000200181905550818560010160008381526020019081526020016000208190555050836000018054806132cf576132ce614e3b565b5b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b6000613316838361361a565b61336b5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190505b92915050565b600081518351146133ae576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8351811015613407576133f9858583815181106133d1576133d0614a1c565b5b60200260200101518584815181106133ec576133eb614a1c565b5b602002602001015161363d565b5080806001019150506133b1565b50600190509392505050565b815183511461344e576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518110156134a75761349a8585838151811061347157613470614a1c565b5b602002602001015185848151811061348c5761348b614a1c565b5b60200260200101518561378f565b8080600101915050613451565b5050505050565b6000806134b9611aab565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006134f0612ead565b905060008160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002090508060000160009054906101000a900460ff16613565575050613613565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146135d0576135cf8186857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6135ca9190614e6a565b61392d565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146136105761360f81858561392d565b5b50505b5050505050565b600080836001016000848152602001908152602001600020541415905092915050565b600080613648613aae565b9050600081600001600086815260200190815260200160002090504381600101541161367957600192505050613788565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c826003015483600001546136d691906146b4565b6136e091906140fc565b83600201548360020154436136f591906146b4565b6136ff91906140fc565b613709919061408b565b90506000826001015461372f838560030154613725919061412d565b8560000154612e7c565b61373991906146b4565b90508087111561377e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161377590614f54565b60405180910390fd5b6001955050505050505b9392505050565b6000613799613aae565b905060008160000160008681526020019081526020016000209050438160010154116137c6575050613927565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050438260000154116138605760018460ff16036138585784816000016000828254613835919061412d565b9250508190555084816003016000828254613850919061412d565b925050819055505b505050613927565b6000600c8260030154836000015461387891906146b4565b61388291906140fc565b836002015483600201544361389791906146b4565b6138a191906140fc565b6138ab919061408b565b90506138ca8183600301546138c0919061412d565b8360000154612e7c565b826003018190555060018560ff16036138fd57858260000160008282546138f1919061412d565b92505081905550613919565b85826001016000828254613911919061412d565b925050819055505b438260020181905550505050505b50505050565b60008360040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082856001015461398491906149a9565b12156139c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139bc90614fe6565b60405180910390fd5b60008282600001546139d791906149a9565b1215613a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a0f90615078565b60405180910390fd5b600080856001015414613a47578460010154838660030154613a3a9190614e6a565b613a449190615098565b90505b828560010154613a5791906149a9565b8560010181905550808560030154613a6f91906149a9565b8560030181905550828260000154613a8791906149a9565b8260000181905550808260010154613a9f9190615102565b82600101819055505050505050565b6000807fb666c964c288db81fc3205a9feeb13cfebbde2a4a4664c45ea26ef9d3d8de79290508091505090565b6000604051905090565b600080fd5b6000819050919050565b613afd81613aea565b8114613b0857600080fd5b50565b600081359050613b1a81613af4565b92915050565b600063ffffffff82169050919050565b613b3981613b20565b8114613b4457600080fd5b50565b600081359050613b5681613b30565b92915050565b60008060408385031215613b7357613b72613ae5565b5b6000613b8185828601613b0b565b9250506020613b9285828601613b47565b9150509250929050565b600060ff82169050919050565b613bb281613b9c565b82525050565b6000602082019050613bcd6000830184613ba9565b92915050565b600060208284031215613be957613be8613ae5565b5b6000613bf784828501613b0b565b91505092915050565b613c0981613aea565b82525050565b6000602082019050613c246000830184613c00565b92915050565b600060208284031215613c4057613c3f613ae5565b5b6000613c4e84828501613b47565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b613c7c81613c57565b8114613c8757600080fd5b50565b600081359050613c9981613c73565b92915050565b613ca881613b9c565b8114613cb357600080fd5b50565b600081359050613cc581613c9f565b92915050565b60008060408385031215613ce257613ce1613ae5565b5b6000613cf085828601613c8a565b9250506020613d0185828601613cb6565b9150509250929050565b600082825260208201905092915050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b6000613d52600b83613d0b565b9150613d5d82613d1c565b602082019050919050565b60006020820190508181036000830152613d8181613d45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613dc282613aea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613df457613df3613d88565b5b600182019050919050565b7f5265656e74727950726f74656374696f6e3a207265656e74727920646574656360008201527f7465642100000000000000000000000000000000000000000000000000000000602082015250565b6000613e5b602483613d0b565b9150613e6682613dff565b604082019050919050565b60006020820190508181036000830152613e8a81613e4e565b9050919050565b7f4f6e6c7920616e20617070726f766564206163636f756e742063616e2062757960008201527f20746865204d6167696320746f6b656e00000000000000000000000000000000602082015250565b6000613eed603083613d0b565b9150613ef882613e91565b604082019050919050565b60006020820190508181036000830152613f1c81613ee0565b9050919050565b7f4f6e6c792031204d6167696320746f6b656e2063616e20626520626f7567687460008201527f206e6f7721000000000000000000000000000000000000000000000000000000602082015250565b6000613f7f602583613d0b565b9150613f8a82613f23565b604082019050919050565b60006020820190508181036000830152613fae81613f72565b9050919050565b7f446973636f756e742070657263656e742063616e6e6f74206265206d6f72652060008201527f7468656e203130302c3030250000000000000000000000000000000000000000602082015250565b6000614011602c83613d0b565b915061401c82613fb5565b604082019050919050565b6000602082019050818103600083015261404081614004565b9050919050565b600061ffff82169050919050565b600061406082614047565b915061406b83614047565b9250828203905061ffff81111561408557614084613d88565b5b92915050565b600061409682613aea565b91506140a183613aea565b92508282026140af81613aea565b915082820484148315176140c6576140c5613d88565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061410782613aea565b915061411283613aea565b925082614122576141216140cd565b5b828204905092915050565b600061413882613aea565b915061414383613aea565b925082820190508082111561415b5761415a613d88565b5b92915050565b7f76616c7565547970652063616e2062652030206f722031206f6e6c7921000000600082015250565b6000614197601d83613d0b565b91506141a282614161565b602082019050919050565b600060208201905081810360008301526141c68161418a565b9050919050565b6000815190506141dc81613c9f565b92915050565b6000602082840312156141f8576141f7613ae5565b5b6000614206848285016141cd565b91505092915050565b60008160011c9050919050565b6000808291508390505b60018511156142665780860481111561424257614241613d88565b5b60018516156142515780820291505b808102905061425f8561420f565b9450614226565b94509492505050565b60008261427f576001905061433b565b8161428d576000905061433b565b81600181146142a357600281146142ad576142dc565b600191505061433b565b60ff8411156142bf576142be613d88565b5b8360020a9150848211156142d6576142d5613d88565b5b5061433b565b5060208310610133831016604e8410600b84101617156143115782820a90508381111561430c5761430b613d88565b5b61433b565b61431e848484600161421c565b9250905081840481111561433557614334613d88565b5b81810290505b9392505050565b600061434d82613aea565b915061435883613b9c565b92506143857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461426f565b905092915050565b600061439882613c57565b91506143a383613c57565b92508282026143b181613c57565b91508082146143c3576143c2613d88565b5b5092915050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e00000000000000000000000000000000602082015250565b6000614426603083613d0b565b9150614431826143ca565b604082019050919050565b6000602082019050818103600083015261445581614419565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e00000000000000000000000000000000602082015250565b60006144b8603083613d0b565b91506144c38261445c565b604082019050919050565b600060208201905081810360008301526144e7816144ab565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b6000614524601883613d0b565b915061452f826144ee565b602082019050919050565b6000602082019050818103600083015261455381614517565b9050919050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e21000000000000000000000000000000602082015250565b60006145b6603183613d0b565b91506145c18261455a565b604082019050919050565b600060208201905081810360008301526145e5816145a9565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e21000000000000000000000000000000602082015250565b6000614648603183613d0b565b9150614653826145ec565b604082019050919050565b600060208201905081810360008301526146778161463b565b9050919050565b60008115159050919050565b6146938161467e565b82525050565b60006020820190506146ae600083018461468a565b92915050565b60006146bf82613aea565b91506146ca83613aea565b92508282039050818111156146e2576146e1613d88565b5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614713826146e8565b9050919050565b61472381614708565b82525050565b600060608201905061473e600083018661471a565b61474b602083018561471a565b6147586040830184613c00565b949350505050565b6147698161467e565b811461477457600080fd5b50565b60008151905061478681614760565b92915050565b6000602082840312156147a2576147a1613ae5565b5b60006147b084828501614777565b91505092915050565b60006020820190506147ce600083018461471a565b92915050565b60006147df82613b20565b91506147ea83613b20565b9250828201905063ffffffff81111561480657614805613d88565b5b92915050565b60006040820190506148216000830185613c00565b61482e6020830184613c00565b9392505050565b7f43616c63756c6174696f6e206973206e6f7420656e61626c656420666f72207460008201527f686520746f6b656e210000000000000000000000000000000000000000000000602082015250565b6000614891602983613d0b565b915061489c82614835565b604082019050919050565b600060208201905081810360008301526148c081614884565b9050919050565b7f4e6f7420656e6f75676874207175616e74697479206c65667421000000000000600082015250565b60006148fd601a83613d0b565b9150614908826148c7565b602082019050919050565b6000602082019050818103600083015261492c816148f0565b9050919050565b7f506f6f6c2063616e206f6e6c7920696e63726561736521000000000000000000600082015250565b6000614969601783613d0b565b915061497482614933565b602082019050919050565b600060208201905081810360008301526149988161495c565b9050919050565b6000819050919050565b60006149b48261499f565b91506149bf8361499f565b9250828201905082811215600083121683821260008412151617156149e7576149e6613d88565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546f6b656e206973207061757365642100000000000000000000000000000000600082015250565b6000614a81601083613d0b565b9150614a8c82614a4b565b602082019050919050565b60006020820190508181036000830152614ab081614a74565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614af1578082015181840152602081019050614ad6565b60008484015250505050565b6000601f19601f8301169050919050565b6000614b1982614ab7565b614b238185614ac2565b9350614b33818560208601614ad3565b614b3c81614afd565b840191505092915050565b600060a082019050614b5c600083018861471a565b614b69602083018761471a565b614b766040830186613c00565b614b836060830185613c00565b8181036080830152614b958184614b0e565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614bd681614ba1565b8114614be157600080fd5b50565b600081519050614bf381614bcd565b92915050565b600060208284031215614c0f57614c0e613ae5565b5b6000614c1d84828501614be4565b91505092915050565b60008160e01c9050919050565b600060033d1115614c525760046000803e614c4f600051614c26565b90505b90565b614c5e82614afd565b810181811067ffffffffffffffff82111715614c7d57614c7c6149ed565b5b80604052505050565b600060443d10614d1357614c98613adb565b60043d036004823e80513d602482011167ffffffffffffffff82111715614cc0575050614d13565b808201805167ffffffffffffffff811115614cde5750505050614d13565b80602083010160043d038501811115614cfb575050505050614d13565b614d0a82602001850186614c55565b82955050505050505b90565b600081519050919050565b6000614d2c82614d16565b614d368185613d0b565b9350614d46818560208601614ad3565b614d4f81614afd565b840191505092915050565b60006020820190508181036000830152614d748184614d21565b905092915050565b7f416c6c20746f6b656e2069732070617573656421000000000000000000000000600082015250565b6000614db2601483613d0b565b9150614dbd82614d7c565b602082019050919050565b60006020820190508181036000830152614de181614da5565b9050919050565b600081905092915050565b6000614dfe82614ab7565b614e088185614de8565b9350614e18818560208601614ad3565b80840191505092915050565b6000614e308284614df3565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000614e758261499f565b9150614e808361499f565b9250828202614e8e8161499f565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615614ec657614ec5613d88565b5b8282058414831517614edb57614eda613d88565b5b5092915050565b7f54686520616d6f756e7420697320677261746572207468656e2074686520616360008201527f63756d6c6174656420282773656c6c61626c65272920616d6f756e7421000000602082015250565b6000614f3e603d83613d0b565b9150614f4982614ee2565b604082019050919050565b60006020820190508181036000830152614f6d81614f31565b9050919050565b7f506f6f6c20746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000614fd0602b83613d0b565b9150614fdb82614f74565b604082019050919050565b60006020820190508181036000830152614fff81614fc3565b9050919050565b7f5573657220746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000615062602b83613d0b565b915061506d82615006565b604082019050919050565b6000602082019050818103600083015261509181615055565b9050919050565b60006150a38261499f565b91506150ae8361499f565b9250826150be576150bd6140cd565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156150f7576150f6613d88565b5b828205905092915050565b600061510d8261499f565b91506151188361499f565b925082820390508181126000841216828213600085121516171561513f5761513e613d88565b5b9291505056fe416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6ca2646970667358221220b600ebc5f86d559ecb36e9b3c64e9369cb7e59d5bd6f4b962aa21b472d3a533e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}