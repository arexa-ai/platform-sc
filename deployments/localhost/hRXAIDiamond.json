{
  "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamondCutFacet",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initializationContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "InitializationFunctionReverted",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x306af43e3d796ecc0c279c5b1e568c4474ea589e0014d35516fd8cfbf2cab51f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "transactionIndex": 0,
    "gasUsed": "2506329",
    "logsBloom": "0x
    "blockHash": "0x12dee4f9fad8f1a9919ec18a0214c6e2ee3c111dfe107129f0e40b5f510b653d",
    "transactionHash": "0x306af43e3d796ecc0c279c5b1e568c4474ea589e0014d35516fd8cfbf2cab51f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17,
        "transactionHash": "0x306af43e3d796ecc0c279c5b1e568c4474ea589e0014d35516fd8cfbf2cab51f",
        "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
        "topics": [
          "0xc1ddb807f72f9e732ef6f32805c68a3b77ca377c0e141fe3bcaf19fe667f3534",
          "0x0000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc",
          "0x0000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x12dee4f9fad8f1a9919ec18a0214c6e2ee3c111dfe107129f0e40b5f510b653d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17,
        "transactionHash": "0x306af43e3d796ecc0c279c5b1e568c4474ea589e0014d35516fd8cfbf2cab51f",
        "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x12dee4f9fad8f1a9919ec18a0214c6e2ee3c111dfe107129f0e40b5f510b653d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17,
        "transactionHash": "0x306af43e3d796ecc0c279c5b1e568c4474ea589e0014d35516fd8cfbf2cab51f",
        "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a51c1fc2f0d1a1b8494ed1fe312d7c3a78ed91c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000011f931c1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x12dee4f9fad8f1a9919ec18a0214c6e2ee3c111dfe107129f0e40b5f510b653d"
      }
    ],
    "blockNumber": 17,
    "cumulativeGasUsed": "2506329",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
    "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0"
  ],
  "numDeployments": 1,
  "solcInputHash": "29368373a120d2797ab4b44183bb832e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./base/Diamond/LibDiamondStorage.sol\\\";\\nimport { LibDiamond } from \\\"./base/Diamond/LibDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"./interfaces/IDiamondCut.sol\\\";\\n\\ncontract Diamond {\\n\\tconstructor(address _contractOwner, address _diamondCutFacet) payable {\\n\\t\\tLibDiamond.setDiamondAddress(address(this));\\n\\t\\tLibDiamond.setContractOwner(_contractOwner);\\n\\n\\t\\t// Add the diamondCut external function from the diamondCutFacet\\n\\t\\tIDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n\\t\\tbytes4[] memory functionSelectors = new bytes4[](1);\\n\\t\\tfunctionSelectors[0] = IDiamondCut.diamondCut.selector;\\n\\t\\tcut[0] = IDiamondCut.FacetCut({\\n\\t\\t\\tfacetAddress: _diamondCutFacet,\\n\\t\\t\\taction: IDiamondCut.FacetCutAction.Add,\\n\\t\\t\\tfunctionSelectors: functionSelectors\\n\\t\\t});\\n\\t\\tLibDiamond.diamondCut(cut, address(0), \\\"\\\");\\n\\t}\\n\\n\\t// Find facet for function that is called and execute the\\n\\t// function if a facet is found and return any value.\\n\\tfallback() external payable {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\t// get facet from function selector\\n\\t\\taddress facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n\\t\\trequire(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n\\t\\t// Execute external function from facet using delegatecall and return any value.\\n\\t\\tassembly {\\n\\t\\t\\t// copy function selector and any arguments\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\t\\t\\t// execute function call using the facet\\n\\t\\t\\tlet result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n\\t\\t\\t// get any return value\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\t\\t\\t// return any return value or error back to the caller\\n\\t\\t\\tswitch result\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0xeca6768a4e61b014773a4ffa99238979fed83468afa81837a8d8285a9ab5b96e\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibAccessControlStorage.sol\\\";\\r\\n\\r\\nimport { IERC173 } from \\\"../../interfaces/IERC173.sol\\\";\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { UintUtils } from \\\"../../utils/UintUtils.sol\\\";\\r\\nimport { AddressUtils } from \\\"../../utils/AddressUtils.sol\\\";\\r\\n\\r\\nlibrary LibAccessControl {\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing UintUtils for uint256;\\r\\n\\tusing AddressUtils for address;\\r\\n\\r\\n\\terror Ownable__NotOwner();\\r\\n\\terror Ownable__NotTransitiveOwner();\\r\\n\\r\\n\\terror AccessDenied(bytes32 role, address account);\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\tevent RoleAdminChanged(address indexed owner, bytes32 role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\tevent RoleRevoked(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\r\\n\\tbytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n\\tfunction _setOwner(address _newOwner) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\taddress previousOwner = acls.owner;\\r\\n\\t\\tacls.owner = _newOwner;\\r\\n\\r\\n\\t\\t//Init DEFAULT_ADMIN_ROLE to _newOwner\\r\\n\\t\\tLibAccessControl._grantRole(LibAccessControl.DEFAULT_ADMIN_ROLE, _newOwner);\\r\\n\\r\\n\\t\\temit OwnershipTransferred(previousOwner, _newOwner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _owner() internal view returns (address owner_) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\towner_ = acls.owner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transitiveOwner() internal view returns (address owner_) {\\r\\n\\t\\towner_ = LibAccessControl._owner();\\r\\n\\r\\n\\t\\twhile (owner_.isContract()) {\\r\\n\\t\\t\\ttry IERC173(owner_).owner() returns (address transitiveOwner) {\\r\\n\\t\\t\\t\\towner_ = transitiveOwner;\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _owner(), \\\"Not owner!\\\");\\r\\n\\t\\tif (msg.sender != _owner()) {\\r\\n\\t\\t\\trevert Ownable__NotOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsTransitiveOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _transitiveOwner(), \\\"Not transitive owner!\\\");\\r\\n\\t\\tif (msg.sender != _transitiveOwner()) {\\r\\n\\t\\t\\trevert Ownable__NotTransitiveOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice assign role to given account\\r\\n\\t * @param _role role to assign\\r\\n\\t * @param _account recipient of role assignment\\r\\n\\t */\\r\\n\\tfunction _grantRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\tacls.roles[acls.owner][_role].members.add(_account);\\r\\n\\t\\t\\temit RoleGranted(acls.owner, _role, _account, msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice unassign role from given account\\r\\n\\t * @param _role role to unassign\\r\\n\\t * @param _account account to revokeAccessControlStorage\\r\\n\\t */\\r\\n\\tfunction _revokeRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\t// require(_role != LibAccessControl.DEFAULT_ADMIN_ROLE && _account != acls.owner);\\r\\n\\t\\tacls.roles[acls.owner][_role].members.remove(_account);\\r\\n\\t\\temit RoleRevoked(acls.owner, _role, _account, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice relinquish role\\r\\n\\t * @param _role role to relinquish\\r\\n\\t */\\r\\n\\tfunction _renounceRole(bytes32 _role) internal {\\r\\n\\t\\t_revokeRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query one of the accounts that have role of the project\\r\\n\\t * @dev WARNING: When using _getProjectRoleMember and _getProjectRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _index index of role member\\r\\n\\t */\\r\\n\\tfunction _getRoleMember(bytes32 _role, uint256 _index) internal view returns (address) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.at(_index);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query the number of accounts that have role.\\r\\n\\t * @dev WARNING: When using _getRoleMember and _getRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _getRoleMemberCount(address, bytes32 _role) internal view returns (uint256) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query whether role is assigned to account\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account account to query\\r\\n\\t * @return bool whether role is assigned to account\\r\\n\\t */\\r\\n\\tfunction _hasRole(bytes32 _role, address _account) internal view returns (bool) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.contains(_account);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if sender does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role) internal view {\\r\\n\\t\\t_checkRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if given account does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role, address _account) internal view {\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\trevert AccessDenied({ role: _role, account: _account });\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query admin role for given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @return admin role\\r\\n\\t */\\r\\n\\tfunction _getRoleAdmin(bytes32 _role) internal view returns (bytes32) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].adminRole;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set role as admin role\\r\\n\\t * @param _role role to set\\r\\n\\t * @param _adminRole admin role to set\\r\\n\\t */\\r\\n\\tfunction _setRoleAdmin(bytes32 _role, bytes32 _adminRole) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tbytes32 previousAdminRole = _getRoleAdmin(_role);\\r\\n\\t\\tacls.roles[acls.owner][_role].adminRole = _adminRole;\\r\\n\\t\\temit RoleAdminChanged(acls.owner, _role, previousAdminRole, _adminRole);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2c0da263bd49a5c7a6d1a9d8866bbe5936b43f3ee39bf2c9dc4600d7045b49e9\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport \\\"./RoleData.sol\\\";\\r\\n\\r\\nstruct AccessControllStorage {\\r\\n\\t//owner => role => adminRole, members mapping\\r\\n\\taddress owner;\\r\\n\\tmapping(address => mapping(bytes32 => RoleData)) roles;\\r\\n}\\r\\n\\r\\nlibrary LibAccessControlStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.access-control.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (AccessControllStorage storage acls_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tacls_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ae5597ade94391b4f367368b5e6f5b4d15dce1e430e217ee5e549a652c8eb8b\",\"license\":\"MIT\"},\"contracts/base/AccessControl/RoleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RoleData {\\r\\n\\tbytes32 adminRole;\\r\\n\\tEnumerableSet.AddressSet members;\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d7eaf459b09f21c482e9b9df5b5c99572095e79174de3621f5ec9e32413ac7\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport { IDiamondCut } from \\\"../../interfaces/IDiamondCut.sol\\\";\\n\\nimport { LibAccessControl } from \\\"../AccessControl/LibAccessControl.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tfunction setDiamondAddress(address _diamondAddress) internal {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(ds.diamondAddress == address(0), \\\"Already initialized!\\\");\\n\\t\\tds.diamondAddress = _diamondAddress;\\n\\t}\\n\\n\\tfunction getDiamondAddress() internal view returns (address) {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\treturn ds.diamondAddress;\\n\\t}\\n\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tLibAccessControl._setOwner(_newOwner);\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\tLibAccessControl._enforceIsOwner();\\n\\t}\\n\\n\\t// Internal function version of diamondCut\\n\\tfunction diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n\\t\\t\\tIDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n\\t\\t\\tif (action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\t\\taddFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\t\\treplaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\t\\tremoveFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\t// if function does not exist then do nothing and return\\n\\t\\trequire(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n\\t\\tenforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n\\t\\tds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n\\t\\tds.facetAddresses.push(_facetAddress);\\n\\t}\\n\\n\\tfunction addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n\\t\\tds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n\\t\\tds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n\\t}\\n\\n\\tfunction removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n\\t\\t// an immutable function is a function defined directly in a diamond\\n\\t\\trequire(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n\\t\\t// replace selector with last selector, then delete last selector\\n\\t\\tuint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n\\t\\tuint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n\\t\\t// if not the same then replace _selector with lastSelector\\n\\t\\tif (selectorPosition != lastSelectorPosition) {\\n\\t\\t\\tbytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n\\t\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n\\t\\t\\tds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n\\t\\t}\\n\\t\\t// delete the last selector\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n\\t\\tdelete ds.selectorToFacetAndPosition[_selector];\\n\\n\\t\\t// if no more selectors for facet address then delete the facet address\\n\\t\\tif (lastSelectorPosition == 0) {\\n\\t\\t\\t// replace facet address with last facet address and delete last facet address\\n\\t\\t\\tuint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n\\t\\t\\tuint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t\\tif (facetAddressPosition != lastFacetAddressPosition) {\\n\\t\\t\\t\\taddress lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n\\t\\t\\t\\tds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n\\t\\t\\t\\tds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n\\t\\t\\t}\\n\\t\\t\\tds.facetAddresses.pop();\\n\\t\\t\\tdelete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tenforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\tif (!success) {\\n\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t// bubble up error\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(error)\\n\\t\\t\\t\\t\\trevert(add(32, error), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert InitializationFunctionReverted(_init, _calldata);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f15f134edd02ce19fb55ce2c33ef634b5766bef24fee8dcc69f53d04bfe5219\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct FacetAddressAndPosition {\\r\\n\\taddress facetAddress;\\r\\n\\tuint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n}\\r\\n\\r\\nstruct FacetFunctionSelectors {\\r\\n\\tbytes4[] functionSelectors;\\r\\n\\tuint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n}\\r\\n\\r\\nstruct DiamondStorage {\\r\\n\\taddress diamondAddress;\\r\\n\\t// maps function selector to the facet address and\\r\\n\\t// the position of the selector in the facetFunctionSelectors.selectors array\\r\\n\\tmapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n\\t// maps facet addresses to function selectors\\r\\n\\tmapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n\\t// facet addresses\\r\\n\\taddress[] facetAddresses;\\r\\n\\t// Used to query if a contract implements an interface.\\r\\n\\t// Used to implement ERC-165.\\r\\n\\tmapping(bytes4 => bool) supportedInterfaces;\\r\\n\\t//the whole diamond is paused or not\\r\\n\\tbool paused;\\r\\n}\\r\\n\\r\\nlibrary LibDiamondStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.diamond.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (DiamondStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x13a60db83059255e32f692e0508aaa9af49568a363e3aae233ae80aab0c75098\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n\\tenum FacetCutAction {\\n\\t\\tAdd,\\n\\t\\tReplace,\\n\\t\\tRemove\\n\\t}\\n\\t// Add=0, Replace=1, Remove=2\\n\\n\\tstruct FacetCut {\\n\\t\\taddress facetAddress;\\n\\t\\tFacetCutAction action;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n\\tevent DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x38a0a1b25fb31d2205f5aaedb20f1788a38bc4147a4a20ee030335b7cdbaa0c4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\ninterface IERC173 {\\r\\n\\t/// @dev This emits when ownership of a contract changes.\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/// @notice Get the address of the owner\\r\\n\\t/// @return owner_ The address of the owner.\\r\\n\\tfunction owner() external view returns (address owner_);\\r\\n\\r\\n\\t/// @notice Set the address of the new owner of the contract\\r\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n\\t/// @param _newOwner The address of the new owner of the contract\\r\\n\\tfunction transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x92d3f89d7077a9b49b41fd69091ce8f8c1b20c5695dafbbb4b13e7b6f0d6e6ef\",\"license\":\"MIT\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { UintUtils } from \\\"./UintUtils.sol\\\";\\n\\nlibrary AddressUtils {\\n\\tusing UintUtils for uint256;\\n\\n\\terror AddressUtils__InsufficientBalance();\\n\\terror AddressUtils__NotContract();\\n\\terror AddressUtils__SendValueFailed();\\n\\n\\tfunction toString(address account) internal pure returns (string memory) {\\n\\t\\treturn uint256(uint160(account)).toHexString(20);\\n\\t}\\n\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\tfunction sendValue(address payable account, uint256 amount) internal {\\n\\t\\t(bool success, ) = account.call{ value: amount }(\\\"\\\");\\n\\t\\tif (!success) revert AddressUtils__SendValueFailed();\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"AddressUtils: failed low-level call\\\");\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n\\t\\treturn _functionCallWithValue(target, data, 0, error);\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"AddressUtils: failed low-level call with value\\\");\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) internal returns (bytes memory) {\\n\\t\\tif (value > address(this).balance) revert AddressUtils__InsufficientBalance();\\n\\t\\treturn _functionCallWithValue(target, data, value, error);\\n\\t}\\n\\n\\t/**\\n\\t * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n\\t * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n\\t * @param target recipient of call\\n\\t * @param gasAmount gas allowance for call\\n\\t * @param value native token value to include in call\\n\\t * @param maxCopy maximum number of bytes to copy from return data\\n\\t * @param data encoded call data\\n\\t * @return success whether call is successful\\n\\t * @return returnData copied return data\\n\\t */\\n\\tfunction excessivelySafeCall(\\n\\t\\taddress target,\\n\\t\\tuint256 gasAmount,\\n\\t\\tuint256 value,\\n\\t\\tuint16 maxCopy,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool success, bytes memory returnData) {\\n\\t\\treturnData = new bytes(maxCopy);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// execute external call via assembly to avoid automatic copying of return data\\n\\t\\t\\tsuccess := call(gasAmount, target, value, add(data, 0x20), mload(data), 0, 0)\\n\\n\\t\\t\\t// determine whether to limit amount of data to copy\\n\\t\\t\\tlet toCopy := returndatasize()\\n\\n\\t\\t\\tif gt(toCopy, maxCopy) {\\n\\t\\t\\t\\ttoCopy := maxCopy\\n\\t\\t\\t}\\n\\n\\t\\t\\t// store the length of the copied bytes\\n\\t\\t\\tmstore(returnData, toCopy)\\n\\n\\t\\t\\t// copy the bytes from returndata[0:toCopy]\\n\\t\\t\\treturndatacopy(add(returnData, 0x20), 0, toCopy)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) private returns (bytes memory) {\\n\\t\\tif (!isContract(target)) revert AddressUtils__NotContract();\\n\\n\\t\\t(bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n\\t\\tif (success) {\\n\\t\\t\\treturn returnData;\\n\\t\\t} else if (returnData.length > 0) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet returnData_size := mload(returnData)\\n\\t\\t\\t\\trevert(add(32, returnData), returnData_size)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\trevert(error);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7dec1466e1e606394a35fa837156a011f761ac6a6e9097b89a348fad1f2f692\",\"license\":\"MIT\"},\"contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n\\terror EnumerableSet__IndexOutOfBounds();\\n\\n\\tstruct Set {\\n\\t\\tbytes32[] _values;\\n\\t\\t// 1-indexed to allow 0 to signify nonexistence\\n\\t\\tmapping(bytes32 => uint256) _indexes;\\n\\t}\\n\\n\\tstruct Bytes32Set {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct AddressSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct UintSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n\\t\\treturn _at(set._inner, index);\\n\\t}\\n\\n\\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\n\\t\\treturn address(uint160(uint256(_at(set._inner, index))));\\n\\t}\\n\\n\\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n\\t\\treturn uint256(_at(set._inner, index));\\n\\t}\\n\\n\\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, value);\\n\\t}\\n\\n\\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction indexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, value);\\n\\t}\\n\\n\\tfunction indexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction indexOf(UintSet storage set, uint256 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(AddressSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(UintSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, value);\\n\\t}\\n\\n\\tfunction add(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, value);\\n\\t}\\n\\n\\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction toArray(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n\\t\\treturn set._inner._values;\\n\\t}\\n\\n\\tfunction toArray(AddressSet storage set) internal view returns (address[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\taddress[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction toArray(UintSet storage set) internal view returns (uint256[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\tuint256[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\n\\t\\tif (index >= set._values.length) revert EnumerableSet__IndexOutOfBounds();\\n\\t\\treturn set._values[index];\\n\\t}\\n\\n\\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\n\\t\\treturn set._indexes[value] != 0;\\n\\t}\\n\\n\\tfunction _indexOf(Set storage set, bytes32 value) private view returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn set._indexes[value] - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _length(Set storage set) private view returns (uint256) {\\n\\t\\treturn set._values.length;\\n\\t}\\n\\n\\tfunction _add(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tif (!_contains(set, value)) {\\n\\t\\t\\tset._values.push(value);\\n\\t\\t\\tset._indexes[value] = set._values.length;\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _remove(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tuint256 valueIndex = set._indexes[value];\\n\\n\\t\\tif (valueIndex != 0) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tbytes32 last = set._values[set._values.length - 1];\\n\\n\\t\\t\\t\\t// move last value to now-vacant index\\n\\n\\t\\t\\t\\tset._values[valueIndex - 1] = last;\\n\\t\\t\\t\\tset._indexes[last] = valueIndex;\\n\\t\\t\\t}\\n\\t\\t\\t// clear last index\\n\\n\\t\\t\\tset._values.pop();\\n\\t\\t\\tdelete set._indexes[value];\\n\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x442e9fd507b659095a1fec47f8cb6e540442165217af05db1afa2703a993e038\",\"license\":\"MIT\"},\"contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n\\terror UintUtils__InsufficientHexLength();\\n\\n\\tbytes16 private constant HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n\\tfunction add(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? sub(a, -b) : a + uint256(b);\\n\\t}\\n\\n\\tfunction sub(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? add(a, -b) : a - uint256(b);\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 length = 0;\\n\\n\\t\\tfor (uint256 temp = value; temp != 0; temp >>= 8) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tlength++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\t\\tbuffer[i] = HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\t\\tvalue >>= 4;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\",\"keccak256\":\"0xec4d89ef08ad402e0c8b30b8e4e135991009384aa72f0cb7c6165721ec5050e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405162004e4c38038062004e4c833981810160405281019062000029919062001c79565b6200003f306200020d60201b620001771760201c565b62000055826200030360201b6200025d1760201c565b6000600167ffffffffffffffff81111562000075576200007462001cc0565b5b604051908082528060200260200182016040528015620000b257816020015b6200009e62001bc3565b815260200190600190039081620000945790505b5090506000600167ffffffffffffffff811115620000d557620000d462001cc0565b5b604051908082528060200260200182016040528015620001045781602001602082028036833780820191505090505b509050631f931c1c60e01b8160008151811062000126576200012562001cef565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060405180606001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115620001b057620001af62001d1e565b5b81526020018281525082600081518110620001d057620001cf62001cef565b5b602002602001018190525062000203826000604051806020016040528060008152506200031c60201b620002691760201c565b5050505062002880565b600062000224620005a060201b6200014a1760201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620002bc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002b39062001dae565b60405180910390fd5b818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6200031981620005cd60201b620004981760201c565b50565b60005b83518110156200054b57600084828151811062000341576200034062001cef565b5b60200260200101516020015190506000600281111562000366576200036562001d1e565b5b8160028111156200037c576200037b62001d1e565b5b03620003dc57620003d68583815181106200039c576200039b62001cef565b5b602002602001015160000151868481518110620003be57620003bd62001cef565b5b602002602001015160400151620006cb60201b60201c565b62000534565b60016002811115620003f357620003f262001d1e565b5b81600281111562000409576200040862001d1e565b5b0362000469576200046385838151811062000429576200042862001cef565b5b6020026020010151600001518684815181106200044b576200044a62001cef565b5b6020026020010151604001516200097260201b60201c565b62000533565b6002808111156200047f576200047e62001d1e565b5b81600281111562000495576200049462001d1e565b5b03620004f557620004ef858381518110620004b557620004b462001cef565b5b602002602001015160000151868481518110620004d757620004d662001cef565b5b60200260200101516040015162000c2b60201b60201c565b62000532565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005299062001e46565b60405180910390fd5b5b5b508080620005429062001ea1565b9150506200031f565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405162000581939291906200221b565b60405180910390a16200059b828262000dd860201b60201c565b505050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000620005e462000f0c60201b6200057c1760201c565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200066c6000801b8462000f3960201b620005a91760201c565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b600081511162000712576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200070990620022dc565b60405180910390fd5b600062000729620005a060201b6200014a1760201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200079d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007949062002374565b60405180910390fd5b60008160020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036200081357620008128285620010a460201b60201c565b5b60005b83518110156200096b57600084828151811062000838576200083762001cef565b5b602002602001015190506000846001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200092f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000926906200240c565b60405180910390fd5b620009438583868a6200118860201b60201c565b8380620009509062002446565b94505050508080620009629062001ea1565b91505062000816565b5050505050565b6000815111620009b9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009b090620022dc565b60405180910390fd5b6000620009d0620005a060201b6200014a1760201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a3b9062002374565b60405180910390fd5b60008160020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff160362000aba5762000ab98285620010a460201b60201c565b5b60005b835181101562000c2457600084828151811062000adf5762000ade62001cef565b5b602002602001015190506000846001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000bcc90620024f5565b60405180910390fd5b62000be88582846200133560201b60201c565b62000bfc8583868a6200118860201b60201c565b838062000c099062002446565b9450505050808062000c1b9062001ea1565b91505062000abd565b5050505050565b600081511162000c72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c6990620022dc565b60405180910390fd5b600062000c89620005a060201b6200014a1760201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000cf4906200258d565b60405180910390fd5b60005b825181101562000dd257600083828151811062000d225762000d2162001cef565b5b602002602001015190506000836001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905062000dba8482846200133560201b60201c565b5050808062000dc99062001ea1565b91505062000d00565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16031562000f085762000e398260405180606001604052806028815260200162004e0060289139620019b660201b60201c565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405162000e639190620025f1565b600060405180830381855af49150503d806000811462000ea0576040519150601f19603f3d011682016040523d82523d6000602084013e62000ea5565b606091505b50915091508162000f055760008151111562000ec45780518082602001fd5b83836040517f192105d700000000000000000000000000000000000000000000000000000000815260040162000efc9291906200260a565b60405180910390fd5b50505b5050565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b600062000f5062000f0c60201b6200057c1760201c565b905062000f64838362001a0b60201b60201c565b6200109f5762000ffb828260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060010162001ac060201b620006f51790919060201c565b503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc1ddb807f72f9e732ef6f32805c68a3b77ca377c0e141fe3bcaf19fe667f35348660405162001096919062002659565b60405180910390a45b505050565b620010cf8160405180606001604052806024815260200162004e2860249139620019b660201b60201c565b81600301805490508260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600301819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846001016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846001016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620013a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200139e90620026ec565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362001418576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200140f9062002784565b60405180910390fd5b6000836001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050620014f19190620027a6565b90508082146200168c5760008560020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811062001556576200155562001cef565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018481548110620015d557620015d462001cef565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480620016e357620016e2620027e1565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008103620019af57600060018660030180549050620017d09190620027a6565b905060008660020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050818114620019185760008760030183815481106200183e576200183d62001cef565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508088600301838154811062001885576200188462001cef565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b866003018054806200192f576200192e620027e1565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b905060008111829062001a05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019fc91906200285c565b60405180910390fd5b50505050565b60008062001a2362000f0c60201b6200057c1760201c565b905062001ab7838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010162001af860201b620007251790919060201c565b91505092915050565b600062001af0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62001b3060201b60201c565b905092915050565b600062001b28836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62001ba060201b60201c565b905092915050565b600062001b44838362001ba060201b60201c565b62001b9a5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600281111562001c025762001c0162001d1e565b5b8152602001606081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001c418262001c14565b9050919050565b62001c538162001c34565b811462001c5f57600080fd5b50565b60008151905062001c738162001c48565b92915050565b6000806040838503121562001c935762001c9262001c0f565b5b600062001ca38582860162001c62565b925050602062001cb68582860162001c62565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f416c726561647920696e697469616c697a656421000000000000000000000000600082015250565b600062001d9660148362001d4d565b915062001da38262001d5e565b602082019050919050565b6000602082019050818103600083015262001dc98162001d87565b9050919050565b7f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560008201527f74416374696f6e00000000000000000000000000000000000000000000000000602082015250565b600062001e2e60278362001d4d565b915062001e3b8262001dd0565b604082019050919050565b6000602082019050818103600083015262001e618162001e1f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600062001eae8262001e97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001ee35762001ee262001e68565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001f258162001c34565b82525050565b6003811062001f3f5762001f3e62001d1e565b5b50565b600081905062001f528262001f2b565b919050565b600062001f648262001f42565b9050919050565b62001f768162001f57565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b62001fdf8162001fa8565b82525050565b600062001ff3838362001fd4565b60208301905092915050565b6000602082019050919050565b6000620020198262001f7c565b62002025818562001f87565b9350620020328362001f98565b8060005b83811015620020695781516200204d888262001fe5565b97506200205a8362001fff565b92505060018101905062002036565b5085935050505092915050565b600060608301600083015162002090600086018262001f1a565b506020830151620020a5602086018262001f6b565b5060408301518482036040860152620020bf82826200200c565b9150508091505092915050565b6000620020da838362002076565b905092915050565b6000602082019050919050565b6000620020fc8262001eee565b62002108818562001ef9565b9350836020820285016200211c8562001f0a565b8060005b858110156200215e57848403895281516200213c8582620020cc565b94506200214983620020e2565b925060208a0199505060018101905062002120565b50829750879550505050505092915050565b6200217b8162001c34565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620021bd578082015181840152602081019050620021a0565b60008484015250505050565b6000601f19601f8301169050919050565b6000620021e78262002181565b620021f381856200218c565b9350620022058185602086016200219d565b6200221081620021c9565b840191505092915050565b60006060820190508181036000830152620022378186620020ef565b905062002248602083018562002170565b81810360408301526200225c8184620021da565b9050949350505050565b7f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660008201527f6163657420746f20637574000000000000000000000000000000000000000000602082015250565b6000620022c4602b8362001d4d565b9150620022d18262002266565b604082019050919050565b60006020820190508181036000830152620022f781620022b5565b9050919050565b7f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260008201527f6520616464726573732830290000000000000000000000000000000000000000602082015250565b60006200235c602c8362001d4d565b91506200236982620022fe565b604082019050919050565b600060208201905081810360008301526200238f816200234d565b9050919050565b7f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60008201527f6e207468617420616c7265616479206578697374730000000000000000000000602082015250565b6000620023f460358362001d4d565b9150620024018262002396565b604082019050919050565b600060208201905081810360008301526200242781620023e5565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b600062002453826200242e565b91506bffffffffffffffffffffffff820362002474576200247362001e68565b5b600182019050919050565b7f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60008201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000602082015250565b6000620024dd60388362001d4d565b9150620024ea826200247f565b604082019050919050565b600060208201905081810360008301526200251081620024ce565b9050919050565b7f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260008201527f657373206d757374206265206164647265737328302900000000000000000000602082015250565b60006200257560368362001d4d565b9150620025828262002517565b604082019050919050565b60006020820190508181036000830152620025a88162002566565b9050919050565b600081905092915050565b6000620025c78262002181565b620025d38185620025af565b9350620025e58185602086016200219d565b80840191505092915050565b6000620025ff8284620025ba565b915081905092915050565b600060408201905062002621600083018562002170565b8181036020830152620026358184620021da565b90509392505050565b6000819050919050565b62002653816200263e565b82525050565b600060208201905062002670600083018462002648565b92915050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360008201527f74696f6e207468617420646f65736e2774206578697374000000000000000000602082015250565b6000620026d460378362001d4d565b9150620026e18262002676565b604082019050919050565b600060208201905081810360008301526200270781620026c5565b9050919050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560008201527f7461626c652066756e6374696f6e000000000000000000000000000000000000602082015250565b60006200276c602e8362001d4d565b915062002779826200270e565b604082019050919050565b600060208201905081810360008301526200279f816200275d565b9050919050565b6000620027b38262001e97565b9150620027c08362001e97565b9250828203905081811115620027db57620027da62001e68565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b6000620028288262002810565b62002834818562001d4d565b9350620028468185602086016200219d565b6200285181620021c9565b840191505092915050565b600060208201905081810360008301526200287881846200281b565b905092915050565b61257080620028906000396000f3fe60806040523661000b57005b600061001561014a565b9050600081600101600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011b906119be565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610145573d6000f35b3d6000fd5b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b600061018161014a565b9050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020d90611a2a565b60405180910390fd5b818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61026681610498565b50565b60005b835181101561044d57600084828151811061028a57610289611a4a565b5b6020026020010151602001519050600060028111156102ac576102ab611a79565b5b8160028111156102bf576102be611a79565b5b0361030f5761030a8583815181106102da576102d9611a4a565b5b6020026020010151600001518684815181106102f9576102f8611a4a565b5b602002602001015160400151610755565b610439565b6001600281111561032357610322611a79565b5b81600281111561033657610335611a79565b5b036103865761038185838151811061035157610350611a4a565b5b6020026020010151600001518684815181106103705761036f611a4a565b5b6020026020010151604001516109cc565b610438565b60028081111561039957610398611a79565b5b8160028111156103ac576103ab611a79565b5b036103fc576103f78583815181106103c7576103c6611a4a565b5b6020026020010151600001518684815181106103e6576103e5611a4a565b5b602002602001015160400151610c4d565b610437565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042e90611b1a565b60405180910390fd5b5b5b50808061044590611b73565b91505061026c565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161048193929190611edf565b60405180910390a16104938282610dd8565b505050565b60006104a261057c565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061051d6000801b846105a9565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b60006105b361057c565b90506105bf8383610efa565b6106f05761064e828260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206001016106f590919063ffffffff16565b503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc1ddb807f72f9e732ef6f32805c68a3b77ca377c0e141fe3bcaf19fe667f3534866040516106e79190611f3d565b60405180910390a45b505050565b600061071d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610f9b565b905092915050565b600061074d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611002565b905092915050565b6000815111610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079090611fca565b60405180910390fd5b60006107a361014a565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b9061205c565b60405180910390fd5b60008160020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603610881576108808285611025565b5b60005b83518110156109c55760008482815181106108a2576108a1611a4a565b5b602002602001015190506000846001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d906120ee565b60405180910390fd5b6109a28583868a611100565b83806109ad90612126565b945050505080806109bd90611b73565b915050610884565b5050505050565b6000815111610a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0790611fca565b60405180910390fd5b6000610a1a61014a565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a829061205c565b60405180910390fd5b60008160020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603610af857610af78285611025565b5b60005b8351811015610c46576000848281518110610b1957610b18611a4a565b5b602002602001015190506000846001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c03906121cc565b60405180910390fd5b610c178582846112ad565b610c238583868a611100565b8380610c2e90612126565b94505050508080610c3e90611b73565b915050610afb565b5050505050565b6000815111610c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8890611fca565b60405180910390fd5b6000610c9b61014a565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d039061225e565b60405180910390fd5b60005b8251811015610dd2576000838281518110610d2d57610d2c611a4a565b5b602002602001015190506000836001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610dbd8482846112ad565b50508080610dca90611b73565b915050610d0f565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160315610ef657610e2f826040518060600160405280602881526020016124ef6028913961190f565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610e5791906122ba565b600060405180830381855af49150503d8060008114610e92576040519150601f19603f3d011682016040523d82523d6000602084013e610e97565b606091505b509150915081610ef357600081511115610eb45780518082602001fd5b83836040517f192105d7000000000000000000000000000000000000000000000000000000008152600401610eea9291906122d1565b60405180910390fd5b50505b5050565b600080610f0561057c565b9050610f92838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010161072590919063ffffffff16565b91505092915050565b6000610fa78383611002565b610ffc5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b611047816040518060600160405280602481526020016125176024913961190f565b81600301805490508260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600301819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846001016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846001016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361131c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131390612373565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138190612405565b60405180910390fd5b6000836001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506114619190612425565b90508082146115f55760008560020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481106114c2576114c1611a4a565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001848154811061153e5761153d611a4a565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548061164957611648612459565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008103611908576000600186600301805490506117339190612425565b905060008660020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461187457600087600301838154811061179d5761179c611a4a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808860030183815481106117e1576117e0611a4a565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660030180548061188857611887612459565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b905060008111829061195b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195291906124cc565b60405180910390fd5b50505050565b600082825260208201905092915050565b7f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374600082015250565b60006119a8602083611961565b91506119b382611972565b602082019050919050565b600060208201905081810360008301526119d78161199b565b9050919050565b7f416c726561647920696e697469616c697a656421000000000000000000000000600082015250565b6000611a14601483611961565b9150611a1f826119de565b602082019050919050565b60006020820190508181036000830152611a4381611a07565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560008201527f74416374696f6e00000000000000000000000000000000000000000000000000602082015250565b6000611b04602783611961565b9150611b0f82611aa8565b604082019050919050565b60006020820190508181036000830152611b3381611af7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000611b7e82611b69565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bb057611baf611b3a565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c1282611be7565b9050919050565b611c2281611c07565b82525050565b60038110611c3957611c38611a79565b5b50565b6000819050611c4a82611c28565b919050565b6000611c5a82611c3c565b9050919050565b611c6a81611c4f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611cd181611c9c565b82525050565b6000611ce38383611cc8565b60208301905092915050565b6000602082019050919050565b6000611d0782611c70565b611d118185611c7b565b9350611d1c83611c8c565b8060005b83811015611d4d578151611d348882611cd7565b9750611d3f83611cef565b925050600181019050611d20565b5085935050505092915050565b6000606083016000830151611d726000860182611c19565b506020830151611d856020860182611c61565b5060408301518482036040860152611d9d8282611cfc565b9150508091505092915050565b6000611db68383611d5a565b905092915050565b6000602082019050919050565b6000611dd682611bbb565b611de08185611bc6565b935083602082028501611df285611bd7565b8060005b85811015611e2e5784840389528151611e0f8582611daa565b9450611e1a83611dbe565b925060208a01995050600181019050611df6565b50829750879550505050505092915050565b611e4981611c07565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e89578082015181840152602081019050611e6e565b60008484015250505050565b6000601f19601f8301169050919050565b6000611eb182611e4f565b611ebb8185611e5a565b9350611ecb818560208601611e6b565b611ed481611e95565b840191505092915050565b60006060820190508181036000830152611ef98186611dcb565b9050611f086020830185611e40565b8181036040830152611f1a8184611ea6565b9050949350505050565b6000819050919050565b611f3781611f24565b82525050565b6000602082019050611f526000830184611f2e565b92915050565b7f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660008201527f6163657420746f20637574000000000000000000000000000000000000000000602082015250565b6000611fb4602b83611961565b9150611fbf82611f58565b604082019050919050565b60006020820190508181036000830152611fe381611fa7565b9050919050565b7f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260008201527f6520616464726573732830290000000000000000000000000000000000000000602082015250565b6000612046602c83611961565b915061205182611fea565b604082019050919050565b6000602082019050818103600083015261207581612039565b9050919050565b7f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60008201527f6e207468617420616c7265616479206578697374730000000000000000000000602082015250565b60006120d8603583611961565b91506120e38261207c565b604082019050919050565b60006020820190508181036000830152612107816120cb565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b60006121318261210e565b91506bffffffffffffffffffffffff820361214f5761214e611b3a565b5b600182019050919050565b7f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60008201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000602082015250565b60006121b6603883611961565b91506121c18261215a565b604082019050919050565b600060208201905081810360008301526121e5816121a9565b9050919050565b7f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260008201527f657373206d757374206265206164647265737328302900000000000000000000602082015250565b6000612248603683611961565b9150612253826121ec565b604082019050919050565b600060208201905081810360008301526122778161223b565b9050919050565b600081905092915050565b600061229482611e4f565b61229e818561227e565b93506122ae818560208601611e6b565b80840191505092915050565b60006122c68284612289565b915081905092915050565b60006040820190506122e66000830185611e40565b81810360208301526122f88184611ea6565b90509392505050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360008201527f74696f6e207468617420646f65736e2774206578697374000000000000000000602082015250565b600061235d603783611961565b915061236882612301565b604082019050919050565b6000602082019050818103600083015261238c81612350565b9050919050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560008201527f7461626c652066756e6374696f6e000000000000000000000000000000000000602082015250565b60006123ef602e83611961565b91506123fa82612393565b604082019050919050565b6000602082019050818103600083015261241e816123e2565b9050919050565b600061243082611b69565b915061243b83611b69565b925082820390508181111561245357612452611b3a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600061249e82612488565b6124a88185611961565b93506124b8818560208601611e6b565b6124c181611e95565b840191505092915050565b600060208201905081810360008301526124e68184612493565b90509291505056fe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122070fbd06feff1b7a70998a1d6e378d8024f260233de4e3d33541526982e33ada164736f6c634300081100334c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}