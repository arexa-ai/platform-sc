{
  "language": "Solidity",
  "sources": {
    "contracts/_dummy/ArexaDiamondDummyImplementation.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * This is a generated dummy diamond implementation for compatibility with\n * etherscan. For full contract implementation, check out the diamond on https://louper.dev\n */\n\ncontract ArexaDiamondDummyImplementation {\n\n\n    struct Tuple6871229 {\n        address facetAddress;\n        uint8 action;\n        bytes4[] functionSelectors;\n    }\n\n    struct Tuple1236461 {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n    \n\n   function diamondCut(Tuple6871229[] memory _diamondCut, address  _init, bytes memory _calldata) external {}\n\n   function facetAddress(bytes4  _functionSelector) external view returns (address  facetAddress_) {}\n\n   function facetAddresses() external view returns (address[] memory facetAddresses_) {}\n\n   function facetFunctionSelectors(address  _facet) external view returns (bytes4[] memory facetFunctionSelectors_) {}\n\n   function facets() external view returns (Tuple1236461[] memory facets_) {}\n\n   function supportsInterface(bytes4  _interfaceId) external view returns (bool ) {}\n\n   function implementation() external view returns (address ) {}\n\n   function setDummyImplementation(address  _implementation) external {}\n\n   function owner() external view returns (address ) {}\n\n   function transferOwnership(address  newOwner) external {}\n\n   function PAUSABLE_AREXA_TOKEN() external view returns (bytes32 ) {}\n\n   function PAUSABLE_FULL() external view returns (bytes32 ) {}\n\n   function PAUSABLE_MAGIC_TOKEN() external view returns (bytes32 ) {}\n\n   function PAUSABLE_SUBSCR1_TOKEN() external view returns (bytes32 ) {}\n\n   function PAUSABLE_SUBSCR2_TOKEN() external view returns (bytes32 ) {}\n\n   function PAUSABLE_TRADER_TOKEN() external view returns (bytes32 ) {}\n\n   function pause(bytes32  target) external {}\n\n   function pauseAllToken() external {}\n\n   function pauseToken(uint256  tokenId) external {}\n\n   function paused(bytes32  target) external view returns (bool ) {}\n\n   function unpause(bytes32  target) external {}\n\n   function unpauseAllToken() external {}\n\n   function unpauseToken(uint256  tokenId) external {}\n\n   function AREXA_ADMIN_ROLE() external view returns (bytes32 ) {}\n\n   function getRoleAdmin(bytes32  role) external view returns (bytes32 ) {}\n\n   function grantRole(bytes32  role, address  account) external {}\n\n   function hasRole(bytes32  role, address  account) external view returns (bool ) {}\n\n   function renounceRole(bytes32  role) external {}\n\n   function revokeRole(bytes32  role, address  account) external {}\n\n   function setRoleAdmin(bytes32  role, bytes32  adminRole) external {}\n\n   function getArexaERC20Token() external view returns (address ) {}\n\n   function getPayingToken() external view returns (address ) {}\n\n   function setPayingToken(address  token) external {}\n\n   function MAGIC100_FIRST_BUYER() external view returns (bytes32 ) {}\n\n   function getAccountBlackWhiteList(bytes32  target, address  account) external view returns (bool ) {}\n\n   function getMagic100FirstBuyerWL(address  account) external view returns (bool ) {}\n\n   function setAccountBlackWhiteList(bytes32  target, address  account, bool  lockValue) external {}\n\n   function setBatchMagic100FirstBuyerWL(address[] memory addresses, bool  lockValue) external {}\n\n   function setMagic100FirstBuyerWL(address  account, bool  lockValue) external {}\n\n   function AMOUNT_VALUE_TYPE() external view returns (uint8 ) {}\n\n   function AREXA_TOKEN_ID() external view returns (uint256 ) {}\n\n   function AREXA_TOKEN_POOL_AREXAINC() external view returns (uint8 ) {}\n\n   function AREXA_TOKEN_POOL_DEVELOPMENT() external view returns (uint8 ) {}\n\n   function AREXA_TOKEN_POOL_INVESTOR() external view returns (uint8 ) {}\n\n   function AREXA_TOKEN_POOL_MARKETING() external view returns (uint8 ) {}\n\n   function AREXA_TOKEN_POOL_RESERVED() external view returns (uint8 ) {}\n\n   function MAGIC_TOKEN_ID() external view returns (uint256 ) {}\n\n   function QUANTITY_VALUE_TYPE() external view returns (uint8 ) {}\n\n   function SUBSCR1_TOKEN_TYPE() external view returns (uint256 ) {}\n\n   function SUBSCR2_TOKEN_TYPE() external view returns (uint256 ) {}\n\n   function TRADER_TOKEN_ID() external view returns (uint256 ) {}\n\n   function buyArexaToken(uint128  value, uint8  valueType) external {}\n\n   function buyEdgeSubscription(uint32  quantity) external {}\n\n   function buyMagic100Token() external {}\n\n   function buyOracleSubscription(uint32  quantity) external {}\n\n   function buySubscription(uint256  tokenId, uint32  quantity) external {}\n\n   function buyTraderToken(uint128  value, uint8  valueType) external {}\n\n   function calcSubscriptionPrice(uint256  tokenId, uint32  quantity) external view returns (uint256 ) {}\n\n   function getCurrentSubscriptionTokenId(uint256  tokenType) external view returns (uint256 ) {}\n\n   function buyArexaTokenAdmin(address  toAccount, uint128  value, uint8  valueType, uint16  discountPercent) external {}\n\n   function buyEdgeSubscriptionAdmin(address  toAccount, uint32  quantity, uint16  discountPercent) external {}\n\n   function buyMagic100TokenAdmin(address  toAccount, uint16  discountPercent) external {}\n\n   function buyOracleSubscriptionAdmin(address  toAccount, uint32  quantity, uint16  discountPercent) external {}\n\n   function buySubscriptionAdmin(address  toAccount, uint256  tokenId, uint32  quantity, uint16  discountPercent) external {}\n\n   function buyTraderTokenAdmin(address  toAccount, uint128  value, uint8  valueType, uint16  discountPercent) external {}\n\n   function createSubscription(uint256  tokenType, uint16  year, uint8  month, uint256  quantity, uint256  min, uint256  max) external returns (uint256  tokenId) {}\n\n   function getArexaTokenPool(uint8  tokenType) external view returns (uint256  total, uint256  sold) {}\n\n   function payArexaTokenFromPool(uint8  poolType, address  account, uint32  quantity) external {}\n\n   function calcDivident(address  account) external view returns (int256 ) {}\n\n   function getArexaIncomeParameter(uint256  tokenId) external view returns (uint32  pool, uint32  arexa) {}\n\n   function getInventory() external view returns (bool  isEnabled, int256  sumQuantity, int256  sumAmount, int256  sumPnl) {}\n\n   function getInventoryItem(address  account) external view returns (int256  quantity, int256  deltaPnl, int256  payedPnl) {}\n\n   function getPoolAndArexaIncomeBalances() external view returns (uint256  pool, uint256  poolPaidOut, uint256  arexa, uint256  arexaPaidOut) {}\n\n   function payoutArexaDivident(address  toAccount, uint256  value) external {}\n\n   function payoutArexaIncome(address  toAccount, uint256  value) external {}\n\n   function payoutDivident(uint256  value) external {}\n\n   function setArexaIncomeParameter(uint256  tokenId, uint32  pool, uint32  arexa) external {}\n\n   function calcUnrestrictedAmount(address  account, uint256  tokenId, uint256  amount) external view returns (uint256 ) {}\n\n   function checkRestriction(address  account, uint256  tokenId, uint256  amount) external view returns (bool ) {}\n\n   function checkRestrictions(address  account, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool ) {}\n\n   function stakeArexaToken(uint256  quantity) external {}\n\n   function withdrawArexaToken(address  fromAccount, address  toAccount, uint256  quantity) external {}\n\n   function balanceOf(address  owner_, uint256  id) external view returns (uint256 ) {}\n\n   function balanceOfBatch(address[] memory owners, uint256[] memory ids) external view returns (uint256[] memory) {}\n\n   function isApprovedForAll(address  owner_, address  operator) external view returns (bool ) {}\n\n   function name() external view returns (string memory) {}\n\n   function safeBatchTransferFrom(address  from, address  to, uint256[] memory ids, uint256[] memory values, bytes memory data) external {}\n\n   function safeTransferFrom(address  from, address  to, uint256  id, uint256  value, bytes memory data) external {}\n\n   function setApprovalForAll(address  operator, bool  approved) external {}\n\n   function symbol() external view returns (string memory) {}\n\n   function allowance(address  owner_, address  operator, uint256  id) external view returns (uint256 ) {}\n\n   function approve(address  operator, uint256  id, uint256  currentValue, uint256  newValue) external {}\n\n   function isOperatorSpendingLimitEnabled(uint256  tokenId) external view returns (bool ) {}\n\n   function setOperatorSpendingLimitEnabled(uint256  tokenId, bool  enabled) external {}\n\n   function accountsByToken(uint256  id) external view returns (address[] memory) {}\n\n   function tokensByAccount(address  account) external view returns (uint256[] memory) {}\n\n   function totalHolders(uint256  id) external view returns (uint256 ) {}\n\n   function totalSupply(uint256  id) external view returns (uint256 ) {}\n\n   function getTokenBaseUri() external view returns (string memory) {}\n\n   function getTokenUri(uint256  id) external view returns (string memory) {}\n\n   function getUri() external view returns (string memory) {}\n\n   function setTokenBaseURI(string memory newuri) external {}\n\n   function setTokenURI(uint256  id, string memory newuri) external {}\n\n   function setURI(string memory newuri) external {}\n\n   function uri(uint256  id) external view returns (string memory) {}\n\n   function onERC1155BatchReceived(address  operator, address  from, uint256[] memory ids, uint256[] memory values, bytes memory data) external returns (bytes4 ) {}\n\n   function onERC1155Received(address  operator, address  from, uint256  id, uint256  value, bytes memory data) external returns (bytes4 ) {}\n}\n"
    }
  },
  "settings": {
    "viaIR": false,
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}