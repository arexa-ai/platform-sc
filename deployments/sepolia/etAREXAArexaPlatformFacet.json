{
  "address": "0xF3388582c2048AC5648f6C68011386aeb271c9Dc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__ERC1155ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__ERC1155ReceiverRejected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__NotOwnerOrApprovedLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__TransferExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibERC1155__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetedPausable__TargetedPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AMOUNT_VALUE_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_AREXAINC",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_DEVELOPMENT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_INVESTOR",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_MARKETING",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AREXA_TOKEN_POOL_RESERVED",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAGIC_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUANTITY_VALUE_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCR1_TOKEN_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCR2_TOKEN_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADER_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "valueType",
          "type": "uint8"
        }
      ],
      "name": "buyArexaToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "buyEdgeSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyMagic100Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "buyOracleSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "buySubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "valueType",
          "type": "uint8"
        }
      ],
      "name": "buyTraderToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "calcSubscriptionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenType",
          "type": "uint256"
        }
      ],
      "name": "getCurrentSubscriptionTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9193a4e206a57f4dbcf7b79136bc72037b50ad8c470dc1c74a9996d7ee5db13",
  "receipt": {
    "to": null,
    "from": "0xe71fFa7CEdB046C409813C86eC5C728c3E62fE03",
    "contractAddress": "0xF3388582c2048AC5648f6C68011386aeb271c9Dc",
    "transactionIndex": 58,
    "gasUsed": "4333203",
    "logsBloom": "0x
    "blockHash": "0x56e449a475b667ab4b9b34aada6aee41f388af62ff875041770486157a9461bc",
    "transactionHash": "0xb9193a4e206a57f4dbcf7b79136bc72037b50ad8c470dc1c74a9996d7ee5db13",
    "logs": [],
    "blockNumber": 5789083,
    "cumulativeGasUsed": "10918475",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "7e4542cc0579cfd89317cc33581837fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__ERC1155ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__ERC1155ReceiverRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__NotOwnerOrApprovedLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibERC1155__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetedPausable__TargetedPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_VALUE_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_AREXAINC\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_DEVELOPMENT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_INVESTOR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_MARKETING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AREXA_TOKEN_POOL_RESERVED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAGIC_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUANTITY_VALUE_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCR1_TOKEN_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCR2_TOKEN_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"valueType\",\"type\":\"uint8\"}],\"name\":\"buyArexaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"buyEdgeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMagic100Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"buyOracleSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"buySubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"valueType\",\"type\":\"uint8\"}],\"name\":\"buyTraderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"calcSubscriptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"getCurrentSubscriptionTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArexaPlatform/ArexaPlatformFacet.sol\":\"ArexaPlatformFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ArexaPlatform/ArexaPlatformFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\n/**\\r\\n * Copyright (C) 2023 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibBlackWhiteList } from \\\"../base/BlackWhiteList/LibBlackWhiteList.sol\\\";\\r\\n\\r\\nimport { LibArexaPlatformShared } from \\\"./Platform/LibArexaPlatformShared.sol\\\";\\r\\nimport { LibArexaPlatformSubscriptions } from \\\"./Platform/LibArexaPlatformSubscriptions.sol\\\";\\r\\nimport { LibArexaPlatformT3 } from \\\"./Platform/LibArexaPlatformT3.sol\\\";\\r\\nimport { LibArexaPlatformT4 } from \\\"./Platform/LibArexaPlatformT4.sol\\\";\\r\\nimport { LibArexaPlatformT5 } from \\\"./Platform/LibArexaPlatformT5.sol\\\";\\r\\n\\r\\nimport { LibERC1155 } from \\\"../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport { CallProtection } from \\\"../base/Shared/ProtectedCall.sol\\\";\\r\\nimport { ModifierRole } from \\\"../base/AccessControl/ModifierRole.sol\\\";\\r\\nimport { ModifierPausable } from \\\"../base/TargetedPausable/ModifierPausable.sol\\\";\\r\\nimport { LibArexaConst } from \\\"./LibArexaConst.sol\\\";\\r\\n\\r\\ncontract ArexaPlatformFacet is CallProtection, ModifierRole, ModifierPausable {\\r\\n\\tconstructor() {}\\r\\n\\r\\n\\tuint256 public constant SUBSCR1_TOKEN_TYPE = LibArexaConst.SUBSCR1_TOKEN_TYPE; //Tier 1, every month\\r\\n\\tuint256 public constant SUBSCR2_TOKEN_TYPE = LibArexaConst.SUBSCR2_TOKEN_TYPE; //Tier 2, every month\\r\\n\\tuint256 public constant TRADER_TOKEN_ID = LibArexaConst.TRADER_TOKEN_ID; //Tier 3, unlimited, always mint\\r\\n\\tuint256 public constant AREXA_TOKEN_ID = LibArexaConst.AREXA_TOKEN_ID; //Tier 4, 100000000 piece\\r\\n\\tuint256 public constant MAGIC_TOKEN_ID = LibArexaConst.MAGIC_TOKEN_ID; //Tier 5, 100 piece\\r\\n\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_INVESTOR = LibArexaConst.AREXA_TOKEN_POOL_INVESTOR;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_AREXAINC = LibArexaConst.AREXA_TOKEN_POOL_AREXAINC;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_MARKETING = LibArexaConst.AREXA_TOKEN_POOL_MARKETING;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_DEVELOPMENT = LibArexaConst.AREXA_TOKEN_POOL_DEVELOPMENT;\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_RESERVED = LibArexaConst.AREXA_TOKEN_POOL_RESERVED;\\r\\n\\r\\n\\tuint8 public constant AMOUNT_VALUE_TYPE = LibArexaPlatformShared.AMOUNT_VALUE_TYPE;\\r\\n\\tuint8 public constant QUANTITY_VALUE_TYPE = LibArexaPlatformShared.QUANTITY_VALUE_TYPE;\\r\\n\\r\\n\\tfunction getCurrentSubscriptionTokenId(uint256 tokenType) external view protectedCall returns (uint256) {\\r\\n\\t\\treturn LibArexaPlatformSubscriptions.getCurrentSubscriptionTokenId(tokenType);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcSubscriptionPrice(uint256 tokenId, uint32 quantity) external view protectedCall returns (uint256) {\\r\\n\\t\\treturn LibArexaPlatformSubscriptions.calcSubscriptionPrice(tokenId, quantity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buySubscription(uint256 tokenId, uint32 quantity) external protectedCall whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier1 Oracle or Tier2 Edge\\r\\n\\t\\t//Price: variable USDT/piece, based on algorithm\\r\\n\\t\\t//Quantity: 1 per account\\r\\n\\t\\t// uint256 balance = LibERC1155.balanceOf(msg.sender, tokenId);\\r\\n\\t\\t// require(balance == 0, \\\"Only 1 token can be bought per account!\\\");\\r\\n\\t\\tLibArexaPlatformSubscriptions.buySubscription(tokenId, msg.sender, quantity, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyOracleSubscription(uint32 quantity) external protectedCall whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier1 Oracle\\r\\n\\t\\t//SUBSCR1_TOKEN_TYPE\\r\\n\\t\\t//Price: variable USDT/piece, based on algorithm\\r\\n\\t\\t//Quantity: 1 per account\\r\\n\\t\\tuint256 tokenId = LibArexaPlatformSubscriptions.getCurrentSubscriptionTokenId(SUBSCR1_TOKEN_TYPE);\\r\\n\\t\\t// uint256 balance = LibERC1155.balanceOf(msg.sender, tokenId);\\r\\n\\t\\t// require(balance == 0, \\\"Only 1 token can be bought per account!\\\");\\r\\n\\t\\tLibArexaPlatformSubscriptions.buySubscription(tokenId, msg.sender, quantity, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyEdgeSubscription(uint32 quantity) external protectedCall whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier2 Edge\\r\\n\\t\\t//SUBSCR2_TOKEN_TYPE\\r\\n\\t\\t//Price: variable USDT/piece, based on algorithm\\r\\n\\t\\t//Quantity: 1 per account\\r\\n\\t\\tuint256 tokenId = LibArexaPlatformSubscriptions.getCurrentSubscriptionTokenId(SUBSCR2_TOKEN_TYPE);\\r\\n\\t\\t// uint256 balance = LibERC1155.balanceOf(msg.sender, tokenId);\\r\\n\\t\\t// require(balance == 1, \\\"Only 1 token can be bought per account!\\\");\\r\\n\\t\\tLibArexaPlatformSubscriptions.buySubscription(tokenId, msg.sender, quantity, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyTraderToken(uint128 value, uint8 valueType) external protectedCall whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier3 Singularity\\r\\n\\t\\t//TRADER_TOKEN\\r\\n\\t\\t//Price: 1.0 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//valueType: 0 is amount, 1 is quantity\\r\\n\\t\\tLibArexaPlatformT3.buyTraderToken(msg.sender, msg.sender, value, valueType, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyArexaToken(uint128 value, uint8 valueType) external protectedCall whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier4\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: 0.1 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//valueType: 0 is amount, 1 is quantity\\r\\n\\t\\tLibArexaPlatformT4.buyArexaToken(msg.sender, value, valueType, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyMagic100Token() external protectedCall whenNotPaused(LibArexaConst.FULL) {\\r\\n\\t\\t//Tier5\\r\\n\\t\\t//MAGIC_TOKEN_ID\\r\\n\\t\\t//Price: 100.0 USDT/piece\\r\\n\\t\\t//Quantity: 1\\r\\n\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tLibBlackWhiteList._getAccountBlackWhiteList(LibArexaConst.MAGIC100_FIRST_BUYER, msg.sender),\\r\\n\\t\\t\\t\\\"Only an approved account can buy the Magic token\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tLibBlackWhiteList._setAccountBlackWhiteList(LibArexaConst.MAGIC100_FIRST_BUYER, msg.sender, false);\\r\\n\\r\\n\\t\\tuint256 balance = LibERC1155.balanceOf(msg.sender, LibArexaConst.MAGIC_TOKEN_ID);\\r\\n\\t\\trequire(balance == 0, \\\"Only 1 Magic token can be bought now!\\\");\\r\\n\\r\\n\\t\\tLibArexaPlatformT5.buyMagic100Token(msg.sender, 0);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x23bb1e11d696974937f07006289e009c862606769b03b0c4f05c057d6a131c8f\",\"license\":\"UNLICENCED\"},\"contracts/ArexaPlatform/LibArexaConst.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\n/**\\r\\n * Copyright (C) 2023 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary LibArexaConst {\\r\\n\\t//\\r\\n\\t//Pausable\\r\\n\\tbytes32 public constant FULL = 0x00;\\r\\n\\tbytes32 public constant SUBSCR1_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.SUBSCR1_TOKEN_TYPE));\\r\\n\\tbytes32 public constant SUBSCR2_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.SUBSCR2_TOKEN_TYPE));\\r\\n\\tbytes32 public constant TRADER_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.TRADER_TOKEN_ID));\\r\\n\\tbytes32 public constant AREXA_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.AREXA_TOKEN_ID));\\r\\n\\tbytes32 public constant MAGIC_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.MAGIC_TOKEN_ID));\\r\\n\\r\\n\\t//Roles\\r\\n\\tbytes32 public constant AREXA_ADMIN_ROLE = keccak256(\\\"AREXA_ADMIN_ROLE\\\");\\r\\n\\t//bytes32 public constant TOKEN_ADMIN_ROLE = keccak256(\\\"AREXA_TOKEN_ADMIN_ROLE\\\");\\r\\n\\t//bytes32 public constant TREASURY_ROLE = keccak256(\\\"AREXA_TREASURY_ROLE\\\");\\r\\n\\r\\n\\t//BlackWhite lists\\r\\n\\tbytes32 public constant MAGIC100_FIRST_BUYER = keccak256(\\\"MAGIC100_FIRST_BUYER\\\"); //WhiteList\\r\\n\\r\\n\\t//TokenIDs:\\r\\n\\tuint256 public constant SUBSCR1_TOKEN_TYPE = 100000000; //Tier 1, every month\\r\\n\\tuint256 public constant SUBSCR2_TOKEN_TYPE = 200000000; //Tier 2, every month\\r\\n\\tuint256 public constant TRADER_TOKEN_ID = 300000000; //Tier 3, unlimited, always mint\\r\\n\\tuint256 public constant AREXA_TOKEN_ID = 400000000; //Tier 4, 100000000 piece\\r\\n\\tuint256 public constant MAGIC_TOKEN_ID = 500000000; //Tier 5, 100 piece\\r\\n\\r\\n\\t//AREXA TOKEN POOL TYPES:\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_INVESTOR = 1; //35M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_AREXAINC = 2; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_MARKETING = 3; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_DEVELOPMENT = 4; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_RESERVED = 5; //50M\\r\\n}\\r\\n\",\"keccak256\":\"0xeedce13c6edc52af9ce86c36b4801a16333d56ea490e6d264c4b02a8d6aa3341\",\"license\":\"UNLICENCED\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformShared.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"../../base/TokenPNL/LibTokenPNL.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformShared {\\r\\n\\tuint8 public constant AMOUNT_VALUE_TYPE = 0;\\r\\n\\tuint8 public constant QUANTITY_VALUE_TYPE = 1;\\r\\n\\r\\n\\tfunction getPayingToken() internal view returns (IERC20) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.payingERC20Token;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaERC20Token() internal view returns (IERC20) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.arexaERC20Token;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaTokenPool(uint8 _tokenPool) internal view returns (uint256 total_, uint256 sold_) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\ttotal_ = arexa.arexaTokenPool[_tokenPool].total;\\r\\n\\t\\tsold_ = arexa.arexaTokenPool[_tokenPool].sold;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaIncomeParameter(uint256 _tokenId) internal view returns (uint32 pool_, uint32 arexa_) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\tpool_ = arexa.arexaIncomeParameter[_tokenId].pool;\\r\\n\\t\\tarexa_ = arexa.arexaIncomeParameter[_tokenId].arexa;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _divideAmountPoolAndArexa(uint256 _tokenId, uint256 _value) internal {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 poolAmount = (_value * arexa.arexaIncomeParameter[_tokenId].pool) /\\r\\n\\t\\t\\t(arexa.arexaIncomeParameter[_tokenId].pool + arexa.arexaIncomeParameter[_tokenId].arexa);\\r\\n\\t\\tuint256 arexaAmount = _value - poolAmount;\\r\\n\\r\\n\\t\\tLibTokenPNL.changeTotalValue(address(arexa.payingERC20Token), LibArexaConst.AREXA_TOKEN_ID, int256(poolAmount));\\r\\n\\t\\tarexa.poolBalance += poolAmount;\\r\\n\\t\\tarexa.arexaBalance += arexaAmount;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x202814d0cc08aa441653ad942457982767319a075086b20da203f5f41413ab97\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct ArexaTokenPool {\\r\\n\\tuint256 total;\\r\\n\\tuint256 sold;\\r\\n}\\r\\n\\r\\nstruct ArexaIncomeParameter {\\r\\n\\tuint32 pool;\\r\\n\\tuint32 arexa;\\r\\n}\\r\\n\\r\\nstruct ArexaPlatformStorage {\\r\\n\\tmapping(uint8 => ArexaTokenPool) arexaTokenPool;\\r\\n\\tmapping(uint256 => ArexaIncomeParameter) arexaIncomeParameter;\\r\\n\\tIERC20 payingERC20Token; //USDT\\r\\n\\tuint256 poolBalance; //The \\\"pool\\\" part of the sum income\\r\\n\\tuint256 arexaBalance; //The \\\"owner\\\" part of the sum income\\r\\n\\t//tokenType => lastSubscriptionTokenId\\r\\n\\tmapping(uint256 => uint256) lastSubscriptionTokenIds;\\r\\n\\tIERC20 arexaERC20Token; //AREXA\\r\\n\\tuint256 stakedArexaERC20TokenQuantity;\\r\\n\\tuint256 poolPaidOutBalance; //The \\\"pool\\\" part of the sum outgoing\\r\\n\\tuint256 arexaPaidOutBalance; //The \\\"owner\\\" part of the sum outgoing\\r\\n}\\r\\n\\r\\nlibrary LibArexaPlatformStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.arexa-platform.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ArexaPlatformStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7d2612b5f31a147ff2a53c75d39eebc1dbe2c84afece53e74f2241f13b9abf77\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\nimport \\\"../../base/TokenDynamicPricing/LibTokenDynamicPricing.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\n// import { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n// import { IERC20Metadata } from \\\"../../base/ERC20/metadata/IERC20Metadata.sol\\\";\\r\\n//import \\\"../../base/BridgeCentralized/IBridgeableToken.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformSubscriptions {\\r\\n\\t//\\r\\n\\tfunction createSubscriptions(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\tuint256 _tokenType,\\r\\n\\t\\tuint16 _year,\\r\\n\\t\\tuint8 _month,\\r\\n\\t\\tuint256 _quantity,\\r\\n\\t\\tuint256 _min,\\r\\n\\t\\tuint256 _max\\r\\n\\t) internal returns (uint256 tokenId) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\t//100 000 000 10**8\\r\\n\\t\\t// 20 240 000\\r\\n\\t\\tuint256 monthlyTokenType = _tokenType + uint256(_year) * 10 ** 4 + uint256(_month) * 10 ** 2;\\r\\n\\r\\n\\t\\trequire(int256(arexa.lastSubscriptionTokenIds[_tokenType]) - int256(monthlyTokenType) < 99, \\\"Can't create for old months\\\");\\r\\n\\r\\n\\t\\tif (arexa.lastSubscriptionTokenIds[_tokenType] < monthlyTokenType) {\\r\\n\\t\\t\\tarexa.lastSubscriptionTokenIds[_tokenType] = monthlyTokenType;\\r\\n\\t\\t}\\r\\n\\t\\tarexa.lastSubscriptionTokenIds[_tokenType]++;\\r\\n\\t\\ttokenId = arexa.lastSubscriptionTokenIds[_tokenType];\\r\\n\\t\\tLibTokenDynamicPricing.initialize(tokenId, _quantity, _min, _max);\\r\\n\\t\\tLibERC1155.mint(_operator, LibDiamond.getDiamondAddress(), tokenId, _quantity, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCurrentSubscriptionTokenId(uint256 _tokenType) internal view returns (uint256) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.lastSubscriptionTokenIds[_tokenType];\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcSubscriptionPrice(uint256 _tokenId, uint32 _quantity) internal view returns (uint256) {\\r\\n\\t\\treturn LibTokenDynamicPricing.calcTotalValue(_tokenId, _quantity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buySubscription(uint256 _tokenId, address _account, uint32 _quantity, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier1 or Tier2\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: X USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 amount = LibTokenDynamicPricing.buyQuantity(_tokenId, _quantity);\\r\\n\\r\\n\\t\\tamount = (((amount * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\t//Transfer \\\"payingERC20Token\\\" from \\\"_account\\\" account to \\\"contractAddress\\\" account\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa\\r\\n\\t\\t//SUBSCR1_TOKEN_TYPE OR SUBSCR2_TOKEN_TYPE lesz a v\\u00e9ge\\r\\n\\t\\tuint256 tokenType = (_tokenId / 100000000) * 100000000;\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(tokenType, amount);\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, _tokenId, _quantity, \\\"\\\");\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2d35d0777e688858508080704734fd7d8f3dfc0f1061acf478ab645b922e88\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\n// import \\\"../../utils/Math.sol\\\";\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nimport { IERC20Metadata } from \\\"../../base/ERC20/metadata/IERC20Metadata.sol\\\";\\r\\n// import \\\"../../base/BridgeCentralized/IBridgeableToken.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformT3 {\\r\\n\\tfunction buyTraderToken(address _operator, address _account, uint128 _value, uint8 _valueType, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier3\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: 1.0 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//_valueType: 0 is amount, 1 is quantity\\r\\n\\t\\trequire(_valueType == 0 || _valueType == 1, \\\"valueType can be 0 or 1 only!\\\");\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 decimal = 10 ** IERC20Metadata(address(arexa.payingERC20Token)).decimals();\\r\\n\\t\\tuint256 priceFactor = 10;\\r\\n\\t\\tuint256 price = decimal * priceFactor * 1;\\r\\n\\r\\n\\t\\tuint256 amount = 0;\\r\\n\\t\\tuint256 quantity = 0;\\r\\n\\t\\tif (_valueType == 1) {\\r\\n\\t\\t\\tamount = ((_value * 10 * price) / priceFactor + 5) / 10; //add 5 and div 10: rounding to the nearest\\r\\n\\t\\t\\tquantity = (amount * priceFactor) / price;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input quantity is too small for paying token!\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tquantity = (_value * priceFactor) / price;\\r\\n\\t\\t\\tamount = (quantity * price) / priceFactor;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input amount is too small for buying a token!\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tamount = (((amount * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa, fontos a sorrend, miel\\u0151tt megkapta a tokent \\u00e9s adminisztr\\u00e1ltuk a PNL v\\u00e1ltoz\\u00e1st, el\\u0151tte n\\u00f6velj\\u00fck a pool \\u00e9rt\\u00e9ket\\r\\n\\t\\t//az\\u00e9rt mert \\u00edgy a deltaPNLben nem napja meg maga ut\\u00e1n j\\u00e1r\\u00f3 r\\u00e9szt.\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(LibArexaConst.TRADER_TOKEN_ID, amount);\\r\\n\\r\\n\\t\\tLibERC1155.mint(_operator, _account, LibArexaConst.TRADER_TOKEN_ID, quantity, \\\"\\\");\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x6121fe59d15590afedf2425a948ee6ed409ae6fadc7007606a9efc36c52c3e20\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport { IERC20Metadata } from \\\"../../base/ERC20/metadata/IERC20Metadata.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformT4 {\\r\\n\\tfunction buyArexaToken(address _account, uint128 _value, uint8 _valueType, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier4\\r\\n\\t\\t//AREXA_TOKEN\\r\\n\\t\\t//Price: 0.1 USDT/piece\\r\\n\\t\\t//Quantity: No limit to buy\\r\\n\\t\\t//_valueType: 0 is amount, 1 is quantity\\r\\n\\r\\n\\t\\trequire(_valueType == 0 || _valueType == 1, \\\"valueType can be 0 or 1 only!\\\");\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 decimal = 10 ** IERC20Metadata(address(arexa.payingERC20Token)).decimals();\\r\\n\\t\\tuint256 priceFactor = 10;\\r\\n\\t\\tuint256 price = ((decimal * priceFactor) * 1) / 10;\\r\\n\\r\\n\\t\\tuint256 amount = 0;\\r\\n\\t\\tuint256 quantity = 0;\\r\\n\\t\\tif (_valueType == 1) {\\r\\n\\t\\t\\tamount = ((_value * 10 * price) / priceFactor + 5) / 10; //add 5 and div 10: rounding to the nearest\\r\\n\\t\\t\\tquantity = (amount * priceFactor) / price;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input quantity is too small for paying token\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tquantity = (_value * priceFactor) / price;\\r\\n\\t\\t\\tamount = (quantity * price) / priceFactor;\\r\\n\\t\\t\\trequire(amount > 0 && quantity > 0, \\\"The input amount is too small for buying a token\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tamount = (((amount * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\tArexaTokenPool storage tokenPool = arexa.arexaTokenPool[LibArexaConst.AREXA_TOKEN_POOL_INVESTOR];\\r\\n\\t\\trequire(tokenPool.sold + quantity <= tokenPool.total, \\\"Not enough token to sell\\\");\\r\\n\\t\\ttokenPool.sold = tokenPool.sold + quantity;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa, fontos a sorrend, miel\\u0151tt megkapta a tokent \\u00e9s adminisztr\\u00e1ltuk a PNL v\\u00e1ltoz\\u00e1st, el\\u0151tte n\\u00f6velj\\u00fck a pool \\u00e9rt\\u00e9ket\\r\\n\\t\\t//az\\u00e9rt mert \\u00edgy a deltaPNLben nem napja meg maga ut\\u00e1n j\\u00e1r\\u00f3 r\\u00e9szt.\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(LibArexaConst.AREXA_TOKEN_ID, amount);\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, LibArexaConst.AREXA_TOKEN_ID, quantity, \\\"\\\");\\r\\n\\t\\tarexa.stakedArexaERC20TokenQuantity = arexa.stakedArexaERC20TokenQuantity + quantity;\\r\\n\\t}\\r\\n\\r\\n\\tfunction payByArexaToken(uint8 _poolType, address _account, uint32 _quantity) internal {\\r\\n\\t\\t//Tier4\\r\\n\\t\\t//AREXA_TOKEN GIFT\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tArexaTokenPool storage tokenPool = arexa.arexaTokenPool[_poolType];\\r\\n\\t\\trequire(tokenPool.sold + _quantity <= tokenPool.total, \\\"Not enoguh token to gift\\\");\\r\\n\\t\\ttokenPool.sold = tokenPool.sold + _quantity;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, LibArexaConst.AREXA_TOKEN_ID, _quantity, \\\"\\\");\\r\\n\\t\\tarexa.stakedArexaERC20TokenQuantity = arexa.stakedArexaERC20TokenQuantity + _quantity;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x45fcf5b3ed0ee02489065a4f8f535bfd58319c01f3a03bbda6785371ff0774d0\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\n// import \\\"../../utils/Math.sol\\\";\\r\\nimport \\\"../../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../../base/Diamond/LibDiamond.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n// import \\\"../../base/TokenRestriction/LibTokenRestriction.sol\\\";\\r\\n// import \\\"../../base/TokenPNL/LibTokenPNL.sol\\\";\\r\\n// import \\\"../../base/TokenDynamicPricing/LibTokenDynamicPricing.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\n//import { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"../../base/ERC20/metadata/IERC20Metadata.sol\\\";\\r\\nimport \\\"../../base/BridgeCentralized/IBridgeableToken.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformT5 {\\r\\n\\tfunction buyMagic100Token(address _account, uint16 _discountPercent) internal {\\r\\n\\t\\t//Tier5\\r\\n\\t\\t//MAGIC_TOKEN_ID\\r\\n\\t\\t//Price: 100.0 USDT/piece\\r\\n\\t\\t//Quantity: 1\\r\\n\\r\\n\\t\\trequire(_discountPercent <= 10000, \\\"Discount percent cannot be more then 100,00%\\\");\\r\\n\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 decimal = 10 ** IERC20Metadata(address(arexa.payingERC20Token)).decimals();\\r\\n\\t\\tuint256 amount = (((100 * decimal * (10000 - _discountPercent) * 10) / 10000) + 5) / 10;\\r\\n\\r\\n\\t\\taddress contractAddress = LibDiamond.getDiamondAddress();\\r\\n\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\tSafeERC20.safeTransferFrom(arexa.payingERC20Token, _account, contractAddress, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tLibERC1155.safeTransfer(contractAddress, contractAddress, _account, LibArexaConst.MAGIC_TOKEN_ID, 1, \\\"\\\");\\r\\n\\r\\n\\t\\t//divide the amount to pool and arexa, fontos a sorrend, miut\\u00e1n megkapta a tokent \\u00e9s adminisztr\\u00e1ltuk a PNL v\\u00e1ltoz\\u00e1st, ut\\u00e1na n\\u00f6velj\\u00fck a pool \\u00e9rt\\u00e9ket csak!\\r\\n\\t\\tLibArexaPlatformShared._divideAmountPoolAndArexa(LibArexaConst.MAGIC_TOKEN_ID, amount);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xa42495614f3fc39f6b925f465c4ceb0785c3f92f70136cd656fca6167af65ea8\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibAccessControlStorage.sol\\\";\\r\\n\\r\\nimport { IERC173 } from \\\"../../interfaces/IERC173.sol\\\";\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { UintUtils } from \\\"../../utils/UintUtils.sol\\\";\\r\\nimport { AddressUtils } from \\\"../../utils/AddressUtils.sol\\\";\\r\\n\\r\\nlibrary LibAccessControl {\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing UintUtils for uint256;\\r\\n\\tusing AddressUtils for address;\\r\\n\\r\\n\\terror Ownable__NotOwner();\\r\\n\\terror Ownable__NotTransitiveOwner();\\r\\n\\r\\n\\terror AccessDenied(bytes32 role, address account);\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\tevent RoleAdminChanged(address indexed owner, bytes32 role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\tevent RoleRevoked(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\r\\n\\tbytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n\\tfunction _setOwner(address _newOwner) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\taddress previousOwner = acls.owner;\\r\\n\\t\\tacls.owner = _newOwner;\\r\\n\\r\\n\\t\\t//Init DEFAULT_ADMIN_ROLE to _newOwner\\r\\n\\t\\tLibAccessControl._grantRole(LibAccessControl.DEFAULT_ADMIN_ROLE, _newOwner);\\r\\n\\r\\n\\t\\temit OwnershipTransferred(previousOwner, _newOwner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _owner() internal view returns (address owner_) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\towner_ = acls.owner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transitiveOwner() internal view returns (address owner_) {\\r\\n\\t\\towner_ = LibAccessControl._owner();\\r\\n\\r\\n\\t\\twhile (owner_.isContract()) {\\r\\n\\t\\t\\ttry IERC173(owner_).owner() returns (address transitiveOwner) {\\r\\n\\t\\t\\t\\towner_ = transitiveOwner;\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _owner(), \\\"Not owner!\\\");\\r\\n\\t\\tif (msg.sender != _owner()) {\\r\\n\\t\\t\\trevert Ownable__NotOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsTransitiveOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _transitiveOwner(), \\\"Not transitive owner!\\\");\\r\\n\\t\\tif (msg.sender != _transitiveOwner()) {\\r\\n\\t\\t\\trevert Ownable__NotTransitiveOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice assign role to given account\\r\\n\\t * @param _role role to assign\\r\\n\\t * @param _account recipient of role assignment\\r\\n\\t */\\r\\n\\tfunction _grantRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\tacls.roles[acls.owner][_role].members.add(_account);\\r\\n\\t\\t\\temit RoleGranted(acls.owner, _role, _account, msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice unassign role from given account\\r\\n\\t * @param _role role to unassign\\r\\n\\t * @param _account account to revokeAccessControlStorage\\r\\n\\t */\\r\\n\\tfunction _revokeRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\t// require(_role != LibAccessControl.DEFAULT_ADMIN_ROLE && _account != acls.owner);\\r\\n\\t\\tacls.roles[acls.owner][_role].members.remove(_account);\\r\\n\\t\\temit RoleRevoked(acls.owner, _role, _account, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice relinquish role\\r\\n\\t * @param _role role to relinquish\\r\\n\\t */\\r\\n\\tfunction _renounceRole(bytes32 _role) internal {\\r\\n\\t\\t_revokeRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query one of the accounts that have role of the project\\r\\n\\t * @dev WARNING: When using _getProjectRoleMember and _getProjectRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _index index of role member\\r\\n\\t */\\r\\n\\tfunction _getRoleMember(bytes32 _role, uint256 _index) internal view returns (address) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.at(_index);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query the number of accounts that have role.\\r\\n\\t * @dev WARNING: When using _getRoleMember and _getRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _getRoleMemberCount(address, bytes32 _role) internal view returns (uint256) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query whether role is assigned to account\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account account to query\\r\\n\\t * @return bool whether role is assigned to account\\r\\n\\t */\\r\\n\\tfunction _hasRole(bytes32 _role, address _account) internal view returns (bool) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.contains(_account);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if sender does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role) internal view {\\r\\n\\t\\t_checkRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if given account does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role, address _account) internal view {\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\trevert AccessDenied({ role: _role, account: _account });\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query admin role for given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @return admin role\\r\\n\\t */\\r\\n\\tfunction _getRoleAdmin(bytes32 _role) internal view returns (bytes32) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].adminRole;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set role as admin role\\r\\n\\t * @param _role role to set\\r\\n\\t * @param _adminRole admin role to set\\r\\n\\t */\\r\\n\\tfunction _setRoleAdmin(bytes32 _role, bytes32 _adminRole) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tbytes32 previousAdminRole = _getRoleAdmin(_role);\\r\\n\\t\\tacls.roles[acls.owner][_role].adminRole = _adminRole;\\r\\n\\t\\temit RoleAdminChanged(acls.owner, _role, previousAdminRole, _adminRole);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2c0da263bd49a5c7a6d1a9d8866bbe5936b43f3ee39bf2c9dc4600d7045b49e9\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport \\\"./RoleData.sol\\\";\\r\\n\\r\\nstruct AccessControllStorage {\\r\\n\\t//owner => role => adminRole, members mapping\\r\\n\\taddress owner;\\r\\n\\tmapping(address => mapping(bytes32 => RoleData)) roles;\\r\\n}\\r\\n\\r\\nlibrary LibAccessControlStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.access-control.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (AccessControllStorage storage acls_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tacls_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ae5597ade94391b4f367368b5e6f5b4d15dce1e430e217ee5e549a652c8eb8b\",\"license\":\"MIT\"},\"contracts/base/AccessControl/ModifierRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibAccessControl } from \\\"./LibAccessControl.sol\\\";\\r\\n\\r\\nabstract contract ModifierRole {\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyTransitiveOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsTransitiveOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRole(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(role);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRoleAdmin(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(LibAccessControl._getRoleAdmin(role));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9a5f770772e3b447a47bbcacd0afe131c78c98bc87219da9e3dfe10a261ad64e\",\"license\":\"MIT\"},\"contracts/base/AccessControl/RoleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RoleData {\\r\\n\\tbytes32 adminRole;\\r\\n\\tEnumerableSet.AddressSet members;\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d7eaf459b09f21c482e9b9df5b5c99572095e79174de3621f5ec9e32413ac7\",\"license\":\"MIT\"},\"contracts/base/BlackWhiteList/LibBlackWhiteList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibBlackWhiteListStorage.sol\\\";\\r\\n\\r\\nlibrary LibBlackWhiteList {\\r\\n\\t//_target: which list is belongs to...\\r\\n\\t//_account: an account on a _target\\r\\n\\t//_lockValue:\\r\\n\\t//  - if _target is a blackList than true _lockValue means that the account is prohibited\\r\\n\\t//  - if _target is a blackList than false _lockValue means that the account is acceptable\\r\\n\\t//  - if _target is a whiteList than true _lockValue means that the account is acceptable\\r\\n\\t//  - if _target is a whiteList than false _lockValue means that the account is prohibited\\r\\n\\tevent AccountBlackWhiteList(bytes32 indexed _target, address indexed _account, bool _lockValue);\\r\\n\\r\\n\\tfunction _getAccountBlackWhiteList(bytes32 _target, address _account) internal view returns (bool lockValue_) {\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\tlockValue_ = wls.whiteList[_target][_account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setAccountBlackWhiteList(bytes32 _target, address _account, bool _lockValue) internal {\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\twls.whiteList[_target][_account] = _lockValue;\\r\\n\\t\\temit AccountBlackWhiteList(_target, _account, _lockValue);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setBatchAccountBlackWhiteList(bytes32 _target, address[] calldata _accounts, bool _lockValue) internal {\\r\\n\\t\\trequire(_accounts.length <= 255, \\\"Batch: too many addresses\\\");\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\tfor (uint8 i = 0; i < _accounts.length; i++) {\\r\\n\\t\\t\\twls.whiteList[_target][_accounts[i]] = _lockValue;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x6cd8e2018edf787abee860a5b98f6c88f0302b04e8557a2ff0cb1e75e24b8241\",\"license\":\"MIT\"},\"contracts/base/BlackWhiteList/LibBlackWhiteListStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct BlackWhiteListStorage {\\r\\n\\tmapping(bytes32 => mapping(address => bool)) whiteList;\\r\\n}\\r\\n\\r\\nlibrary LibBlackWhiteListStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.white-list.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (BlackWhiteListStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x040e35cfc2497b8eecef40b205079d1b6dfd00a4d1e1724d31e9baa5e7752ee1\",\"license\":\"MIT\"},\"contracts/base/BridgeCentralized/IBridgeableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IBridgeableToken {\\r\\n\\tfunction mint(address to, uint256 amount) external;\\r\\n\\r\\n\\tfunction burnFrom(address from, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x82c931efcb760ff09de25b4b897f71cff783e1fbecee824cf8c92a8bbe6dc69e\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport { IDiamondCut } from \\\"../../interfaces/IDiamondCut.sol\\\";\\n\\nimport { LibAccessControl } from \\\"../AccessControl/LibAccessControl.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tfunction setDiamondAddress(address _diamondAddress) internal {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(ds.diamondAddress == address(0), \\\"Already initialized!\\\");\\n\\t\\tds.diamondAddress = _diamondAddress;\\n\\t}\\n\\n\\tfunction getDiamondAddress() internal view returns (address) {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\treturn ds.diamondAddress;\\n\\t}\\n\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tLibAccessControl._setOwner(_newOwner);\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\tLibAccessControl._enforceIsOwner();\\n\\t}\\n\\n\\t// Internal function version of diamondCut\\n\\tfunction diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n\\t\\t\\tIDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n\\t\\t\\tif (action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\t\\taddFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\t\\treplaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\t\\tremoveFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\t// if function does not exist then do nothing and return\\n\\t\\trequire(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n\\t\\tenforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n\\t\\tds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n\\t\\tds.facetAddresses.push(_facetAddress);\\n\\t}\\n\\n\\tfunction addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n\\t\\tds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n\\t\\tds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n\\t}\\n\\n\\tfunction removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n\\t\\t// an immutable function is a function defined directly in a diamond\\n\\t\\trequire(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n\\t\\t// replace selector with last selector, then delete last selector\\n\\t\\tuint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n\\t\\tuint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n\\t\\t// if not the same then replace _selector with lastSelector\\n\\t\\tif (selectorPosition != lastSelectorPosition) {\\n\\t\\t\\tbytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n\\t\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n\\t\\t\\tds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n\\t\\t}\\n\\t\\t// delete the last selector\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n\\t\\tdelete ds.selectorToFacetAndPosition[_selector];\\n\\n\\t\\t// if no more selectors for facet address then delete the facet address\\n\\t\\tif (lastSelectorPosition == 0) {\\n\\t\\t\\t// replace facet address with last facet address and delete last facet address\\n\\t\\t\\tuint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n\\t\\t\\tuint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t\\tif (facetAddressPosition != lastFacetAddressPosition) {\\n\\t\\t\\t\\taddress lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n\\t\\t\\t\\tds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n\\t\\t\\t\\tds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n\\t\\t\\t}\\n\\t\\t\\tds.facetAddresses.pop();\\n\\t\\t\\tdelete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tenforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\tif (!success) {\\n\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t// bubble up error\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(error)\\n\\t\\t\\t\\t\\trevert(add(32, error), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert InitializationFunctionReverted(_init, _calldata);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f15f134edd02ce19fb55ce2c33ef634b5766bef24fee8dcc69f53d04bfe5219\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct FacetAddressAndPosition {\\r\\n\\taddress facetAddress;\\r\\n\\tuint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n}\\r\\n\\r\\nstruct FacetFunctionSelectors {\\r\\n\\tbytes4[] functionSelectors;\\r\\n\\tuint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n}\\r\\n\\r\\nstruct DiamondStorage {\\r\\n\\taddress diamondAddress;\\r\\n\\t// maps function selector to the facet address and\\r\\n\\t// the position of the selector in the facetFunctionSelectors.selectors array\\r\\n\\tmapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n\\t// maps facet addresses to function selectors\\r\\n\\tmapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n\\t// facet addresses\\r\\n\\taddress[] facetAddresses;\\r\\n\\t// Used to query if a contract implements an interface.\\r\\n\\t// Used to implement ERC-165.\\r\\n\\tmapping(bytes4 => bool) supportedInterfaces;\\r\\n\\t//the whole diamond is paused or not\\r\\n\\tbool paused;\\r\\n}\\r\\n\\r\\nlibrary LibDiamondStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.diamond.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (DiamondStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x13a60db83059255e32f692e0508aaa9af49568a363e3aae233ae80aab0c75098\",\"license\":\"MIT\"},\"contracts/base/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * https://eips.ethereum.org/EIPS/eip-1155.\\n */\\ninterface IERC1155Receiver {\\n\\t/**\\n\\t * @notice Handle the receipt of a single ERC1155 token type.\\n\\t * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n\\t * This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n\\t * This function MUST revert if it rejects the transfer.\\n\\t * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n\\t * @param _operator The address which initiated the transfer (i.e. msg.sender)\\n\\t * @param _from The address which previously owned the token\\n\\t * @param _id The ID of the token being transferred\\n\\t * @param _value The amount of tokens being transferred\\n\\t * @param _data Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n\\t */\\n\\tfunction onERC1155Received(\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data\\n\\t) external returns (bytes4);\\n\\n\\t/**\\n\\t * @notice Handle the receipt of multiple ERC1155 token types.\\n\\t * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n\\t * This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n\\t * This function MUST revert if it rejects the transfer(s).\\n\\t * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n\\t * @param _operator The address which initiated the batch transfer (i.e. msg.sender)\\n\\t * @param _from The address which previously owned the token\\n\\t * @param _ids An array containing ids of each token being transferred (order and length must match _values array)\\n\\t * @param _values An array containing amounts of each token being transferred (order and length must match _ids array)\\n\\t * @param _data Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n\\t */\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\tuint256[] calldata _ids,\\n\\t\\tuint256[] calldata _values,\\n\\t\\tbytes calldata _data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeba602761fec3810381b28625959f0b9053b66b7b097ea766225784ad49dfef4\",\"license\":\"MIT\"},\"contracts/base/ERC1155/base/LibERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibERC1155Storage.sol\\\";\\r\\n\\r\\nimport \\\"../customization/LibERC1155Customization.sol\\\";\\r\\n\\r\\nimport { AddressUtils } from \\\"../../../utils/AddressUtils.sol\\\";\\r\\nimport { EnumerableSet } from \\\"../../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC1155Receiver } from \\\"../IERC1155Receiver.sol\\\";\\r\\n\\r\\nerror LibERC1155__BalanceQueryZeroAddress(); //Ok\\r\\nerror LibERC1155__ArrayLengthMismatch(); //Ok\\r\\nerror LibERC1155__MintToZeroAddress(); //ok\\r\\nerror LibERC1155__BurnExceedsBalance(); ///Ok\\r\\nerror LibERC1155__BurnFromZeroAddress(); //Ok\\r\\nerror LibERC1155__ERC1155ReceiverRejected(); // OK\\r\\nerror LibERC1155__ERC1155ReceiverNotImplemented(); //ok\\r\\nerror LibERC1155__TransferExceedsBalance(); //Ok\\r\\nerror LibERC1155__TransferToZeroAddress(); //Ok\\r\\nerror LibERC1155__NotOwnerOrApproved(); //Ok\\r\\nerror LibERC1155__NotOwnerOrApprovedLimit(); //Ok\\r\\nerror LibERC1155__SelfApproval(); //OK\\r\\n\\r\\nlibrary LibERC1155 {\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n\\tevent TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\r\\n\\r\\n\\tevent ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n\\tevent URI(string value, uint256 indexed tokenId);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155Allowance\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent Approval(address indexed owner, address indexed operator, uint256 indexed id, uint256 currenctValue, uint256 newValue);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155Paused\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent AllTokenPaused(address indexed account);\\r\\n\\r\\n\\tevent AllTokenUnpaused(address indexed account);\\r\\n\\r\\n\\tevent TokenPaused(address indexed account, uint256 indexed tokenId);\\r\\n\\r\\n\\tevent TokenUnpaused(address indexed account, uint256 indexed tokenId);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * Usings\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tusing AddressUtils for address;\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the balance of given token held by given address\\r\\n\\t * @param _account address to query\\r\\n\\t * @param _tokenId token to query\\r\\n\\t * @return token balance\\r\\n\\t */\\r\\n\\tfunction balanceOf(address _account, uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tif (_account == address(0)) revert LibERC1155__BalanceQueryZeroAddress();\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.balances[_tokenId][_account];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the balance of given token held by the given addresses\\r\\n\\t * @param _accounts addresses to query\\r\\n\\t * @param _tokenIds list of token IDs to query\\r\\n\\t * @return tokens' balance\\r\\n\\t */\\r\\n\\tfunction balanceOfBatch(address[] memory _accounts, uint256[] memory _tokenIds) internal view returns (uint256[] memory) {\\r\\n\\t\\trequire(_accounts.length == _tokenIds.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\r\\n\\t\\tif (_tokenIds.length != _accounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tuint256[] memory batchBalances = new uint256[](_accounts.length);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < _accounts.length; ++i) {\\r\\n\\t\\t\\tbatchBalances[i] = balanceOf(_accounts[i], _tokenIds[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn batchBalances;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice mint given quantity of tokens for given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _toAccount beneficiary of minting\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to mint\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction mint(address _operator, address _toAccount, uint256 _tokenId, uint256 _amount, bytes memory _data) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__MintToZeroAddress();\\r\\n\\r\\n\\t\\tuint256[] memory tokenIds = _asSingletonArray(_tokenId);\\r\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, address(0), _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\te1155s.balances[_tokenId][_toAccount] += _amount;\\r\\n\\t\\temit TransferSingle(_operator, address(0), _toAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, address(0), _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeTransferAcceptanceCheck(_operator, address(0), _toAccount, _tokenId, _amount, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice mint batch of tokens for given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _toAccount beneficiary of minting\\r\\n\\t * @param _tokenIds list of token IDs\\r\\n\\t * @param _amounts list of quantities of tokens to mint\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction mintBatch(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__MintToZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\t\\t\\te1155s.balances[tokenId][_toAccount] += _amounts[i];\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, address(0), _toAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice burn given quantity of tokens held by given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _fromAccount holder of tokens to burn\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to burn\\r\\n\\t */\\r\\n\\tfunction burn(address _operator, address _fromAccount, uint256 _tokenId, uint256 _amount) internal {\\r\\n\\t\\tif (_fromAccount == address(0)) revert LibERC1155__BurnFromZeroAddress();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, address(0), _asSingletonArray(_tokenId), _asSingletonArray(_amount), \\\"\\\");\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\tif (_amount > e1155s.balances[_tokenId][_fromAccount]) revert LibERC1155__BurnExceedsBalance();\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te1155s.balances[_tokenId][_fromAccount] -= _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferSingle(_operator, _fromAccount, address(0), _tokenId, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice burn given batch of tokens held by given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _fromAccount holder of tokens to burn\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to burn\\r\\n\\t */\\r\\n\\tfunction burnBatch(address _operator, address _fromAccount, uint256[] memory _tokenIds, uint256[] memory _amounts) internal {\\r\\n\\t\\tif (_fromAccount == address(0)) revert LibERC1155__BurnFromZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, address(0), _tokenIds, _amounts, \\\"\\\");\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; i++) {\\r\\n\\t\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\t\\t\\t\\tif (_amounts[i] > e1155s.balances[tokenId][_fromAccount]) revert LibERC1155__BurnExceedsBalance();\\r\\n\\t\\t\\t\\te1155s.balances[tokenId][_fromAccount] -= _amounts[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, _fromAccount, address(0), _tokenIds, _amounts);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice transfer tokens between given addresses\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction safeTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__TransferToZeroAddress();\\r\\n\\r\\n\\t\\tuint256[] memory tokenIds = _asSingletonArray(_tokenId);\\r\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\tuint256 senderBalance = e1155s.balances[_tokenId][_fromAccount];\\r\\n\\r\\n\\t\\tif (_amount > senderBalance) revert LibERC1155__TransferExceedsBalance();\\r\\n\\t\\tcheckAllowance(_operator, _fromAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te1155s.balances[_tokenId][_fromAccount] = senderBalance - _amount;\\r\\n\\t\\t\\tif (_operator != _fromAccount) {\\r\\n\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[_tokenId]) {\\r\\n\\t\\t\\t\\t\\te1155s.allowances[_fromAccount][_operator][_tokenId] = e1155s.allowances[_fromAccount][_operator][_tokenId] - _amount;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\te1155s.balances[_tokenId][_toAccount] += _amount;\\r\\n\\r\\n\\t\\temit TransferSingle(_operator, _fromAccount, _toAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, _fromAccount, _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeTransferAcceptanceCheck(_operator, _fromAccount, _toAccount, _tokenId, _amount, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice transfer batch of tokens between given addresses\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction safeTransferBatch(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__TransferToZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tcheckAllowanceBach(_operator, _fromAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\r\\n\\t\\t\\t\\tuint256 senderBalance = e1155s.balances[tokenId][_fromAccount];\\r\\n\\r\\n\\t\\t\\t\\tif (amount > senderBalance) revert LibERC1155__TransferExceedsBalance();\\r\\n\\r\\n\\t\\t\\t\\te1155s.balances[tokenId][_fromAccount] = senderBalance - amount;\\r\\n\\r\\n\\t\\t\\t\\tif (_operator != _fromAccount) {\\r\\n\\t\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[tokenId]) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.allowances[_fromAccount][_operator][tokenId] = e1155s.allowances[_fromAccount][_operator][tokenId] - amount;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\r\\n\\t\\t\\te1155s.balances[tokenId][_toAccount] += amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, _fromAccount, _toAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\r\\n\\t * @dev MUST emit the ApprovalForAll event on success.\\r\\n\\t * @param _account The owner of the tokens\\r\\n\\t * @param _operator Address to add to the set of authorized operators\\r\\n\\t * @param _approved True if the operator is approved, false to revoke approval\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address _account, address _operator, bool _approved) internal {\\r\\n\\t\\tif (_account == _operator) revert LibERC1155__SelfApproval();\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.operatorApprovals[_account][_operator] = _approved;\\r\\n\\t\\temit ApprovalForAll(_account, _operator, _approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Queries the approval status of an operator for a given owner.\\r\\n\\t * @param _account The owner of the tokens\\r\\n\\t * @param _operator Address of authorized operator\\r\\n\\t * @return True if the operator is approved, false if not\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address _account, address _operator) internal view returns (bool) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.operatorApprovals[_account][_operator];\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Receiver\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tbytes4 internal constant ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\r\\n\\tbytes4 internal constant ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\r\\n\\r\\n\\tfunction onERC1155Received(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256 _id,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) internal returns (bytes4) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tERC1155ReceiverStorage storage receivedData = e1155s.receivedTokens[e1155s.receivedTokensLength];\\r\\n\\t\\treceivedData.operator = _operator;\\r\\n\\t\\treceivedData.from = _from;\\r\\n\\t\\treceivedData.ids = _asSingletonArray(_id);\\r\\n\\t\\treceivedData.values = _asSingletonArray(_value);\\r\\n\\t\\treceivedData.data = _data;\\r\\n\\t\\te1155s.receivedTokensLength++;\\r\\n\\r\\n\\t\\t// if (shouldReject == true) {\\r\\n\\t\\t// \\trevert(\\\"onERC1155Received: transfer not accepted\\\");\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\treturn ERC1155_ACCEPTED;\\r\\n\\t\\t// }\\r\\n\\t\\treturn ERC1155_ACCEPTED;\\r\\n\\t}\\r\\n\\r\\n\\tfunction onERC1155BatchReceived(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256[] calldata _ids,\\r\\n\\t\\tuint256[] calldata _values,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) internal returns (bytes4) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tERC1155ReceiverStorage storage receivedData = e1155s.receivedTokens[e1155s.receivedTokensLength];\\r\\n\\t\\treceivedData.operator = _operator;\\r\\n\\t\\treceivedData.from = _from;\\r\\n\\t\\treceivedData.ids = _ids;\\r\\n\\t\\treceivedData.values = _values;\\r\\n\\t\\treceivedData.data = _data;\\r\\n\\t\\te1155s.receivedTokensLength++;\\r\\n\\t\\treturn ERC1155_BATCH_ACCEPTED;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Allowance\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\tfunction isOperatorSpendingLimitEnabled(uint256 _tokenId) internal view returns (bool) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.operatorSpendingLimitEnabled[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction setOperatorSpendingLimitEnabled(uint256 _tokenId, bool _enabled) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.operatorSpendingLimitEnabled[_tokenId] = _enabled;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allow other accounts/contracts to spend tokens on behalf of msg.sender\\r\\n\\t * @dev MUST emit Approval event on success.\\r\\n\\t * To minimize the risk of the approve/transferFrom attack vector (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), this function will throw if the current approved allowance does not equal the expected _currentValue, unless _value is 0.\\r\\n\\t * @param _owner Address of token owner\\r\\n\\t * @param _operator Address to approve, _operator will ba able to send token\\r\\n\\t * @param _tokenId ID of the Token\\r\\n\\t * @param _currentValue Expected current value of approved allowance.\\r\\n\\t * @param _newValue Allowance amount\\r\\n\\t */\\r\\n\\tfunction approve(address _owner, address _operator, uint256 _tokenId, uint256 _currentValue, uint256 _newValue) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.allowances[_owner][_operator][_tokenId] == _currentValue, \\\"Current value mismatch\\\");\\r\\n\\t\\te1155s.allowances[_owner][_operator][_tokenId] = _newValue;\\r\\n\\r\\n\\t\\temit Approval(_owner, _operator, _tokenId, _currentValue, _newValue);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Queries the spending limit approved for an account\\r\\n\\t * @param _owner The owner allowing the spending\\r\\n\\t * @param _operator The address allowed to spend.\\r\\n\\t * @param _tokenId ID of the Token\\r\\n\\t * @return The _operator's allowed spending balance of the Token requested\\r\\n\\t */\\r\\n\\tfunction allowance(address _owner, address _operator, uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.allowances[_owner][_operator][_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkAllowance(address _operator, address _fromAccount, uint256 _tokenId, uint256 _value) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tif (_fromAccount != _operator) {\\r\\n\\t\\t\\tif (!e1155s.operatorApprovals[_fromAccount][_operator]) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApproved();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[_tokenId] && e1155s.allowances[_fromAccount][_operator][_tokenId] < _value) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApprovedLimit();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkAllowanceBach(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts\\r\\n\\t) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tif (_fromAccount != _operator) {\\r\\n\\t\\t\\tif (!e1155s.operatorApprovals[_fromAccount][_operator]) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApproved();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\t\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[tokenId] && e1155s.allowances[_fromAccount][_operator][tokenId] < amount) {\\r\\n\\t\\t\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApprovedLimit();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Metadata\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query global metadata URI, can contain {id}, client will replace with a valid token id\\r\\n\\t */\\r\\n\\tfunction getUri() internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.uri;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set global metadata URI, can contain {id}, client will\\r\\n\\t * @param _URI global URI\\r\\n\\t */\\r\\n\\tfunction setURI(string memory _URI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.uri = _URI;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTokenBaseUri() internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.baseURI;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set base metadata URI\\r\\n\\t * @dev base URI is a non-standard feature adapted from the ERC721 specification\\r\\n\\t * @param _baseURI base URI\\r\\n\\t */\\r\\n\\tfunction setTokenBaseURI(string memory _baseURI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.baseURI = _baseURI;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTokenUri(uint256 _tokenId) internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.tokenURIs[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set pre-token metadata URI\\r\\n\\t * @param _tokenId token whose metadata URI to set\\r\\n\\t * @param _tokenURI per-token URI\\r\\n\\t */\\r\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.tokenURIs[_tokenId] = _tokenURI;\\r\\n\\t\\temit URI(_tokenURI, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * This implementation returns the concatenation of the `_baseURI`\\r\\n\\t * and the token-specific uri if the latter is set\\r\\n\\t *\\r\\n\\t * This enables the following behaviors:\\r\\n\\t *\\r\\n\\t * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\r\\n\\t *   of `_baseURI` and `_tokenURIs[tokenId]`\\r\\n\\t *\\r\\n\\t * - if `_tokenURIs[tokenId]` is NOT set then we fallback to the defaut URI\\r\\n\\t *   which contains `ERC1155.uri`;\\r\\n\\t */\\r\\n\\tfunction getUri(uint256 tokenId) internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tstring memory tokenURI = e1155s.tokenURIs[tokenId];\\r\\n\\r\\n\\t\\t// If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\r\\n\\t\\treturn bytes(tokenURI).length > 0 ? string(abi.encodePacked(e1155s.baseURI, tokenURI)) : e1155s.uri;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Enumerable\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query total minted supply of given token\\r\\n\\t * @param _tokenId token id to query\\r\\n\\t * @return token supply\\r\\n\\t */\\r\\n\\tfunction totalSupply(uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.totalSupply[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query total number of holders for given token\\r\\n\\t * @param id token id to query\\r\\n\\t * @return quantity of holders\\r\\n\\t */\\r\\n\\tfunction totalHolders(uint256 id) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.accountsByToken[id].length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query holders of given token\\r\\n\\t * @param _tokenId token id to query\\r\\n\\t * @return list of holder addresses\\r\\n\\t */\\r\\n\\tfunction accountsByToken(uint256 _tokenId) internal view returns (address[] memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tEnumerableSet.AddressSet storage accounts = e1155s.accountsByToken[_tokenId];\\r\\n\\r\\n\\t\\taddress[] memory addresses = new address[](accounts.length());\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < accounts.length(); i++) {\\r\\n\\t\\t\\t\\taddresses[i] = accounts.at(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn addresses;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query tokens held by given address\\r\\n\\t * @param _account address to query\\r\\n\\t * @return list of token ids\\r\\n\\t */\\r\\n\\tfunction tokensByAccount(address _account) internal view returns (uint256[] memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tEnumerableSet.UintSet storage tokens = e1155s.tokensByAccount[_account];\\r\\n\\r\\n\\t\\tuint256[] memory ids = new uint256[](tokens.length());\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < tokens.length(); i++) {\\r\\n\\t\\t\\t\\tids[i] = tokens.at(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ids;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Pausable\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tfunction _whenNotPaused(ERC1155Storage storage e1155s) internal view {\\r\\n\\t\\trequire(!e1155s.paused, \\\"All token is paused!\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction _whenTokenNotPaused(ERC1155Storage storage e1155s, uint256 _tokenId) internal view {\\r\\n\\t\\t_whenNotPaused(e1155s);\\r\\n\\t\\trequire(!e1155s.pausedToken[_tokenId], \\\"Token is paused!\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenNotPaused() internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenNotPaused(e1155s);\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenTokenNotPaused(uint256 _tokenId) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction pauseAllToken(address _operator) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(!e1155s.paused, \\\"All tokens are already paused\\\");\\r\\n\\t\\te1155s.paused = true;\\r\\n\\t\\temit AllTokenPaused(_operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpauseAllToken(address _operator) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.paused, \\\"All tokens are not paused yet\\\");\\r\\n\\t\\te1155s.paused = false;\\r\\n\\t\\temit AllTokenUnpaused(_operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction pauseToken(address _operator, uint256 _tokenId) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(!e1155s.pausedToken[_tokenId], \\\"Token is already paused\\\");\\r\\n\\t\\te1155s.pausedToken[_tokenId] = true;\\r\\n\\t\\temit TokenPaused(_operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpauseToken(address _operator, uint256 _tokenId) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.pausedToken[_tokenId], \\\"Token is not paused yet\\\");\\r\\n\\t\\te1155s.pausedToken[_tokenId] = false;\\r\\n\\t\\temit TokenUnpaused(_operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * Library internal helper functions\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _doSafeTransferAcceptanceCheck(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount.isContract()) {\\r\\n\\t\\t\\ttry IERC1155Receiver(_toAccount).onERC1155Received(_operator, _fromAccount, _tokenId, _amount, _data) returns (\\r\\n\\t\\t\\t\\tbytes4 response\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155Received.selector) revert LibERC1155__ERC1155ReceiverRejected();\\r\\n\\t\\t\\t} catch Error(string memory reason) {\\r\\n\\t\\t\\t\\trevert(reason);\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\trevert LibERC1155__ERC1155ReceiverNotImplemented();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _doSafeBatchTransferAcceptanceCheck(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) private {\\r\\n\\t\\tif (_toAccount.isContract()) {\\r\\n\\t\\t\\ttry IERC1155Receiver(_toAccount).onERC1155BatchReceived(_operator, _fromAccount, _tokenIds, _amounts, _data) returns (\\r\\n\\t\\t\\t\\tbytes4 response\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155BatchReceived.selector) revert LibERC1155__ERC1155ReceiverRejected();\\r\\n\\t\\t\\t} catch Error(string memory reason) {\\r\\n\\t\\t\\t\\trevert(reason);\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\trevert LibERC1155__ERC1155ReceiverNotImplemented();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _asSingletonArray(uint256 element) internal pure returns (uint256[] memory) {\\r\\n\\t\\tuint256[] memory array = new uint256[](1);\\r\\n\\t\\tarray[0] = element;\\r\\n\\t\\treturn array;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called before all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `ids` and `amounts` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_fromAccount != _toAccount) {\\r\\n\\t\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\t\\tmapping(uint256 => EnumerableSet.AddressSet) storage tokenAccounts = e1155s.accountsByToken;\\r\\n\\r\\n\\t\\t\\tEnumerableSet.UintSet storage fromAccountTokens = e1155s.tokensByAccount[_fromAccount];\\r\\n\\t\\t\\tEnumerableSet.UintSet storage toAccountTokens = e1155s.tokensByAccount[_toAccount];\\r\\n\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\r\\n\\t\\t\\t\\tif (amount > 0) {\\r\\n\\t\\t\\t\\t\\tuint256 id = _tokenIds[i];\\r\\n\\r\\n\\t\\t\\t\\t\\tif (_fromAccount == address(0)) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.totalSupply[id] += amount;\\r\\n\\t\\t\\t\\t\\t} else if (balanceOf(_fromAccount, id) == amount) {\\r\\n\\t\\t\\t\\t\\t\\ttokenAccounts[id].remove(_fromAccount);\\r\\n\\t\\t\\t\\t\\t\\tfromAccountTokens.remove(id);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif (_toAccount == address(0)) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.totalSupply[id] -= amount;\\r\\n\\t\\t\\t\\t\\t} else if (balanceOf(_toAccount, id) == 0) {\\r\\n\\t\\t\\t\\t\\t\\ttokenAccounts[id].add(_toAccount);\\r\\n\\t\\t\\t\\t\\t\\ttoAccountTokens.add(id);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tLibERC1155Customization._beforeTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called after all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `id` and `amount` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _afterTokenTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tLibERC1155Customization._afterTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xec6b5201d39937703eb059c34d4289ad4e2eb03f1dcbfd648165fe2e1ac7354f\",\"license\":\"MIT\"},\"contracts/base/ERC1155/base/LibERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct ERC1155ReceiverStorage {\\r\\n\\tbytes data;\\r\\n\\taddress operator;\\r\\n\\taddress from;\\r\\n\\tuint256[] ids;\\r\\n\\tuint256[] values;\\r\\n}\\r\\n\\r\\nstruct ERC1155Storage {\\r\\n\\tmapping(uint256 => mapping(address => uint256)) balances; // Mapping from token ID to account balances\\r\\n\\tmapping(address => mapping(address => bool)) operatorApprovals; // Mapping from account to operator approvals\\r\\n\\tmapping(uint256 => bool) operatorSpendingLimitEnabled;\\r\\n\\tmapping(address => mapping(address => mapping(uint256 => uint256))) allowances;\\r\\n\\tmapping(uint256 => uint256) totalSupply;\\r\\n\\tmapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\r\\n\\tmapping(address => EnumerableSet.UintSet) tokensByAccount;\\r\\n\\tstring uri; // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\r\\n\\tstring baseURI; // Optional base URI, e.g. ipfs://53453534\\r\\n\\tmapping(uint256 => string) tokenURIs; // Optional mapping for token URIs, e.g. 4236464216781, so tokenURI will be: ipfs://53453534/4236464216781\\r\\n\\tbool paused;\\r\\n\\tmapping(uint256 => bool) pausedToken;\\r\\n\\tuint256 receivedTokensLength;\\r\\n\\tmapping(uint256 => ERC1155ReceiverStorage) receivedTokens;\\r\\n}\\r\\n\\r\\nlibrary LibERC1155Storage {\\r\\n\\tbytes32 internal constant ERC1155_STORAGE_SLOT = keccak256(\\\"usmart.contracts.erc1155-base.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ERC1155Storage storage e1155s_) {\\r\\n\\t\\tbytes32 position = ERC1155_STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\te1155s_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x4e6183d99d461002f2e4873dd8ecc52d243537e0bb5f364b708c45e4ea533ba0\",\"license\":\"MIT\"},\"contracts/base/ERC1155/customization/LibERC1155Customization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../../TokenRestriction/LibTokenRestriction.sol\\\";\\r\\nimport \\\"../../TokenPNL/LibTokenPNL.sol\\\";\\r\\n\\r\\nimport \\\"../../../ArexaPlatform/Platform/LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibERC1155Customization {\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called before all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `ids` and `amounts` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t *  param_operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t *  param_toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t *  param _data data payload\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfer(\\r\\n\\t\\taddress, //_operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress, //_toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory //_data\\r\\n\\t) internal view {\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.checkRestrictions(_fromAccount, _tokenIds, _amounts);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called after all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `id` and `amount` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * _data data payload\\r\\n\\t */\\r\\n\\tfunction _afterTokenTransfer(\\r\\n\\t\\taddress, //_operator\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory //_data\\r\\n\\t) internal {\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.recalcRestrictions(_fromAccount, _tokenIds, _amounts, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_toAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.recalcRestrictions(_toAccount, _tokenIds, _amounts, 1);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tLibTokenPNL.refreshDivident(\\r\\n\\t\\t\\t\\taddress(LibArexaPlatformShared.getPayingToken()),\\r\\n\\t\\t\\t\\t_tokenIds[i],\\r\\n\\t\\t\\t\\t_fromAccount,\\r\\n\\t\\t\\t\\t_toAccount,\\r\\n\\t\\t\\t\\t_amounts[i]\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x83747a00d51e7cbe347aaf8c093ec4171fdbacd890a93b511ec2a46f45686fa4\",\"license\":\"MIT\"},\"contracts/base/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice query the total minted token supply\\n\\t * @return token supply\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the token balance of given account\\n\\t * @param account address to query\\n\\t * @return token balance\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the allowance granted from given holder to given spender\\n\\t * @param holder approver of allowance\\n\\t * @param spender recipient of allowance\\n\\t * @return token allowance\\n\\t */\\n\\tfunction allowance(address holder, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice grant approval to spender to spend tokens\\n\\t * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n\\t * @param spender recipient of allowance\\n\\t * @param amount quantity of tokens approved for spending\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient on behalf of given holder\\n\\t * @param holder holder of tokens prior to transfer\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transferFrom(address holder, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2225a383553a4a87b9b6577c7b90eff90b4b6a0e967c97d0a3fd5291a290d8db\",\"license\":\"MIT\"},\"contracts/base/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata {\\n\\t/**\\n\\t * @notice return token name\\n\\t * @return token name\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice return token symbol\\n\\t * @return token symbol\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice return token decimals, generally used only for display purposes\\n\\t * @return token decimals\\n\\t */\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaef9c65c2330d80a184d3d59dbe37f80af62f88c5f707a2e36dd1377ba04898d\",\"license\":\"MIT\"},\"contracts/base/Shared/ProtectedCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibDiamond } from \\\"../Diamond/LibDiamond.sol\\\";\\r\\n\\r\\ncontract CallProtection {\\r\\n\\tmodifier protectedCall() {\\r\\n\\t\\trequire(address(this) == LibDiamond.getDiamondAddress(), \\\"NOT_ALLOWED\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc15612f2411ec779b6036b14a4495f5b402178ebb0864d727cb5cc01f917b798\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTargetedPausableStorage.sol\\\";\\r\\n\\r\\nlibrary LibTargetedPausable {\\r\\n\\terror TargetedPausable__TargetedPaused();\\r\\n\\terror TargetedPausable__NotTargetedPaused();\\r\\n\\r\\n\\t//target: what was paused\\r\\n\\t//account: the operator who is paused the target\\r\\n\\tevent TargetedPaused(bytes32 indexed target, address indexed account);\\r\\n\\r\\n\\t//target: what was unpaused\\r\\n\\t//account: the operator who is unpaused the target\\r\\n\\tevent TargetedUnpaused(bytes32 target, address indexed account);\\r\\n\\r\\n\\tfunction _whenNotPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (LibTargetedPausable._paused(_target)) revert TargetedPausable__TargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _whenPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (!LibTargetedPausable._paused(_target)) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _paused(bytes32 _target) internal view returns (bool paused_) {\\r\\n\\t\\tpaused_ = LibTargetedPausableStorage.layout().paused[_target];\\r\\n\\t}\\r\\n\\r\\n\\tfunction _pause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (ps.paused[_target]) revert TargetedPausable__TargetedPaused();\\r\\n\\t\\tps.paused[_target] = true;\\r\\n\\t\\temit TargetedPaused(_target, _operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _unpause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (!ps.paused[_target]) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t\\tps.paused[_target] = false;\\r\\n\\t\\tdelete ps.paused[_target];\\r\\n\\t\\temit TargetedUnpaused(_target, _operator);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x29bcbce5b5f8cc5c33029d568ffb11b1bc807cfb0ad22acd6c69b79acf2b3d8b\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct TargetedPausableStorage {\\r\\n\\tmapping(bytes32 => bool) paused;\\r\\n}\\r\\n\\r\\nlibrary LibTargetedPausableStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.targeted-pausable.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TargetedPausableStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3a8d48db3da71fb9df91fe855d32fb0dd634556499739c6c277842021c92438d\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/ModifierPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibTargetedPausable } from \\\"./LibTargetedPausable.sol\\\";\\r\\n\\r\\nabstract contract ModifierPausable {\\r\\n\\t//\\r\\n\\tmodifier whenNotPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable._whenNotPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable._whenPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x5a08a624e6849e716dc267f8e1d6f171594ab1560bd0097b11d2f9950276a9a9\",\"license\":\"MIT\"},\"contracts/base/TokenDynamicPricing/LibTokenDynamicPricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTokenDynamicPricingStorage.sol\\\";\\r\\n\\r\\nimport \\\"../../utils/Math.sol\\\";\\r\\n\\r\\nlibrary LibTokenDynamicPricing {\\r\\n\\tfunction initialize(uint256 _tokenId, uint256 _initialQuantity, uint256 _min, uint256 _max) internal {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\r\\n\\t\\tpricing.isEnabled = true;\\r\\n\\t\\tpricing.quantity = _initialQuantity;\\r\\n\\t\\tpricing.k = (_min == 0) ? _initialQuantity * _initialQuantity : _initialQuantity * _initialQuantity * _min;\\r\\n\\t\\tpricing.min = _min; //must contain the decimals of the paying token!!!\\r\\n\\t\\tpricing.max = (_max == 0 || _max < _min) ? pricing.k : _max; //must contain the decimals of the paying token!!!\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calcTotalValue(DynamicPricing storage pricing, uint256 _quantity) internal view returns (uint256) {\\r\\n\\t\\trequire(pricing.isEnabled, \\\"Calculation is not enabled for the token!\\\");\\r\\n\\t\\trequire(_quantity <= pricing.quantity, \\\"Not enought quantity left!\\\");\\r\\n\\t\\tuint256 totalValue = (((10 * _quantity * pricing.k) / (pricing.quantity * (pricing.quantity - _quantity + 1))) + 5) / 10;\\r\\n\\t\\treturn Math.min(_quantity * pricing.max, Math.max(_quantity * pricing.min, totalValue));\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcTotalValue(uint256 _tokenId, uint256 _quantity) internal view returns (uint256) {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\treturn _calcTotalValue(pricing, _quantity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyQuantity(uint256 _tokenId, uint256 _quantity) internal returns (uint256) {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\tuint256 totalValue = _calcTotalValue(pricing, _quantity);\\r\\n\\r\\n\\t\\tpricing.quantity = pricing.quantity - _quantity;\\r\\n\\t\\tpricing.totalValue = pricing.totalValue + totalValue;\\r\\n\\r\\n\\t\\tif (pricing.quantity == 0) {\\r\\n\\t\\t\\tpricing.isEnabled = false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn totalValue;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getEnabled(uint256 _tokenId) internal view returns (bool) {\\r\\n\\t\\t//\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\treturn pricing.isEnabled;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPricingEnabled(uint256 _tokenId, bool _enabledValue) internal {\\r\\n\\t\\tTokenDynamicPricingStorage storage dynamicPricing = LibTokenDynamicPricingStorage.layout();\\r\\n\\t\\tDynamicPricing storage pricing = dynamicPricing.tokenDynamicPricing[_tokenId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!_enabledValue || (_enabledValue && pricing.quantity > 0),\\r\\n\\t\\t\\t\\\"Reenable of token pricing is only availabe is there is som token left to sell!\\\"\\r\\n\\t\\t);\\r\\n\\t\\tpricing.isEnabled = _enabledValue;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc812e1d7630c7bd8fd1ea671d8071ea4073f795248963a24310c194d80aea06a\",\"license\":\"MIT\"},\"contracts/base/TokenDynamicPricing/LibTokenDynamicPricingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct DynamicPricing {\\r\\n\\tbool isEnabled;\\r\\n\\tuint256 quantity;\\r\\n\\tuint256 totalValue;\\r\\n\\tuint256 k;\\r\\n\\tuint256 min;\\r\\n\\tuint256 max;\\r\\n}\\r\\n\\r\\nstruct TokenDynamicPricingStorage {\\r\\n\\t//tokenId => restriction, every token have\\r\\n\\tmapping(uint256 => DynamicPricing) tokenDynamicPricing;\\r\\n}\\r\\n\\r\\nlibrary LibTokenDynamicPricingStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-dynamic-pricing.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenDynamicPricingStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c22e58724632328816b6c260a176e5ed1788e37966f7775a0dd19ef0ae4d92\",\"license\":\"MIT\"},\"contracts/base/TokenPNL/LibTokenPNL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibTokenPNLStorage.sol\\\";\\r\\n\\r\\nlibrary LibTokenPNL {\\r\\n\\tfunction initTokenPNL(address _contract, uint256 _tokenId) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tinventory.isEnabled = true;\\r\\n\\t\\tinventory.sumQuantity = 0;\\r\\n\\t\\tinventory.sumAmount = 0;\\r\\n\\t\\tinventory.sumPnl = 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeTotalValue(address _contract, uint256 _tokenId, int256 _amount) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//because every transfer, mint and burn do like ralizing the pnl\\r\\n\\t\\t//and after this realizing the user can payout the collected a PNL\\r\\n\\t\\t//so decreasing the value can cause money loss in the contract!!!\\r\\n\\t\\t//if wanted full inventory feature in a distributed way: ask uSmart ;)\\r\\n\\t\\trequire(_amount >= 0, \\\"Pool can only increase!\\\");\\r\\n\\r\\n\\t\\tinventory.sumAmount += _amount;\\r\\n\\t\\tinventory.sumPnl += _amount; //Here is the MAGIC!\\r\\n\\r\\n\\t\\t// console.log(\\\"ChangeTotalValue\\\");\\r\\n\\t\\t// console.log(\\\"_tokenId\\\", _tokenId);\\r\\n\\t\\t// if (inventory.sumAmount >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumAmount\\\", uint256(inventory.sumAmount));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumAmount -\\\", uint256(-1 * inventory.sumAmount));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInventory(\\r\\n\\t\\taddress _contract,\\r\\n\\t\\tuint256 _tokenId\\r\\n\\t) internal view returns (bool isEnabled, int256 sumQuantity, int256 sumAmount, int256 sumPnl) {\\r\\n\\t\\t//\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\treturn (inventory.isEnabled, inventory.sumQuantity, inventory.sumAmount, inventory.sumPnl);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInventoryItem(\\r\\n\\t\\taddress _contract,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\taddress _account\\r\\n\\t) internal view returns (int256 quantity, int256 deltaPnl, int256 payedPnl) {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\treturn (inventory.divident[_account].quantity, inventory.divident[_account].deltaPnl, inventory.divident[_account].payedPnl);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _refreshDividentInternal(Inventory storage inventory, address _account, int256 _quantity) internal {\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\r\\n\\t\\trequire(inventory.sumQuantity + _quantity >= 0, \\\"Pool token quanity can't be less then zero!\\\");\\r\\n\\t\\trequire(inventoryItem.quantity + _quantity >= 0, \\\"User token quanity can't be less then zero!\\\");\\r\\n\\r\\n\\t\\t// console.log(\\\"_refreshDividentInternal\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\r\\n\\t\\t// if (inventory.sumQuantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity\\\", uint256(inventory.sumQuantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity -\\\", uint256(-1 * inventory.sumQuantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tint256 addressPnlDelta = 0;\\r\\n\\t\\tif (inventory.sumQuantity != 0) {\\r\\n\\t\\t\\taddressPnlDelta = (inventory.sumPnl * _quantity) / inventory.sumQuantity;\\r\\n\\t\\t}\\r\\n\\t\\t// if (addressPnlDelta >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"addressPnlDelta\\\", uint256(addressPnlDelta));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"addressPnlDelta -\\\", uint256(-1 * addressPnlDelta));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tinventory.sumQuantity = inventory.sumQuantity + _quantity;\\r\\n\\t\\tinventory.sumPnl = inventory.sumPnl + addressPnlDelta;\\r\\n\\t\\tinventoryItem.quantity = inventoryItem.quantity + _quantity;\\r\\n\\t\\tinventoryItem.deltaPnl = inventoryItem.deltaPnl - addressPnlDelta;\\r\\n\\r\\n\\t\\t// if (inventory.sumQuantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumQuantity\\\", uint256(inventory.sumQuantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumQuantity -\\\", uint256(-1 * inventory.sumQuantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.quantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.quantity\\\", uint256(inventoryItem.quantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.quantity -\\\", uint256(-1 * inventoryItem.quantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.deltaPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.deltaPnl\\\", uint256(inventoryItem.deltaPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.deltaPnl -\\\", uint256(-1 * inventoryItem.deltaPnl));\\r\\n\\t\\t// }\\r\\n\\t}\\r\\n\\r\\n\\tfunction refreshDivident(address _contract, uint256 _tokenId, address _fromAccount, address _toAccount, uint256 _quantity) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\t_refreshDividentInternal(inventory, _fromAccount, -1 * int256(_quantity));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_toAccount != address(0)) {\\r\\n\\t\\t\\t_refreshDividentInternal(inventory, _toAccount, int256(_quantity));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcDivident(address _contract, uint256 _tokenId, address _account) internal view returns (int256) {\\r\\n\\t\\tif (_account == address(0)) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\t\\t//calculate actual value of the token\\r\\n\\t\\tint256 actValue = 0;\\r\\n\\t\\tif (inventory.sumQuantity != 0) {\\r\\n\\t\\t\\tactValue = (inventory.sumPnl * inventoryItem.quantity) / inventory.sumQuantity;\\r\\n\\t\\t}\\r\\n\\t\\t//the divident is equal with the actual value minus the summa pnlDelta\\r\\n\\t\\t//note: the pnlDelta already have the negative sign!!!\\r\\n\\t\\tint256 actDivident = actValue + inventoryItem.deltaPnl - inventoryItem.payedPnl;\\r\\n\\r\\n\\t\\t// console.log(\\\"calcDivident\\\");\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.quantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.quantity\\\", uint256(inventoryItem.quantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.quantity -\\\", uint256(-1 * inventoryItem.quantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventory.sumQuantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity\\\", uint256(inventory.sumQuantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity -\\\", uint256(-1 * inventory.sumQuantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.deltaPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.deltaPnl\\\", uint256(inventoryItem.deltaPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.deltaPnl -\\\", uint256(-1 * inventoryItem.deltaPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.payedPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.payedPnl\\\", uint256(inventoryItem.payedPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.payedPnl -\\\", uint256(-1 * inventoryItem.payedPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (actDivident >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"actDivident\\\", uint256(actDivident));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"actDivident -\\\", uint256(-1 * actDivident));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\treturn actDivident;\\r\\n\\t}\\r\\n\\r\\n\\tfunction refreshPayoutDivident(address _contract, uint256 _tokenId, address _account, int256 _amount) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\trequire(_amount >= 0, \\\"Only positive amount can be payed out!\\\");\\r\\n\\r\\n\\t\\tint256 payableDivident = calcDivident(_contract, _tokenId, _account);\\r\\n\\r\\n\\t\\trequire(_amount <= payableDivident, \\\"The amount is bigger then tha payable divident!\\\");\\r\\n\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\t\\tinventoryItem.payedPnl = inventoryItem.payedPnl + _amount;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x6ee08d59bcb037857e003916987b97f6f1d49a3c9fcef1bacd3a782a1c8cff69\",\"license\":\"MIT\"},\"contracts/base/TokenPNL/LibTokenPNLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct InventoryItem {\\r\\n\\tint256 quantity;\\r\\n\\tint256 deltaPnl; //After calculating the act Pnl based on the quantity this is a Pnl modification factor!\\r\\n\\tint256 payedPnl;\\r\\n}\\r\\n\\r\\nstruct Inventory {\\r\\n\\tbool isEnabled;\\r\\n\\tint256 sumQuantity;\\r\\n\\tint256 sumAmount;\\r\\n\\tint256 sumPnl;\\r\\n\\t//Account - pool divident calculation\\r\\n\\tmapping(address => InventoryItem) divident;\\r\\n}\\r\\n\\r\\nstruct TokenPNLStorage {\\r\\n\\t//contract => tokenId => inventory map\\r\\n\\t//Eg: IERC20 => 0 => inventory\\r\\n\\t//Eg: IERC1155 => tokenId => Inventory\\r\\n\\tmapping(address => mapping(uint256 => Inventory)) inventory;\\r\\n}\\r\\n\\r\\nlibrary LibTokenPNLStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-pnl.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenPNLStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2ad5ccdae091ea94e36dce8d852d697f8569b438284f51a4a983a7c0d4b9de8b\",\"license\":\"MIT\"},\"contracts/base/TokenRestriction/LibTokenRestriction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibTokenRestrictionStorage.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\nimport \\\"../../utils/Math.sol\\\";\\r\\n\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary LibTokenRestriction {\\r\\n\\tfunction initTokenRestriction(uint256 _tokenId, uint256 _endOfRestriction, uint256 _endOfRestrictionCalc, uint256 _timeDelta) internal {\\r\\n\\t\\t// require(block.number + 12 * _timeDelta < _endOfRestriction);\\r\\n\\t\\t// require(_endOfRestriction + 12 * _timeDelta < _endOfRestrictionCalc);\\r\\n\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\t\\tif ((restriction.endOfRestrictionCalc == 0) || (restriction.endOfRestriction + 1 == restriction.endOfRestrictionCalc)) {\\r\\n\\t\\t\\trestriction.endOfRestriction = _endOfRestriction;\\r\\n\\t\\t\\trestriction.endOfRestrictionCalc = _endOfRestrictionCalc;\\r\\n\\t\\t\\trestriction.timeDelta = _timeDelta;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcUnrestrictedAmount(address _account, uint256 _tokenId, uint256 _amount) internal view returns (uint256) {\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc < block.number) {\\r\\n\\t\\t\\treturn _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// if (restriction.endOfRestriction < block.number) {\\r\\n\\t\\t// \\treturn _amount;\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((K8-I8)/L8)*(E8-M8)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumulated)/12)\\r\\n\\t\\t// console.log(\\\"calcUnrestrictedAmount\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\t\\t// console.log(\\\"blocknumber\\\", block.number);\\r\\n\\t\\t// console.log(\\\"accRestr.time\\\", accRestr.time);\\r\\n\\t\\t// console.log(\\\"restriction.timeDelta\\\", restriction.timeDelta);\\r\\n\\t\\t// console.log(\\\"accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\t\\t// console.log(\\\"helper\\\", helper);\\r\\n\\r\\n\\t\\t//=MIN(M10+Q10;E10)-G10\\r\\n\\t\\t//=MIN(accumulated+helper;bought)-sold\\r\\n\\t\\tuint256 canSell = Math.min(accRestr.accumulated + helper, accRestr.bought) - accRestr.sold;\\r\\n\\t\\t// console.log(\\\"canSell\\\", canSell);\\r\\n\\r\\n\\t\\treturn canSell;\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkRestriction(address _account, uint256 _tokenId, uint256 _amount) internal view returns (bool) {\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc <= block.number) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// if (restriction.endOfRestriction < block.number) {\\r\\n\\t\\t// \\treturn;\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((K8-I8)/L8)*(E8-M8)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumulated)/12)\\r\\n\\t\\t// console.log(\\\"CheckRestriction\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\t\\t// console.log(\\\"blocknumber\\\", block.number);\\r\\n\\t\\t// console.log(\\\"accRestr.time\\\", accRestr.time);\\r\\n\\t\\t// console.log(\\\"restriction.timeDelta\\\", restriction.timeDelta);\\r\\n\\t\\t// console.log(\\\"accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\t\\t// console.log(\\\"helper\\\", helper);\\r\\n\\r\\n\\t\\t//=MIN(M10+Q10;E10)-G10\\r\\n\\t\\t//=MIN(accumulated+helper;bought)-sold\\r\\n\\t\\tuint256 canSell = Math.min(accRestr.accumulated + helper, accRestr.bought) - accRestr.sold;\\r\\n\\t\\t// console.log(\\\"canSell\\\", canSell);\\r\\n\\r\\n\\t\\trequire(_amount <= canSell, \\\"The amount is grater then the accumlated ('sellable') amount!\\\");\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkRestrictions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts) internal view returns (bool) {\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tcheckRestriction(_account, _tokenIds[i], _amounts[i]);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction recalcRestriction(address _account, uint256 _tokenId, uint256 _amount, uint8 _direction) internal {\\r\\n\\t\\t//eladhat\\u00f3 mennyis\\u00e9g kalkul\\u00e1ci\\u00f3hoz\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc <= block.number) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestriction <= block.number) {\\r\\n\\t\\t\\t//valami m\\u00e1st kell csin\\u00e1lni\\r\\n\\t\\t\\tif (_direction == 1) {\\r\\n\\t\\t\\t\\taccRestr.bought += _amount;\\r\\n\\t\\t\\t\\taccRestr.accumulated += _amount;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//friss\\u00edteni \\u00fczemszer\\u0171en.\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((J12-I12)/L12)*(E12-M12)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumlated)/12)\\r\\n\\t\\t// console.log(\\\"RecalcRestriction\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\t\\t// console.log(\\\"blocknumber\\\", block.number);\\r\\n\\t\\t// console.log(\\\"accRestr.time\\\", accRestr.time);\\r\\n\\t\\t// console.log(\\\"restriction.timeDelta\\\", restriction.timeDelta);\\r\\n\\t\\t// console.log(\\\"accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\t\\t// console.log(\\\"helper\\\", helper);\\r\\n\\r\\n\\t\\t//=MIN(M12+N12; E12)\\r\\n\\t\\t//=MIN(accumulated+helper; bought)\\r\\n\\t\\taccRestr.accumulated = Math.min(accRestr.accumulated + helper, accRestr.bought);\\r\\n\\t\\t// console.log(\\\"NEW accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\r\\n\\t\\t//vesz, elad\\r\\n\\t\\tif (_direction == 1) {\\r\\n\\t\\t\\taccRestr.bought += _amount;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\taccRestr.sold += _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\taccRestr.time = block.number;\\r\\n\\r\\n\\t\\t// console.log(\\\"NEW accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"NEW accRestr.sold\\\", accRestr.sold);\\r\\n\\t\\t// console.log(\\\"NEW accRestr.time\\\", accRestr.time);\\r\\n\\t}\\r\\n\\r\\n\\tfunction recalcRestrictions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts, uint8 _direction) internal {\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\trecalcRestriction(_account, _tokenIds[i], _amounts[i], _direction);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x38eeb77ee9d9c6f5df3ed0fd765b207f2d9f3a9383dab85595a7a11ebb0c42d3\",\"license\":\"MIT\"},\"contracts/base/TokenRestriction/LibTokenRestrictionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RestrictionCalc {\\r\\n\\tuint256 bought;\\r\\n\\tuint256 sold;\\r\\n\\tuint256 time; //blockheight * 1 000 000 000\\r\\n\\tuint256 accumulated;\\r\\n}\\r\\n\\r\\nstruct Restriction {\\r\\n\\tuint256 endOfRestriction; //if act-time is lower then endOfRestriction then only calculating the a previous data, new tokens do not restircted\\r\\n\\tuint256 endOfRestrictionCalc; //if act-time is lower then endOfRestrictionCalc then now calculation at all\\r\\n\\tuint256 timeDelta; //if time is blockHeight based then delta should be calculated like that. If second based then...\\r\\n\\t//Account - restriction calculation params\\r\\n\\tmapping(address => RestrictionCalc) restriction;\\r\\n}\\r\\n\\r\\nstruct TokenRestrictionStorage {\\r\\n\\t//tokenId => restriction, every token have\\r\\n\\tmapping(uint256 => Restriction) tokenRestriction;\\r\\n}\\r\\n\\r\\nlibrary LibTokenRestrictionStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-restriction.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenRestrictionStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xe358c34214fecb91a975cd5269031d6b92f13d0d8af754b2d4dc56fc5246a744\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n\\tenum FacetCutAction {\\n\\t\\tAdd,\\n\\t\\tReplace,\\n\\t\\tRemove\\n\\t}\\n\\t// Add=0, Replace=1, Remove=2\\n\\n\\tstruct FacetCut {\\n\\t\\taddress facetAddress;\\n\\t\\tFacetCutAction action;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n\\tevent DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x38a0a1b25fb31d2205f5aaedb20f1788a38bc4147a4a20ee030335b7cdbaa0c4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\ninterface IERC173 {\\r\\n\\t/// @dev This emits when ownership of a contract changes.\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/// @notice Get the address of the owner\\r\\n\\t/// @return owner_ The address of the owner.\\r\\n\\tfunction owner() external view returns (address owner_);\\r\\n\\r\\n\\t/// @notice Set the address of the new owner of the contract\\r\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n\\t/// @param _newOwner The address of the new owner of the contract\\r\\n\\tfunction transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x92d3f89d7077a9b49b41fd69091ce8f8c1b20c5695dafbbb4b13e7b6f0d6e6ef\",\"license\":\"MIT\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { UintUtils } from \\\"./UintUtils.sol\\\";\\n\\nlibrary AddressUtils {\\n\\tusing UintUtils for uint256;\\n\\n\\terror AddressUtils__InsufficientBalance();\\n\\terror AddressUtils__NotContract();\\n\\terror AddressUtils__SendValueFailed();\\n\\n\\tfunction toString(address account) internal pure returns (string memory) {\\n\\t\\treturn uint256(uint160(account)).toHexString(20);\\n\\t}\\n\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\tfunction sendValue(address payable account, uint256 amount) internal {\\n\\t\\t(bool success, ) = account.call{ value: amount }(\\\"\\\");\\n\\t\\tif (!success) revert AddressUtils__SendValueFailed();\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"AddressUtils: failed low-level call\\\");\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n\\t\\treturn _functionCallWithValue(target, data, 0, error);\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"AddressUtils: failed low-level call with value\\\");\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) internal returns (bytes memory) {\\n\\t\\tif (value > address(this).balance) revert AddressUtils__InsufficientBalance();\\n\\t\\treturn _functionCallWithValue(target, data, value, error);\\n\\t}\\n\\n\\t/**\\n\\t * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n\\t * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n\\t * @param target recipient of call\\n\\t * @param gasAmount gas allowance for call\\n\\t * @param value native token value to include in call\\n\\t * @param maxCopy maximum number of bytes to copy from return data\\n\\t * @param data encoded call data\\n\\t * @return success whether call is successful\\n\\t * @return returnData copied return data\\n\\t */\\n\\tfunction excessivelySafeCall(\\n\\t\\taddress target,\\n\\t\\tuint256 gasAmount,\\n\\t\\tuint256 value,\\n\\t\\tuint16 maxCopy,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool success, bytes memory returnData) {\\n\\t\\treturnData = new bytes(maxCopy);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// execute external call via assembly to avoid automatic copying of return data\\n\\t\\t\\tsuccess := call(gasAmount, target, value, add(data, 0x20), mload(data), 0, 0)\\n\\n\\t\\t\\t// determine whether to limit amount of data to copy\\n\\t\\t\\tlet toCopy := returndatasize()\\n\\n\\t\\t\\tif gt(toCopy, maxCopy) {\\n\\t\\t\\t\\ttoCopy := maxCopy\\n\\t\\t\\t}\\n\\n\\t\\t\\t// store the length of the copied bytes\\n\\t\\t\\tmstore(returnData, toCopy)\\n\\n\\t\\t\\t// copy the bytes from returndata[0:toCopy]\\n\\t\\t\\treturndatacopy(add(returnData, 0x20), 0, toCopy)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) private returns (bytes memory) {\\n\\t\\tif (!isContract(target)) revert AddressUtils__NotContract();\\n\\n\\t\\t(bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n\\t\\tif (success) {\\n\\t\\t\\treturn returnData;\\n\\t\\t} else if (returnData.length > 0) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet returnData_size := mload(returnData)\\n\\t\\t\\t\\trevert(add(32, returnData), returnData_size)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\trevert(error);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7dec1466e1e606394a35fa837156a011f761ac6a6e9097b89a348fad1f2f692\",\"license\":\"MIT\"},\"contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n\\terror EnumerableSet__IndexOutOfBounds();\\n\\n\\tstruct Set {\\n\\t\\tbytes32[] _values;\\n\\t\\t// 1-indexed to allow 0 to signify nonexistence\\n\\t\\tmapping(bytes32 => uint256) _indexes;\\n\\t}\\n\\n\\tstruct Bytes32Set {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct AddressSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct UintSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n\\t\\treturn _at(set._inner, index);\\n\\t}\\n\\n\\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\n\\t\\treturn address(uint160(uint256(_at(set._inner, index))));\\n\\t}\\n\\n\\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n\\t\\treturn uint256(_at(set._inner, index));\\n\\t}\\n\\n\\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, value);\\n\\t}\\n\\n\\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction indexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, value);\\n\\t}\\n\\n\\tfunction indexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction indexOf(UintSet storage set, uint256 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(AddressSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(UintSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, value);\\n\\t}\\n\\n\\tfunction add(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, value);\\n\\t}\\n\\n\\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction toArray(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n\\t\\treturn set._inner._values;\\n\\t}\\n\\n\\tfunction toArray(AddressSet storage set) internal view returns (address[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\taddress[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction toArray(UintSet storage set) internal view returns (uint256[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\tuint256[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\n\\t\\tif (index >= set._values.length) revert EnumerableSet__IndexOutOfBounds();\\n\\t\\treturn set._values[index];\\n\\t}\\n\\n\\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\n\\t\\treturn set._indexes[value] != 0;\\n\\t}\\n\\n\\tfunction _indexOf(Set storage set, bytes32 value) private view returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn set._indexes[value] - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _length(Set storage set) private view returns (uint256) {\\n\\t\\treturn set._values.length;\\n\\t}\\n\\n\\tfunction _add(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tif (!_contains(set, value)) {\\n\\t\\t\\tset._values.push(value);\\n\\t\\t\\tset._indexes[value] = set._values.length;\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _remove(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tuint256 valueIndex = set._indexes[value];\\n\\n\\t\\tif (valueIndex != 0) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tbytes32 last = set._values[set._values.length - 1];\\n\\n\\t\\t\\t\\t// move last value to now-vacant index\\n\\n\\t\\t\\t\\tset._values[valueIndex - 1] = last;\\n\\t\\t\\t\\tset._indexes[last] = valueIndex;\\n\\t\\t\\t}\\n\\t\\t\\t// clear last index\\n\\n\\t\\t\\tset._values.pop();\\n\\t\\t\\tdelete set._indexes[value];\\n\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x442e9fd507b659095a1fec47f8cb6e540442165217af05db1afa2703a993e038\",\"license\":\"MIT\"},\"contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nlibrary Math {\\n\\t/**\\n\\t * @notice calculate the absolute value of a number\\n\\t * @param a number whose absoluve value to calculate\\n\\t * @return absolute value\\n\\t */\\n\\tfunction abs(int256 a) internal pure returns (uint256) {\\n\\t\\treturn uint256(a < 0 ? -a : a);\\n\\t}\\n\\n\\t/**\\n\\t * @notice select the greater of two numbers\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return greater number\\n\\t */\\n\\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a > b ? a : b;\\n\\t}\\n\\n\\t/**\\n\\t * @notice select the lesser of two numbers\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return lesser number\\n\\t */\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a > b ? b : a;\\n\\t}\\n\\n\\t/**\\n\\t * @notice calculate the average of two numbers, rounded down\\n\\t * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return mean value\\n\\t */\\n\\tfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn (a & b) + ((a ^ b) >> 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice estimate square root of number\\n\\t * @dev uses Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n\\t * @param x input number\\n\\t * @return y square root\\n\\t */\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256 y) {\\n\\t\\tuint256 z = (x + 1) >> 1;\\n\\t\\ty = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = (x / z + z) >> 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x032ee4f9c6cc152b1930c8c84a11bc736dc627a71a41a73e28b09b3ad7a231b3\",\"license\":\"MIT\"},\"contracts/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../base/ERC20/IERC20.sol\\\";\\r\\nimport { AddressUtils } from \\\"./AddressUtils.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n\\terror SafeERC20FailedOperation(address token);\\r\\n\\tusing AddressUtils for address;\\r\\n\\r\\n\\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n\\t\\tbytes memory returndata = address(token).functionCall(abi.encodeCall(token.transfer, (to, value)));\\r\\n\\t\\tif (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\r\\n\\t\\t\\trevert SafeERC20FailedOperation(address(token));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n\\t\\tbytes memory returndata = address(token).functionCall(abi.encodeCall(token.transferFrom, (from, to, value)));\\r\\n\\t\\tif (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\r\\n\\t\\t\\trevert SafeERC20FailedOperation(address(token));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xdc53bc172ef7a4c0200036e81b9c2bb111ba29aaa51367617d343ab912072d2f\",\"license\":\"MIT\"},\"contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n\\terror UintUtils__InsufficientHexLength();\\n\\n\\tbytes16 private constant HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n\\tfunction add(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? sub(a, -b) : a + uint256(b);\\n\\t}\\n\\n\\tfunction sub(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? add(a, -b) : a - uint256(b);\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 length = 0;\\n\\n\\t\\tfor (uint256 temp = value; temp != 0; temp >>= 8) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tlength++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\t\\tbuffer[i] = HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\t\\tvalue >>= 4;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\",\"keccak256\":\"0xec4d89ef08ad402e0c8b30b8e4e135991009384aa72f0cb7c6165721ec5050e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614dcd806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636442a5ed116100ad578063d19bcdf311610071578063d19bcdf3146102f9578063d5ddea0414610317578063da47320214610335578063dbcc4d9414610353578063f396f3d6146103715761012c565b80636442a5ed146102675780636a6128f41461028557806372b88f1b146102a1578063c1c64f0f146102d1578063cd304355146102db5761012c565b806336b01423116100f457806336b01423146101d55780634ba6348b146101f35780635aecf1891461020f5780635fc86ab91461022d57806361690b501461024b5761012c565b806303d1229c1461013157806308e7f2c51461014d5780631791bf201461016b5780632db4e5691461019b5780632dc00434146101b9575b600080fd5b61014b60048036038101906101469190613865565b61038f565b005b610155610423565b60405161016291906138c1565b60405180910390f35b610185600480360381019061018091906138dc565b610428565b6040516101929190613918565b60405180910390f35b6101a36104af565b6040516101b09190613918565b60405180910390f35b6101d360048036038101906101ce9190613933565b6104b7565b005b6101dd61055c565b6040516101ea9190613918565b60405180910390f35b61020d600480360381019061020891906139d4565b610564565b005b6102176105f8565b60405161022491906138c1565b60405180910390f35b6102356105fd565b60405161024291906138c1565b60405180910390f35b61026560048036038101906102609190613933565b610602565b005b61026f6106a7565b60405161027c9190613918565b60405180910390f35b61029f600480360381019061029a91906139d4565b6106af565b005b6102bb60048036038101906102b69190613865565b610744565b6040516102c89190613918565b60405180910390f35b6102d96107cd565b005b6102e3610948565b6040516102f091906138c1565b60405180910390f35b61030161094d565b60405161030e91906138c1565b60405180910390f35b61031f610952565b60405161032c91906138c1565b60405180910390f35b61033d610957565b60405161034a9190613918565b60405180910390f35b61035b61095f565b60405161036891906138c1565b60405180910390f35b610379610964565b6040516103869190613918565b60405180910390f35b61039761096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90613a71565b60405180910390fd5b6000801b610411816109a4565b61041e83338460006109e7565b505050565b600581565b600061043261096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049690613a71565b60405180910390fd5b6104a882610b3c565b9050919050565b631dcd650081565b6104bf61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052390613a71565b60405180910390fd5b6000801b610539816109a4565b6000610548630bebc200610b3c565b905061055781338560006109e7565b505050565b6317d7840081565b61056c61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613a71565b60405180910390fd5b6000801b6105e6816109a4565b6105f33384846000610b67565b505050565b600081565b600481565b61060a61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e90613a71565b60405180910390fd5b6000801b610684816109a4565b60006106936305f5e100610b3c565b90506106a281338560006109e7565b505050565b630bebc20081565b6106b761096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b90613a71565b60405180910390fd5b6000801b610731816109a4565b61073f333385856000610fb8565b505050565b600061074e61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290613a71565b60405180910390fd5b6107c58383611356565b905092915050565b6107d561096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990613a71565b60405180910390fd5b6000801b61084f816109a4565b6108797f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c833611370565b6108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108af90613b03565b60405180910390fd5b6108e47f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c83360006113e6565b60006108f433631dcd65006114b1565b905060008114610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093090613b95565b60405180910390fd5b610944336000611580565b5050565b600381565b600281565b600181565b6311e1a30081565b600181565b6305f5e10081565b600080610977611754565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6109ad81611781565b156109e4576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6127108161ffff161115610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2790613c27565b60405180910390fd5b6000610a3a6117b4565b90506000610a4e868563ffffffff166117e1565b9050600a6005612710600a86612710610a679190613c84565b61ffff1685610a769190613cba565b610a809190613cba565b610a8a9190613d2b565b610a949190613d5c565b610a9e9190613d2b565b90506000610aaa61096c565b90506000821115610ae657610ae58360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687838561187b565b5b60006305f5e1008089610af99190613d2b565b610b039190613cba565b9050610b0f8184611986565b610b328283898b8a63ffffffff1660405180602001604052806000815250611abc565b5050505050505050565b600080610b476117b4565b905080600501600084815260200190815260200160002054915050919050565b60008260ff161480610b7c575060018260ff16145b610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290613ddc565b60405180910390fd5b6127108161ffff161115610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb90613c27565b60405180910390fd5b6000610c0e6117b4565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca59190613e11565b600a610cb19190613f71565b90506000600a90506000600a60018385610ccb9190613cba565b610cd59190613cba565b610cdf9190613d2b565b905060008060018860ff1603610dab57600a60058585600a8d610d029190613fbc565b6fffffffffffffffffffffffffffffffff16610d1e9190613cba565b610d289190613d2b565b610d329190613d5c565b610d3c9190613d2b565b9150828483610d4b9190613cba565b610d559190613d2b565b9050600082118015610d675750600081115b610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d9061406b565b60405180910390fd5b610e3f565b82848a6fffffffffffffffffffffffffffffffff16610dca9190613cba565b610dd49190613d2b565b9050838382610de39190613cba565b610ded9190613d2b565b9150600082118015610dff5750600081115b610e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e35906140fd565b60405180910390fd5b5b600a6005612710600a8a612710610e569190613c84565b61ffff1686610e659190613cba565b610e6f9190613cba565b610e799190613d2b565b610e839190613d5c565b610e8d9190613d2b565b91506000866000016000600160ff1660ff16815260200190815260200160002090508060000154828260010154610ec49190613d5c565b1115610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efc90614169565b60405180910390fd5b818160010154610f159190613d5c565b81600101819055506000610f2761096c565b90506000841115610f6357610f628860020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d838761187b565b5b610f716317d7840085611986565b610f9281828e6317d784008760405180602001604052806000815250611abc565b828860070154610fa29190613d5c565b8860070181905550505050505050505050505050565b60008260ff161480610fcd575060018260ff16145b61100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390613ddc565b60405180910390fd5b6127108161ffff161115611055576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104c90613c27565b60405180910390fd5b600061105f6117b4565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f69190613e11565b600a6111029190613f71565b90506000600a905060006001828461111a9190613cba565b6111249190613cba565b905060008060018860ff16036111f057600a60058585600a8d6111479190613fbc565b6fffffffffffffffffffffffffffffffff166111639190613cba565b61116d9190613d2b565b6111779190613d5c565b6111819190613d2b565b91508284836111909190613cba565b61119a9190613d2b565b90506000821180156111ac5750600081115b6111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e2906141fb565b60405180910390fd5b611284565b82848a6fffffffffffffffffffffffffffffffff1661120f9190613cba565b6112199190613d2b565b90508383826112289190613cba565b6112329190613d2b565b91506000821180156112445750600081115b611283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127a9061428d565b60405180910390fd5b5b600a6005612710600a8a61271061129b9190613c84565b61ffff16866112aa9190613cba565b6112b49190613cba565b6112be9190613d2b565b6112c89190613d5c565b6112d29190613d2b565b915060006112de61096c565b9050600083111561131a576113198760020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c838661187b565b5b6113286311e1a30084611986565b6113488c8c6311e1a3008560405180602001604052806000815250611ee7565b505050505050505050505050565b6000611368838363ffffffff1661209c565b905092915050565b60008061137b6120d6565b905080600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60006113f06120d6565b90508181600001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f696f1e09104a0bef7512faf461f1a6962c3c8151a4d5979d4fdfa5112fccc519846040516114a391906142c8565b60405180910390a350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611518576040517f4a772c2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611522612103565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6127108161ffff1611156115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090613c27565b60405180910390fd5b60006115d36117b4565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a9190613e11565b600a6116769190613f71565b90506000600a6005612710600a876127106116919190613c84565b61ffff168660646116a29190613cba565b6116ac9190613cba565b6116b69190613cba565b6116c09190613d2b565b6116ca9190613d5c565b6116d49190613d2b565b905060006116e061096c565b9050600082111561171c5761171b8460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687838561187b565b5b61173e818288631dcd6500600160405180602001604052806000815250611abc565b61174c631dcd650083611986565b505050505050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b600061178b612130565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000807f1a2f703e435318ee39feac62abda44020ca215505d5ba3284195182c842a2d3090508091505090565b6000806117ec61215d565b9050600081600001600086815260200190815260200160002090506000611813828661218a565b905084826001015461182591906142e3565b826001018190555080826002015461183d9190613d5c565b8260020181905550600082600101540361186f5760008260000160006101000a81548160ff0219169083151502179055505b80935050505092915050565b60006119188573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016118b193929190614358565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff166122cb90919063ffffffff16565b9050600081511415801561193d57508080602001905181019061193b91906143bb565b155b1561197f57846040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161197691906143e8565b60405180910390fd5b5050505050565b60006119906117b4565b9050600081600101600085815260200190815260200160002060000160049054906101000a900463ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff166119f09190614403565b63ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1684611a309190613cba565b611a3a9190613d2b565b905060008184611a4a91906142e3565b9050611a7f8360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166317d78400846122f8565b81836003016000828254611a939190613d5c565b9250508190555080836004016000828254611aae9190613d5c565b925050819055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611b22576040517fa25202b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611b2d846123f9565b90506000611b3a846123f9565b9050611b4a888888858588612473565b6000611b54612103565b9050611b608187612724565b600081600001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115611bf1576040517fb38aedf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bfd8a8a8989612794565b85810382600001600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611dd85781600201600088815260200190815260200160002060009054906101000a900460ff1615611dd757858260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002054038260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020819055505b5b8582600001600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e3a9190613d5c565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611eb792919061443b565b60405180910390a4611ecd8a8a8a87878a612991565b611edb8a8a8a8a8a8a6129a7565b50505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f4d576040517fefac521700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611f58846123f9565b90506000611f65846123f9565b9050611f7687600088858588612473565b6000611f80612103565b9050611f8c8187612724565b8481600001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fee9190613d5c565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161206c92919061443b565b60405180910390a461208388600089868689612991565b612092886000898989896129a7565b5050505050505050565b6000806120a761215d565b9050600081600001600086815260200190815260200160002090506120cc818561218a565b9250505092915050565b6000807f7fb8776fdb93079091f516133d7bb98c82f37f53f39f39f153c42a90e5e5891290508091505090565b6000807fe20f5a7f7e820e4505f9ef8ed1186e372d3490e37d8001618819927829be4e0590508091505090565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b6000807f47b8e8b32475ba6530f41efddbadc333684d4f798e5f4689344334684c5f262590508091505090565b60008260000160009054906101000a900460ff166121dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d4906144d6565b60405180910390fd5b8260010154821115612224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221b90614542565b60405180910390fd5b6000600a6005600185876001015461223c91906142e3565b6122469190613d5c565b86600101546122559190613cba565b866003015486600a6122679190613cba565b6122719190613cba565b61227b9190613d2b565b6122859190613d5c565b61228f9190613d2b565b90506122c28460050154846122a49190613cba565b6122bd8660040154866122b79190613cba565b84612b6c565b612b85565b91505092915050565b60606122f08383604051806060016040528060238152602001614d7560239139612b9e565b905092915050565b6000612302612bb6565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090508060000160009054906101000a900460ff166123775750506123f4565b60008312156123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b2906145ae565b60405180910390fd5b828160020160008282546123cf91906145d8565b92505081905550828160030160008282546123ea91906145d8565b9250508190555050505b505050565b60606000600167ffffffffffffffff8111156124185761241761461c565b5b6040519080825280602002602001820160405280156124465781602001602082028036833780820191505090505b509050828160008151811061245e5761245d61464b565b5b60200260200101818152505080915050919050565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461270e5760006124b0612103565b9050600081600501905060008260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008360060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b87518110156127085760008782815181106125655761256461464b565b5b6020026020010151905060008111156126fa57600089838151811061258d5761258c61464b565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16036125fc578187600401600083815260200190815260200160002060008282546125f09190613d5c565b92505081905550612647565b816126078d836114b1565b03612646576126308c876000848152602001908152602001600020612be390919063ffffffff16565b506126448186612c1390919063ffffffff16565b505b5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16036126ac578187600401600083815260200190815260200160002060008282546126a091906142e3565b925050819055506126f8565b60006126b88c836114b1565b036126f7576126e18b876000848152602001908152602001600020612c2d90919063ffffffff16565b506126f58185612c5d90919063ffffffff16565b505b5b505b818060010192505050612547565b50505050505b61271c868686868686612c77565b505050505050565b61272d82612cc0565b81600b01600082815260200190815260200160002060009054906101000a900460ff1615612790576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612787906146c6565b60405180910390fd5b5050565b600061279e612103565b90508473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461298a578060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612895576040517f3d2f0b3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600201600084815260200190815260200160002060009054906101000a900460ff1680156129525750818160030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054105b15612989576040517f32af163800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5050505050565b61299f868686868686612d15565b505050505050565b6129c68473ffffffffffffffffffffffffffffffffffffffff16612e03565b15612b64578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612a0c959493929190614776565b6020604051808303816000875af1925050508015612a4857506040513d601f19601f82011682018060405250810190612a459190614828565b60015b612ae457612a54614862565b806308c379a003612ab05750612a686148b5565b80612a735750612ab2565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa79190614989565b60405180910390fd5b505b6040517f4eebd08100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b62576040517f542073e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b505050505050565b6000818311612b7b5781612b7d565b825b905092915050565b6000818311612b945782612b96565b815b905092915050565b6060612bad8484600085612e16565b90509392505050565b6000807ff0375085caeab71645bf74d020ee2aa37bc7b653d9e55911c1084d8c88b3c05c90508091505090565b6000612c0b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612f2f565b905092915050565b6000612c25836000018360001b612f2f565b905092915050565b6000612c55836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613013565b905092915050565b6000612c6f836000018360001b613013565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612cb857612cb685848461307a565b505b505050505050565b80600a0160009054906101000a900460ff1615612d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d09906149f7565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612d5757612d56858484600061311c565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612d9957612d98848484600161311c565b5b60005b8351811015612dfa57612ded612db06131b7565b858381518110612dc357612dc261464b565b5b60200260200101518888878681518110612de057612ddf61464b565b5b60200260200101516131ef565b8080600101915050612d9c565b50505050505050565b600080823b905060008111915050919050565b6060612e2185612e03565b612e57576040517f89c35afc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e809190614a53565b60006040518083038185875af1925050503d8060008114612ebd576040519150601f19603f3d011682016040523d82523d6000602084013e612ec2565b606091505b50915091508115612ed7578092505050612f27565b600081511115612eea5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1e9190614989565b60405180910390fd5b949350505050565b6000808360010160008481526020019081526020016000205490506000811461300c57600084600001600186600001805490500381548110612f7457612f7361464b565b5b9060005260206000200154905080856000016001840381548110612f9b57612f9a61464b565b5b906000526020600020018190555081856001016000838152602001908152602001600020819055505083600001805480612fd857612fd7614a6a565b5b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b600061301f8383613323565b6130745782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190505b92915050565b600081518351146130b7576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b835181101561311057613102858583815181106130da576130d961464b565b5b60200260200101518584815181106130f5576130f461464b565b5b6020026020010151613346565b5080806001019150506130ba565b50600190509392505050565b8151835114613157576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518110156131b0576131a38585838151811061317a5761317961464b565b5b60200260200101518584815181106131955761319461464b565b5b602002602001015185613498565b808060010191505061315a565b5050505050565b6000806131c26117b4565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006131f9612bb6565b905060008160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002090508060000160009054906101000a900460ff1661326e57505061331c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146132d9576132d88186857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6132d39190614a99565b613636565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461331957613318818585613636565b5b50505b5050505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000806133516137b7565b9050600081600001600086815260200190815260200160002090504381600101541161338257600192505050613491565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c826003015483600001546133df91906142e3565b6133e99190613d2b565b83600201548360020154436133fe91906142e3565b6134089190613d2b565b6134129190613cba565b90506000826001015461343883856003015461342e9190613d5c565b8560000154612b85565b61344291906142e3565b905080871115613487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347e90614b83565b60405180910390fd5b6001955050505050505b9392505050565b60006134a26137b7565b905060008160000160008681526020019081526020016000209050438160010154116134cf575050613630565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050438260000154116135695760018460ff1603613561578481600001600082825461353e9190613d5c565b92505081905550848160030160008282546135599190613d5c565b925050819055505b505050613630565b6000600c8260030154836000015461358191906142e3565b61358b9190613d2b565b83600201548360020154436135a091906142e3565b6135aa9190613d2b565b6135b49190613cba565b90506135d38183600301546135c99190613d5c565b8360000154612b85565b826003018190555060018560ff160361360657858260000160008282546135fa9190613d5c565b92505081905550613622565b8582600101600082825461361a9190613d5c565b925050819055505b438260020181905550505050505b50505050565b60008360040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082856001015461368d91906145d8565b12156136ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136c590614c15565b60405180910390fd5b60008282600001546136e091906145d8565b1215613721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161371890614ca7565b60405180910390fd5b6000808560010154146137505784600101548386600301546137439190614a99565b61374d9190614cc7565b90505b82856001015461376091906145d8565b856001018190555080856003015461377891906145d8565b856003018190555082826000015461379091906145d8565b82600001819055508082600101546137a89190614d31565b82600101819055505050505050565b6000807fb666c964c288db81fc3205a9feeb13cfebbde2a4a4664c45ea26ef9d3d8de79290508091505090565b6000604051905090565b600080fd5b6000819050919050565b613806816137f3565b811461381157600080fd5b50565b600081359050613823816137fd565b92915050565b600063ffffffff82169050919050565b61384281613829565b811461384d57600080fd5b50565b60008135905061385f81613839565b92915050565b6000806040838503121561387c5761387b6137ee565b5b600061388a85828601613814565b925050602061389b85828601613850565b9150509250929050565b600060ff82169050919050565b6138bb816138a5565b82525050565b60006020820190506138d660008301846138b2565b92915050565b6000602082840312156138f2576138f16137ee565b5b600061390084828501613814565b91505092915050565b613912816137f3565b82525050565b600060208201905061392d6000830184613909565b92915050565b600060208284031215613949576139486137ee565b5b600061395784828501613850565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61398581613960565b811461399057600080fd5b50565b6000813590506139a28161397c565b92915050565b6139b1816138a5565b81146139bc57600080fd5b50565b6000813590506139ce816139a8565b92915050565b600080604083850312156139eb576139ea6137ee565b5b60006139f985828601613993565b9250506020613a0a858286016139bf565b9150509250929050565b600082825260208201905092915050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b6000613a5b600b83613a14565b9150613a6682613a25565b602082019050919050565b60006020820190508181036000830152613a8a81613a4e565b9050919050565b7f4f6e6c7920616e20617070726f766564206163636f756e742063616e2062757960008201527f20746865204d6167696320746f6b656e00000000000000000000000000000000602082015250565b6000613aed603083613a14565b9150613af882613a91565b604082019050919050565b60006020820190508181036000830152613b1c81613ae0565b9050919050565b7f4f6e6c792031204d6167696320746f6b656e2063616e20626520626f7567687460008201527f206e6f7721000000000000000000000000000000000000000000000000000000602082015250565b6000613b7f602583613a14565b9150613b8a82613b23565b604082019050919050565b60006020820190508181036000830152613bae81613b72565b9050919050565b7f446973636f756e742070657263656e742063616e6e6f74206265206d6f72652060008201527f7468656e203130302c3030250000000000000000000000000000000000000000602082015250565b6000613c11602c83613a14565b9150613c1c82613bb5565b604082019050919050565b60006020820190508181036000830152613c4081613c04565b9050919050565b600061ffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c8f82613c47565b9150613c9a83613c47565b9250828203905061ffff811115613cb457613cb3613c55565b5b92915050565b6000613cc5826137f3565b9150613cd0836137f3565b9250828202613cde816137f3565b91508282048414831517613cf557613cf4613c55565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613d36826137f3565b9150613d41836137f3565b925082613d5157613d50613cfc565b5b828204905092915050565b6000613d67826137f3565b9150613d72836137f3565b9250828201905080821115613d8a57613d89613c55565b5b92915050565b7f76616c7565547970652063616e2062652030206f722031206f6e6c7921000000600082015250565b6000613dc6601d83613a14565b9150613dd182613d90565b602082019050919050565b60006020820190508181036000830152613df581613db9565b9050919050565b600081519050613e0b816139a8565b92915050565b600060208284031215613e2757613e266137ee565b5b6000613e3584828501613dfc565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115613e9557808604811115613e7157613e70613c55565b5b6001851615613e805780820291505b8081029050613e8e85613e3e565b9450613e55565b94509492505050565b600082613eae5760019050613f6a565b81613ebc5760009050613f6a565b8160018114613ed25760028114613edc57613f0b565b6001915050613f6a565b60ff841115613eee57613eed613c55565b5b8360020a915084821115613f0557613f04613c55565b5b50613f6a565b5060208310610133831016604e8410600b8410161715613f405782820a905083811115613f3b57613f3a613c55565b5b613f6a565b613f4d8484846001613e4b565b92509050818404811115613f6457613f63613c55565b5b81810290505b9392505050565b6000613f7c826137f3565b9150613f87836138a5565b9250613fb47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613e9e565b905092915050565b6000613fc782613960565b9150613fd283613960565b9250828202613fe081613960565b9150808214613ff257613ff1613c55565b5b5092915050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e00000000000000000000000000000000602082015250565b6000614055603083613a14565b915061406082613ff9565b604082019050919050565b6000602082019050818103600083015261408481614048565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e00000000000000000000000000000000602082015250565b60006140e7603083613a14565b91506140f28261408b565b604082019050919050565b60006020820190508181036000830152614116816140da565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b6000614153601883613a14565b915061415e8261411d565b602082019050919050565b6000602082019050818103600083015261418281614146565b9050919050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e21000000000000000000000000000000602082015250565b60006141e5603183613a14565b91506141f082614189565b604082019050919050565b60006020820190508181036000830152614214816141d8565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e21000000000000000000000000000000602082015250565b6000614277603183613a14565b91506142828261421b565b604082019050919050565b600060208201905081810360008301526142a68161426a565b9050919050565b60008115159050919050565b6142c2816142ad565b82525050565b60006020820190506142dd60008301846142b9565b92915050565b60006142ee826137f3565b91506142f9836137f3565b925082820390508181111561431157614310613c55565b5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061434282614317565b9050919050565b61435281614337565b82525050565b600060608201905061436d6000830186614349565b61437a6020830185614349565b6143876040830184613909565b949350505050565b614398816142ad565b81146143a357600080fd5b50565b6000815190506143b58161438f565b92915050565b6000602082840312156143d1576143d06137ee565b5b60006143df848285016143a6565b91505092915050565b60006020820190506143fd6000830184614349565b92915050565b600061440e82613829565b915061441983613829565b9250828201905063ffffffff81111561443557614434613c55565b5b92915050565b60006040820190506144506000830185613909565b61445d6020830184613909565b9392505050565b7f43616c63756c6174696f6e206973206e6f7420656e61626c656420666f72207460008201527f686520746f6b656e210000000000000000000000000000000000000000000000602082015250565b60006144c0602983613a14565b91506144cb82614464565b604082019050919050565b600060208201905081810360008301526144ef816144b3565b9050919050565b7f4e6f7420656e6f75676874207175616e74697479206c65667421000000000000600082015250565b600061452c601a83613a14565b9150614537826144f6565b602082019050919050565b6000602082019050818103600083015261455b8161451f565b9050919050565b7f506f6f6c2063616e206f6e6c7920696e63726561736521000000000000000000600082015250565b6000614598601783613a14565b91506145a382614562565b602082019050919050565b600060208201905081810360008301526145c78161458b565b9050919050565b6000819050919050565b60006145e3826145ce565b91506145ee836145ce565b92508282019050828112156000831216838212600084121516171561461657614615613c55565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546f6b656e206973207061757365642100000000000000000000000000000000600082015250565b60006146b0601083613a14565b91506146bb8261467a565b602082019050919050565b600060208201905081810360008301526146df816146a3565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614720578082015181840152602081019050614705565b60008484015250505050565b6000601f19601f8301169050919050565b6000614748826146e6565b61475281856146f1565b9350614762818560208601614702565b61476b8161472c565b840191505092915050565b600060a08201905061478b6000830188614349565b6147986020830187614349565b6147a56040830186613909565b6147b26060830185613909565b81810360808301526147c4818461473d565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614805816147d0565b811461481057600080fd5b50565b600081519050614822816147fc565b92915050565b60006020828403121561483e5761483d6137ee565b5b600061484c84828501614813565b91505092915050565b60008160e01c9050919050565b600060033d11156148815760046000803e61487e600051614855565b90505b90565b61488d8261472c565b810181811067ffffffffffffffff821117156148ac576148ab61461c565b5b80604052505050565b600060443d10614942576148c76137e4565b60043d036004823e80513d602482011167ffffffffffffffff821117156148ef575050614942565b808201805167ffffffffffffffff81111561490d5750505050614942565b80602083010160043d03850181111561492a575050505050614942565b61493982602001850186614884565b82955050505050505b90565b600081519050919050565b600061495b82614945565b6149658185613a14565b9350614975818560208601614702565b61497e8161472c565b840191505092915050565b600060208201905081810360008301526149a38184614950565b905092915050565b7f416c6c20746f6b656e2069732070617573656421000000000000000000000000600082015250565b60006149e1601483613a14565b91506149ec826149ab565b602082019050919050565b60006020820190508181036000830152614a10816149d4565b9050919050565b600081905092915050565b6000614a2d826146e6565b614a378185614a17565b9350614a47818560208601614702565b80840191505092915050565b6000614a5f8284614a22565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000614aa4826145ce565b9150614aaf836145ce565b9250828202614abd816145ce565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615614af557614af4613c55565b5b8282058414831517614b0a57614b09613c55565b5b5092915050565b7f54686520616d6f756e7420697320677261746572207468656e2074686520616360008201527f63756d6c6174656420282773656c6c61626c65272920616d6f756e7421000000602082015250565b6000614b6d603d83613a14565b9150614b7882614b11565b604082019050919050565b60006020820190508181036000830152614b9c81614b60565b9050919050565b7f506f6f6c20746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000614bff602b83613a14565b9150614c0a82614ba3565b604082019050919050565b60006020820190508181036000830152614c2e81614bf2565b9050919050565b7f5573657220746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000614c91602b83613a14565b9150614c9c82614c35565b604082019050919050565b60006020820190508181036000830152614cc081614c84565b9050919050565b6000614cd2826145ce565b9150614cdd836145ce565b925082614ced57614cec613cfc565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615614d2657614d25613c55565b5b828205905092915050565b6000614d3c826145ce565b9150614d47836145ce565b9250828203905081811260008412168282136000851215161715614d6e57614d6d613c55565b5b9291505056fe416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6ca26469706673582212206aa761fd70d18cd980e5bbb5e74352828ce3a291f2b0fc021f68e7590e5c156264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636442a5ed116100ad578063d19bcdf311610071578063d19bcdf3146102f9578063d5ddea0414610317578063da47320214610335578063dbcc4d9414610353578063f396f3d6146103715761012c565b80636442a5ed146102675780636a6128f41461028557806372b88f1b146102a1578063c1c64f0f146102d1578063cd304355146102db5761012c565b806336b01423116100f457806336b01423146101d55780634ba6348b146101f35780635aecf1891461020f5780635fc86ab91461022d57806361690b501461024b5761012c565b806303d1229c1461013157806308e7f2c51461014d5780631791bf201461016b5780632db4e5691461019b5780632dc00434146101b9575b600080fd5b61014b60048036038101906101469190613865565b61038f565b005b610155610423565b60405161016291906138c1565b60405180910390f35b610185600480360381019061018091906138dc565b610428565b6040516101929190613918565b60405180910390f35b6101a36104af565b6040516101b09190613918565b60405180910390f35b6101d360048036038101906101ce9190613933565b6104b7565b005b6101dd61055c565b6040516101ea9190613918565b60405180910390f35b61020d600480360381019061020891906139d4565b610564565b005b6102176105f8565b60405161022491906138c1565b60405180910390f35b6102356105fd565b60405161024291906138c1565b60405180910390f35b61026560048036038101906102609190613933565b610602565b005b61026f6106a7565b60405161027c9190613918565b60405180910390f35b61029f600480360381019061029a91906139d4565b6106af565b005b6102bb60048036038101906102b69190613865565b610744565b6040516102c89190613918565b60405180910390f35b6102d96107cd565b005b6102e3610948565b6040516102f091906138c1565b60405180910390f35b61030161094d565b60405161030e91906138c1565b60405180910390f35b61031f610952565b60405161032c91906138c1565b60405180910390f35b61033d610957565b60405161034a9190613918565b60405180910390f35b61035b61095f565b60405161036891906138c1565b60405180910390f35b610379610964565b6040516103869190613918565b60405180910390f35b61039761096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90613a71565b60405180910390fd5b6000801b610411816109a4565b61041e83338460006109e7565b505050565b600581565b600061043261096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049690613a71565b60405180910390fd5b6104a882610b3c565b9050919050565b631dcd650081565b6104bf61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052390613a71565b60405180910390fd5b6000801b610539816109a4565b6000610548630bebc200610b3c565b905061055781338560006109e7565b505050565b6317d7840081565b61056c61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613a71565b60405180910390fd5b6000801b6105e6816109a4565b6105f33384846000610b67565b505050565b600081565b600481565b61060a61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e90613a71565b60405180910390fd5b6000801b610684816109a4565b60006106936305f5e100610b3c565b90506106a281338560006109e7565b505050565b630bebc20081565b6106b761096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b90613a71565b60405180910390fd5b6000801b610731816109a4565b61073f333385856000610fb8565b505050565b600061074e61096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290613a71565b60405180910390fd5b6107c58383611356565b905092915050565b6107d561096c565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990613a71565b60405180910390fd5b6000801b61084f816109a4565b6108797f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c833611370565b6108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108af90613b03565b60405180910390fd5b6108e47f6d6775b5e502c1f5932b823e8901beec555ffec897aad6fd00846e01363884c83360006113e6565b60006108f433631dcd65006114b1565b905060008114610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093090613b95565b60405180910390fd5b610944336000611580565b5050565b600381565b600281565b600181565b6311e1a30081565b600181565b6305f5e10081565b600080610977611754565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6109ad81611781565b156109e4576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6127108161ffff161115610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2790613c27565b60405180910390fd5b6000610a3a6117b4565b90506000610a4e868563ffffffff166117e1565b9050600a6005612710600a86612710610a679190613c84565b61ffff1685610a769190613cba565b610a809190613cba565b610a8a9190613d2b565b610a949190613d5c565b610a9e9190613d2b565b90506000610aaa61096c565b90506000821115610ae657610ae58360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687838561187b565b5b60006305f5e1008089610af99190613d2b565b610b039190613cba565b9050610b0f8184611986565b610b328283898b8a63ffffffff1660405180602001604052806000815250611abc565b5050505050505050565b600080610b476117b4565b905080600501600084815260200190815260200160002054915050919050565b60008260ff161480610b7c575060018260ff16145b610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290613ddc565b60405180910390fd5b6127108161ffff161115610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb90613c27565b60405180910390fd5b6000610c0e6117b4565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca59190613e11565b600a610cb19190613f71565b90506000600a90506000600a60018385610ccb9190613cba565b610cd59190613cba565b610cdf9190613d2b565b905060008060018860ff1603610dab57600a60058585600a8d610d029190613fbc565b6fffffffffffffffffffffffffffffffff16610d1e9190613cba565b610d289190613d2b565b610d329190613d5c565b610d3c9190613d2b565b9150828483610d4b9190613cba565b610d559190613d2b565b9050600082118015610d675750600081115b610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d9061406b565b60405180910390fd5b610e3f565b82848a6fffffffffffffffffffffffffffffffff16610dca9190613cba565b610dd49190613d2b565b9050838382610de39190613cba565b610ded9190613d2b565b9150600082118015610dff5750600081115b610e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e35906140fd565b60405180910390fd5b5b600a6005612710600a8a612710610e569190613c84565b61ffff1686610e659190613cba565b610e6f9190613cba565b610e799190613d2b565b610e839190613d5c565b610e8d9190613d2b565b91506000866000016000600160ff1660ff16815260200190815260200160002090508060000154828260010154610ec49190613d5c565b1115610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efc90614169565b60405180910390fd5b818160010154610f159190613d5c565b81600101819055506000610f2761096c565b90506000841115610f6357610f628860020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d838761187b565b5b610f716317d7840085611986565b610f9281828e6317d784008760405180602001604052806000815250611abc565b828860070154610fa29190613d5c565b8860070181905550505050505050505050505050565b60008260ff161480610fcd575060018260ff16145b61100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390613ddc565b60405180910390fd5b6127108161ffff161115611055576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104c90613c27565b60405180910390fd5b600061105f6117b4565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f69190613e11565b600a6111029190613f71565b90506000600a905060006001828461111a9190613cba565b6111249190613cba565b905060008060018860ff16036111f057600a60058585600a8d6111479190613fbc565b6fffffffffffffffffffffffffffffffff166111639190613cba565b61116d9190613d2b565b6111779190613d5c565b6111819190613d2b565b91508284836111909190613cba565b61119a9190613d2b565b90506000821180156111ac5750600081115b6111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e2906141fb565b60405180910390fd5b611284565b82848a6fffffffffffffffffffffffffffffffff1661120f9190613cba565b6112199190613d2b565b90508383826112289190613cba565b6112329190613d2b565b91506000821180156112445750600081115b611283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127a9061428d565b60405180910390fd5b5b600a6005612710600a8a61271061129b9190613c84565b61ffff16866112aa9190613cba565b6112b49190613cba565b6112be9190613d2b565b6112c89190613d5c565b6112d29190613d2b565b915060006112de61096c565b9050600083111561131a576113198760020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c838661187b565b5b6113286311e1a30084611986565b6113488c8c6311e1a3008560405180602001604052806000815250611ee7565b505050505050505050505050565b6000611368838363ffffffff1661209c565b905092915050565b60008061137b6120d6565b905080600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60006113f06120d6565b90508181600001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f696f1e09104a0bef7512faf461f1a6962c3c8151a4d5979d4fdfa5112fccc519846040516114a391906142c8565b60405180910390a350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611518576040517f4a772c2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611522612103565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6127108161ffff1611156115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090613c27565b60405180910390fd5b60006115d36117b4565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a9190613e11565b600a6116769190613f71565b90506000600a6005612710600a876127106116919190613c84565b61ffff168660646116a29190613cba565b6116ac9190613cba565b6116b69190613cba565b6116c09190613d2b565b6116ca9190613d5c565b6116d49190613d2b565b905060006116e061096c565b9050600082111561171c5761171b8460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687838561187b565b5b61173e818288631dcd6500600160405180602001604052806000815250611abc565b61174c631dcd650083611986565b505050505050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b600061178b612130565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000807f1a2f703e435318ee39feac62abda44020ca215505d5ba3284195182c842a2d3090508091505090565b6000806117ec61215d565b9050600081600001600086815260200190815260200160002090506000611813828661218a565b905084826001015461182591906142e3565b826001018190555080826002015461183d9190613d5c565b8260020181905550600082600101540361186f5760008260000160006101000a81548160ff0219169083151502179055505b80935050505092915050565b60006119188573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016118b193929190614358565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff166122cb90919063ffffffff16565b9050600081511415801561193d57508080602001905181019061193b91906143bb565b155b1561197f57846040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161197691906143e8565b60405180910390fd5b5050505050565b60006119906117b4565b9050600081600101600085815260200190815260200160002060000160049054906101000a900463ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff166119f09190614403565b63ffffffff1682600101600086815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1684611a309190613cba565b611a3a9190613d2b565b905060008184611a4a91906142e3565b9050611a7f8360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166317d78400846122f8565b81836003016000828254611a939190613d5c565b9250508190555080836004016000828254611aae9190613d5c565b925050819055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611b22576040517fa25202b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611b2d846123f9565b90506000611b3a846123f9565b9050611b4a888888858588612473565b6000611b54612103565b9050611b608187612724565b600081600001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115611bf1576040517fb38aedf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bfd8a8a8989612794565b85810382600001600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611dd85781600201600088815260200190815260200160002060009054906101000a900460ff1615611dd757858260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002054038260030160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020819055505b5b8582600001600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e3a9190613d5c565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611eb792919061443b565b60405180910390a4611ecd8a8a8a87878a612991565b611edb8a8a8a8a8a8a6129a7565b50505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f4d576040517fefac521700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611f58846123f9565b90506000611f65846123f9565b9050611f7687600088858588612473565b6000611f80612103565b9050611f8c8187612724565b8481600001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fee9190613d5c565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161206c92919061443b565b60405180910390a461208388600089868689612991565b612092886000898989896129a7565b5050505050505050565b6000806120a761215d565b9050600081600001600086815260200190815260200160002090506120cc818561218a565b9250505092915050565b6000807f7fb8776fdb93079091f516133d7bb98c82f37f53f39f39f153c42a90e5e5891290508091505090565b6000807fe20f5a7f7e820e4505f9ef8ed1186e372d3490e37d8001618819927829be4e0590508091505090565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b6000807f47b8e8b32475ba6530f41efddbadc333684d4f798e5f4689344334684c5f262590508091505090565b60008260000160009054906101000a900460ff166121dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d4906144d6565b60405180910390fd5b8260010154821115612224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221b90614542565b60405180910390fd5b6000600a6005600185876001015461223c91906142e3565b6122469190613d5c565b86600101546122559190613cba565b866003015486600a6122679190613cba565b6122719190613cba565b61227b9190613d2b565b6122859190613d5c565b61228f9190613d2b565b90506122c28460050154846122a49190613cba565b6122bd8660040154866122b79190613cba565b84612b6c565b612b85565b91505092915050565b60606122f08383604051806060016040528060238152602001614d7560239139612b9e565b905092915050565b6000612302612bb6565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090508060000160009054906101000a900460ff166123775750506123f4565b60008312156123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b2906145ae565b60405180910390fd5b828160020160008282546123cf91906145d8565b92505081905550828160030160008282546123ea91906145d8565b9250508190555050505b505050565b60606000600167ffffffffffffffff8111156124185761241761461c565b5b6040519080825280602002602001820160405280156124465781602001602082028036833780820191505090505b509050828160008151811061245e5761245d61464b565b5b60200260200101818152505080915050919050565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461270e5760006124b0612103565b9050600081600501905060008260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008360060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b87518110156127085760008782815181106125655761256461464b565b5b6020026020010151905060008111156126fa57600089838151811061258d5761258c61464b565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16036125fc578187600401600083815260200190815260200160002060008282546125f09190613d5c565b92505081905550612647565b816126078d836114b1565b03612646576126308c876000848152602001908152602001600020612be390919063ffffffff16565b506126448186612c1390919063ffffffff16565b505b5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16036126ac578187600401600083815260200190815260200160002060008282546126a091906142e3565b925050819055506126f8565b60006126b88c836114b1565b036126f7576126e18b876000848152602001908152602001600020612c2d90919063ffffffff16565b506126f58185612c5d90919063ffffffff16565b505b5b505b818060010192505050612547565b50505050505b61271c868686868686612c77565b505050505050565b61272d82612cc0565b81600b01600082815260200190815260200160002060009054906101000a900460ff1615612790576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612787906146c6565b60405180910390fd5b5050565b600061279e612103565b90508473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461298a578060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612895576040517f3d2f0b3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600201600084815260200190815260200160002060009054906101000a900460ff1680156129525750818160030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054105b15612989576040517f32af163800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5050505050565b61299f868686868686612d15565b505050505050565b6129c68473ffffffffffffffffffffffffffffffffffffffff16612e03565b15612b64578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612a0c959493929190614776565b6020604051808303816000875af1925050508015612a4857506040513d601f19601f82011682018060405250810190612a459190614828565b60015b612ae457612a54614862565b806308c379a003612ab05750612a686148b5565b80612a735750612ab2565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa79190614989565b60405180910390fd5b505b6040517f4eebd08100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b62576040517f542073e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b505050505050565b6000818311612b7b5781612b7d565b825b905092915050565b6000818311612b945782612b96565b815b905092915050565b6060612bad8484600085612e16565b90509392505050565b6000807ff0375085caeab71645bf74d020ee2aa37bc7b653d9e55911c1084d8c88b3c05c90508091505090565b6000612c0b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612f2f565b905092915050565b6000612c25836000018360001b612f2f565b905092915050565b6000612c55836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613013565b905092915050565b6000612c6f836000018360001b613013565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612cb857612cb685848461307a565b505b505050505050565b80600a0160009054906101000a900460ff1615612d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d09906149f7565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612d5757612d56858484600061311c565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612d9957612d98848484600161311c565b5b60005b8351811015612dfa57612ded612db06131b7565b858381518110612dc357612dc261464b565b5b60200260200101518888878681518110612de057612ddf61464b565b5b60200260200101516131ef565b8080600101915050612d9c565b50505050505050565b600080823b905060008111915050919050565b6060612e2185612e03565b612e57576040517f89c35afc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e809190614a53565b60006040518083038185875af1925050503d8060008114612ebd576040519150601f19603f3d011682016040523d82523d6000602084013e612ec2565b606091505b50915091508115612ed7578092505050612f27565b600081511115612eea5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1e9190614989565b60405180910390fd5b949350505050565b6000808360010160008481526020019081526020016000205490506000811461300c57600084600001600186600001805490500381548110612f7457612f7361464b565b5b9060005260206000200154905080856000016001840381548110612f9b57612f9a61464b565b5b906000526020600020018190555081856001016000838152602001908152602001600020819055505083600001805480612fd857612fd7614a6a565b5b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b600061301f8383613323565b6130745782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190505b92915050565b600081518351146130b7576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b835181101561311057613102858583815181106130da576130d961464b565b5b60200260200101518584815181106130f5576130f461464b565b5b6020026020010151613346565b5080806001019150506130ba565b50600190509392505050565b8151835114613157576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518110156131b0576131a38585838151811061317a5761317961464b565b5b60200260200101518584815181106131955761319461464b565b5b602002602001015185613498565b808060010191505061315a565b5050505050565b6000806131c26117b4565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006131f9612bb6565b905060008160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002090508060000160009054906101000a900460ff1661326e57505061331c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146132d9576132d88186857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6132d39190614a99565b613636565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461331957613318818585613636565b5b50505b5050505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000806133516137b7565b9050600081600001600086815260200190815260200160002090504381600101541161338257600192505050613491565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c826003015483600001546133df91906142e3565b6133e99190613d2b565b83600201548360020154436133fe91906142e3565b6134089190613d2b565b6134129190613cba565b90506000826001015461343883856003015461342e9190613d5c565b8560000154612b85565b61344291906142e3565b905080871115613487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347e90614b83565b60405180910390fd5b6001955050505050505b9392505050565b60006134a26137b7565b905060008160000160008681526020019081526020016000209050438160010154116134cf575050613630565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050438260000154116135695760018460ff1603613561578481600001600082825461353e9190613d5c565b92505081905550848160030160008282546135599190613d5c565b925050819055505b505050613630565b6000600c8260030154836000015461358191906142e3565b61358b9190613d2b565b83600201548360020154436135a091906142e3565b6135aa9190613d2b565b6135b49190613cba565b90506135d38183600301546135c99190613d5c565b8360000154612b85565b826003018190555060018560ff160361360657858260000160008282546135fa9190613d5c565b92505081905550613622565b8582600101600082825461361a9190613d5c565b925050819055505b438260020181905550505050505b50505050565b60008360040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082856001015461368d91906145d8565b12156136ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136c590614c15565b60405180910390fd5b60008282600001546136e091906145d8565b1215613721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161371890614ca7565b60405180910390fd5b6000808560010154146137505784600101548386600301546137439190614a99565b61374d9190614cc7565b90505b82856001015461376091906145d8565b856001018190555080856003015461377891906145d8565b856003018190555082826000015461379091906145d8565b82600001819055508082600101546137a89190614d31565b82600101819055505050505050565b6000807fb666c964c288db81fc3205a9feeb13cfebbde2a4a4664c45ea26ef9d3d8de79290508091505090565b6000604051905090565b600080fd5b6000819050919050565b613806816137f3565b811461381157600080fd5b50565b600081359050613823816137fd565b92915050565b600063ffffffff82169050919050565b61384281613829565b811461384d57600080fd5b50565b60008135905061385f81613839565b92915050565b6000806040838503121561387c5761387b6137ee565b5b600061388a85828601613814565b925050602061389b85828601613850565b9150509250929050565b600060ff82169050919050565b6138bb816138a5565b82525050565b60006020820190506138d660008301846138b2565b92915050565b6000602082840312156138f2576138f16137ee565b5b600061390084828501613814565b91505092915050565b613912816137f3565b82525050565b600060208201905061392d6000830184613909565b92915050565b600060208284031215613949576139486137ee565b5b600061395784828501613850565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61398581613960565b811461399057600080fd5b50565b6000813590506139a28161397c565b92915050565b6139b1816138a5565b81146139bc57600080fd5b50565b6000813590506139ce816139a8565b92915050565b600080604083850312156139eb576139ea6137ee565b5b60006139f985828601613993565b9250506020613a0a858286016139bf565b9150509250929050565b600082825260208201905092915050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b6000613a5b600b83613a14565b9150613a6682613a25565b602082019050919050565b60006020820190508181036000830152613a8a81613a4e565b9050919050565b7f4f6e6c7920616e20617070726f766564206163636f756e742063616e2062757960008201527f20746865204d6167696320746f6b656e00000000000000000000000000000000602082015250565b6000613aed603083613a14565b9150613af882613a91565b604082019050919050565b60006020820190508181036000830152613b1c81613ae0565b9050919050565b7f4f6e6c792031204d6167696320746f6b656e2063616e20626520626f7567687460008201527f206e6f7721000000000000000000000000000000000000000000000000000000602082015250565b6000613b7f602583613a14565b9150613b8a82613b23565b604082019050919050565b60006020820190508181036000830152613bae81613b72565b9050919050565b7f446973636f756e742070657263656e742063616e6e6f74206265206d6f72652060008201527f7468656e203130302c3030250000000000000000000000000000000000000000602082015250565b6000613c11602c83613a14565b9150613c1c82613bb5565b604082019050919050565b60006020820190508181036000830152613c4081613c04565b9050919050565b600061ffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c8f82613c47565b9150613c9a83613c47565b9250828203905061ffff811115613cb457613cb3613c55565b5b92915050565b6000613cc5826137f3565b9150613cd0836137f3565b9250828202613cde816137f3565b91508282048414831517613cf557613cf4613c55565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613d36826137f3565b9150613d41836137f3565b925082613d5157613d50613cfc565b5b828204905092915050565b6000613d67826137f3565b9150613d72836137f3565b9250828201905080821115613d8a57613d89613c55565b5b92915050565b7f76616c7565547970652063616e2062652030206f722031206f6e6c7921000000600082015250565b6000613dc6601d83613a14565b9150613dd182613d90565b602082019050919050565b60006020820190508181036000830152613df581613db9565b9050919050565b600081519050613e0b816139a8565b92915050565b600060208284031215613e2757613e266137ee565b5b6000613e3584828501613dfc565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115613e9557808604811115613e7157613e70613c55565b5b6001851615613e805780820291505b8081029050613e8e85613e3e565b9450613e55565b94509492505050565b600082613eae5760019050613f6a565b81613ebc5760009050613f6a565b8160018114613ed25760028114613edc57613f0b565b6001915050613f6a565b60ff841115613eee57613eed613c55565b5b8360020a915084821115613f0557613f04613c55565b5b50613f6a565b5060208310610133831016604e8410600b8410161715613f405782820a905083811115613f3b57613f3a613c55565b5b613f6a565b613f4d8484846001613e4b565b92509050818404811115613f6457613f63613c55565b5b81810290505b9392505050565b6000613f7c826137f3565b9150613f87836138a5565b9250613fb47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613e9e565b905092915050565b6000613fc782613960565b9150613fd283613960565b9250828202613fe081613960565b9150808214613ff257613ff1613c55565b5b5092915050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e00000000000000000000000000000000602082015250565b6000614055603083613a14565b915061406082613ff9565b604082019050919050565b6000602082019050818103600083015261408481614048565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e00000000000000000000000000000000602082015250565b60006140e7603083613a14565b91506140f28261408b565b604082019050919050565b60006020820190508181036000830152614116816140da565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b6000614153601883613a14565b915061415e8261411d565b602082019050919050565b6000602082019050818103600083015261418281614146565b9050919050565b7f54686520696e707574207175616e7469747920697320746f6f20736d616c6c2060008201527f666f7220706179696e6720746f6b656e21000000000000000000000000000000602082015250565b60006141e5603183613a14565b91506141f082614189565b604082019050919050565b60006020820190508181036000830152614214816141d8565b9050919050565b7f54686520696e70757420616d6f756e7420697320746f6f20736d616c6c20666f60008201527f7220627579696e67206120746f6b656e21000000000000000000000000000000602082015250565b6000614277603183613a14565b91506142828261421b565b604082019050919050565b600060208201905081810360008301526142a68161426a565b9050919050565b60008115159050919050565b6142c2816142ad565b82525050565b60006020820190506142dd60008301846142b9565b92915050565b60006142ee826137f3565b91506142f9836137f3565b925082820390508181111561431157614310613c55565b5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061434282614317565b9050919050565b61435281614337565b82525050565b600060608201905061436d6000830186614349565b61437a6020830185614349565b6143876040830184613909565b949350505050565b614398816142ad565b81146143a357600080fd5b50565b6000815190506143b58161438f565b92915050565b6000602082840312156143d1576143d06137ee565b5b60006143df848285016143a6565b91505092915050565b60006020820190506143fd6000830184614349565b92915050565b600061440e82613829565b915061441983613829565b9250828201905063ffffffff81111561443557614434613c55565b5b92915050565b60006040820190506144506000830185613909565b61445d6020830184613909565b9392505050565b7f43616c63756c6174696f6e206973206e6f7420656e61626c656420666f72207460008201527f686520746f6b656e210000000000000000000000000000000000000000000000602082015250565b60006144c0602983613a14565b91506144cb82614464565b604082019050919050565b600060208201905081810360008301526144ef816144b3565b9050919050565b7f4e6f7420656e6f75676874207175616e74697479206c65667421000000000000600082015250565b600061452c601a83613a14565b9150614537826144f6565b602082019050919050565b6000602082019050818103600083015261455b8161451f565b9050919050565b7f506f6f6c2063616e206f6e6c7920696e63726561736521000000000000000000600082015250565b6000614598601783613a14565b91506145a382614562565b602082019050919050565b600060208201905081810360008301526145c78161458b565b9050919050565b6000819050919050565b60006145e3826145ce565b91506145ee836145ce565b92508282019050828112156000831216838212600084121516171561461657614615613c55565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546f6b656e206973207061757365642100000000000000000000000000000000600082015250565b60006146b0601083613a14565b91506146bb8261467a565b602082019050919050565b600060208201905081810360008301526146df816146a3565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614720578082015181840152602081019050614705565b60008484015250505050565b6000601f19601f8301169050919050565b6000614748826146e6565b61475281856146f1565b9350614762818560208601614702565b61476b8161472c565b840191505092915050565b600060a08201905061478b6000830188614349565b6147986020830187614349565b6147a56040830186613909565b6147b26060830185613909565b81810360808301526147c4818461473d565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614805816147d0565b811461481057600080fd5b50565b600081519050614822816147fc565b92915050565b60006020828403121561483e5761483d6137ee565b5b600061484c84828501614813565b91505092915050565b60008160e01c9050919050565b600060033d11156148815760046000803e61487e600051614855565b90505b90565b61488d8261472c565b810181811067ffffffffffffffff821117156148ac576148ab61461c565b5b80604052505050565b600060443d10614942576148c76137e4565b60043d036004823e80513d602482011167ffffffffffffffff821117156148ef575050614942565b808201805167ffffffffffffffff81111561490d5750505050614942565b80602083010160043d03850181111561492a575050505050614942565b61493982602001850186614884565b82955050505050505b90565b600081519050919050565b600061495b82614945565b6149658185613a14565b9350614975818560208601614702565b61497e8161472c565b840191505092915050565b600060208201905081810360008301526149a38184614950565b905092915050565b7f416c6c20746f6b656e2069732070617573656421000000000000000000000000600082015250565b60006149e1601483613a14565b91506149ec826149ab565b602082019050919050565b60006020820190508181036000830152614a10816149d4565b9050919050565b600081905092915050565b6000614a2d826146e6565b614a378185614a17565b9350614a47818560208601614702565b80840191505092915050565b6000614a5f8284614a22565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000614aa4826145ce565b9150614aaf836145ce565b9250828202614abd816145ce565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615614af557614af4613c55565b5b8282058414831517614b0a57614b09613c55565b5b5092915050565b7f54686520616d6f756e7420697320677261746572207468656e2074686520616360008201527f63756d6c6174656420282773656c6c61626c65272920616d6f756e7421000000602082015250565b6000614b6d603d83613a14565b9150614b7882614b11565b604082019050919050565b60006020820190508181036000830152614b9c81614b60565b9050919050565b7f506f6f6c20746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000614bff602b83613a14565b9150614c0a82614ba3565b604082019050919050565b60006020820190508181036000830152614c2e81614bf2565b9050919050565b7f5573657220746f6b656e207175616e6974792063616e2774206265206c65737360008201527f207468656e207a65726f21000000000000000000000000000000000000000000602082015250565b6000614c91602b83613a14565b9150614c9c82614c35565b604082019050919050565b60006020820190508181036000830152614cc081614c84565b9050919050565b6000614cd2826145ce565b9150614cdd836145ce565b925082614ced57614cec613cfc565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615614d2657614d25613c55565b5b828205905092915050565b6000614d3c826145ce565b9150614d47836145ce565b9250828203905081811260008412168282136000851215161715614d6e57614d6d613c55565b5b9291505056fe416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6ca26469706673582212206aa761fd70d18cd980e5bbb5e74352828ce3a291f2b0fc021f68e7590e5c156264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}