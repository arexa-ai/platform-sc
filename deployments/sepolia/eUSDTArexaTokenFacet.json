{
  "address": "0x13c2C707790a4959d9F784B81Ece89cF2d97702C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Extended__ExcessiveAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Extended__InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetedPausable__TargetedPaused",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowance_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd73912529902d156d5cc0eb0d8f5bd33e6e1054a69f6d8e5a101ea954d74507c",
  "receipt": {
    "to": null,
    "from": "0xe71fFa7CEdB046C409813C86eC5C728c3E62fE03",
    "contractAddress": "0x13c2C707790a4959d9F784B81Ece89cF2d97702C",
    "transactionIndex": 46,
    "gasUsed": "2072541",
    "logsBloom": "0x
    "blockHash": "0x9046d504af6c4623bf9e1adf69b7b2f805daeaeb9d14dc05d1de39278af5838d",
    "transactionHash": "0xd73912529902d156d5cc0eb0d8f5bd33e6e1054a69f6d8e5a101ea954d74507c",
    "logs": [],
    "blockNumber": 6371433,
    "cumulativeGasUsed": "12307413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "bc848e6cb624520c9014913911676d9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Extended__ExcessiveAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Extended__InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetedPausable__TargetedPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"holder\":\"approver of allowance\",\"spender\":\"recipient of allowance\"},\"returns\":{\"allowance_\":\"token allowance\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens approved for spending\",\"spender\":\"recipient of allowance\"},\"returns\":{\"status_\":\"success status (always true; otherwise function should revert)\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"balance_\":\"token balance\"}},\"decimals()\":{\"returns\":{\"_0\":\"token decimals\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"amount\":\"quantity by which to decrease allowance\",\"spender\":\"address whose allowance to decrease\"},\"returns\":{\"_0\":\"success status (always true; otherwise function will revert)\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"amount\":\"quantity by which to increase allowance\",\"spender\":\"address whose allowance to increase\"},\"returns\":{\"_0\":\"success status (always true; otherwise function will revert)\"}},\"name()\":{\"returns\":{\"_0\":\"token name\"}},\"symbol()\":{\"returns\":{\"_0\":\"token symbol\"}},\"totalSupply()\":{\"returns\":{\"totalSupply_\":\"token supply\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens transferred\",\"recipient\":\"beneficiary of transfer\"},\"returns\":{\"status_\":\"success status (always true; otherwise function should revert)\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"holder\":\"holder of tokens prior to transfer\",\"recipient\":\"beneficiary of token transfer\"},\"returns\":{\"status_\":\"success status (always true; otherwise function should revert)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"query the allowance granted from given holder to given spender\"},\"approve(address,uint256)\":{\"notice\":\"enable spender to spend tokens on behalf of holder\"},\"balanceOf(address)\":{\"notice\":\"query the token balance of given account\"},\"decimals()\":{\"notice\":\"return token decimals, generally used only for display purposes\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"decrease spend amount granted to spender\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"increase spend amount granted to spender\"},\"name()\":{\"notice\":\"return token name\"},\"symbol()\":{\"notice\":\"return token symbol\"},\"totalSupply()\":{\"notice\":\"query the total minted token supply\"},\"transfer(address,uint256)\":{\"notice\":\"transfer tokens from holder to recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer tokens to given recipient on behalf of given holder\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArexaToken/ArexaTokenFacet.sol\":\"ArexaTokenFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ArexaToken/ArexaTokenFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { uSmartERC20 } from \\\"../base/ERC20Token/ERC20Token.sol\\\";\\r\\n\\r\\ncontract ArexaTokenFacet is uSmartERC20 {}\\r\\n\",\"keccak256\":\"0x5542a247b3e2069d1951a9aedf8dd85b679d4ba90a8f4cb7fb6f2c983630d3d9\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibAccessControlStorage.sol\\\";\\r\\n\\r\\nimport { IERC173 } from \\\"../../interfaces/IERC173.sol\\\";\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { UintUtils } from \\\"../../utils/UintUtils.sol\\\";\\r\\nimport { AddressUtils } from \\\"../../utils/AddressUtils.sol\\\";\\r\\n\\r\\nlibrary LibAccessControl {\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing UintUtils for uint256;\\r\\n\\tusing AddressUtils for address;\\r\\n\\r\\n\\terror Ownable__NotOwner();\\r\\n\\terror Ownable__NotTransitiveOwner();\\r\\n\\r\\n\\terror AccessDenied(bytes32 role, address account);\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\tevent RoleAdminChanged(address indexed owner, bytes32 role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\tevent RoleRevoked(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\r\\n\\tbytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n\\tfunction _setOwner(address _newOwner) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\taddress previousOwner = acls.owner;\\r\\n\\t\\tacls.owner = _newOwner;\\r\\n\\r\\n\\t\\t//Init DEFAULT_ADMIN_ROLE to _newOwner\\r\\n\\t\\tLibAccessControl._grantRole(LibAccessControl.DEFAULT_ADMIN_ROLE, _newOwner);\\r\\n\\r\\n\\t\\temit OwnershipTransferred(previousOwner, _newOwner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _owner() internal view returns (address owner_) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\towner_ = acls.owner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transitiveOwner() internal view returns (address owner_) {\\r\\n\\t\\towner_ = LibAccessControl._owner();\\r\\n\\r\\n\\t\\twhile (owner_.isContract()) {\\r\\n\\t\\t\\ttry IERC173(owner_).owner() returns (address transitiveOwner) {\\r\\n\\t\\t\\t\\towner_ = transitiveOwner;\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _owner(), \\\"Not owner!\\\");\\r\\n\\t\\tif (msg.sender != _owner()) {\\r\\n\\t\\t\\trevert Ownable__NotOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsTransitiveOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _transitiveOwner(), \\\"Not transitive owner!\\\");\\r\\n\\t\\tif (msg.sender != _transitiveOwner()) {\\r\\n\\t\\t\\trevert Ownable__NotTransitiveOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice assign role to given account\\r\\n\\t * @param _role role to assign\\r\\n\\t * @param _account recipient of role assignment\\r\\n\\t */\\r\\n\\tfunction _grantRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\tacls.roles[acls.owner][_role].members.add(_account);\\r\\n\\t\\t\\temit RoleGranted(acls.owner, _role, _account, msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice unassign role from given account\\r\\n\\t * @param _role role to unassign\\r\\n\\t * @param _account account to revokeAccessControlStorage\\r\\n\\t */\\r\\n\\tfunction _revokeRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\t// require(_role != LibAccessControl.DEFAULT_ADMIN_ROLE && _account != acls.owner);\\r\\n\\t\\tacls.roles[acls.owner][_role].members.remove(_account);\\r\\n\\t\\temit RoleRevoked(acls.owner, _role, _account, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice relinquish role\\r\\n\\t * @param _role role to relinquish\\r\\n\\t */\\r\\n\\tfunction _renounceRole(bytes32 _role) internal {\\r\\n\\t\\t_revokeRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query one of the accounts that have role of the project\\r\\n\\t * @dev WARNING: When using _getProjectRoleMember and _getProjectRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _index index of role member\\r\\n\\t */\\r\\n\\tfunction _getRoleMember(bytes32 _role, uint256 _index) internal view returns (address) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.at(_index);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query the number of accounts that have role.\\r\\n\\t * @dev WARNING: When using _getRoleMember and _getRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _getRoleMemberCount(address, bytes32 _role) internal view returns (uint256) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query whether role is assigned to account\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account account to query\\r\\n\\t * @return bool whether role is assigned to account\\r\\n\\t */\\r\\n\\tfunction _hasRole(bytes32 _role, address _account) internal view returns (bool) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.contains(_account);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if sender does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role) internal view {\\r\\n\\t\\t_checkRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if given account does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role, address _account) internal view {\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\trevert AccessDenied({ role: _role, account: _account });\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query admin role for given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @return admin role\\r\\n\\t */\\r\\n\\tfunction _getRoleAdmin(bytes32 _role) internal view returns (bytes32) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].adminRole;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set role as admin role\\r\\n\\t * @param _role role to set\\r\\n\\t * @param _adminRole admin role to set\\r\\n\\t */\\r\\n\\tfunction _setRoleAdmin(bytes32 _role, bytes32 _adminRole) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tbytes32 previousAdminRole = _getRoleAdmin(_role);\\r\\n\\t\\tacls.roles[acls.owner][_role].adminRole = _adminRole;\\r\\n\\t\\temit RoleAdminChanged(acls.owner, _role, previousAdminRole, _adminRole);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2c0da263bd49a5c7a6d1a9d8866bbe5936b43f3ee39bf2c9dc4600d7045b49e9\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport \\\"./RoleData.sol\\\";\\r\\n\\r\\nstruct AccessControllStorage {\\r\\n\\t//owner => role => adminRole, members mapping\\r\\n\\taddress owner;\\r\\n\\tmapping(address => mapping(bytes32 => RoleData)) roles;\\r\\n}\\r\\n\\r\\nlibrary LibAccessControlStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.access-control.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (AccessControllStorage storage acls_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tacls_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ae5597ade94391b4f367368b5e6f5b4d15dce1e430e217ee5e549a652c8eb8b\",\"license\":\"MIT\"},\"contracts/base/AccessControl/ModifierRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibAccessControl } from \\\"./LibAccessControl.sol\\\";\\r\\n\\r\\nabstract contract ModifierRole {\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyTransitiveOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsTransitiveOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRole(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(role);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRoleAdmin(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(LibAccessControl._getRoleAdmin(role));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9a5f770772e3b447a47bbcacd0afe131c78c98bc87219da9e3dfe10a261ad64e\",\"license\":\"MIT\"},\"contracts/base/AccessControl/RoleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RoleData {\\r\\n\\tbytes32 adminRole;\\r\\n\\tEnumerableSet.AddressSet members;\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d7eaf459b09f21c482e9b9df5b5c99572095e79174de3621f5ec9e32413ac7\",\"license\":\"MIT\"},\"contracts/base/BlackWhiteList/LibBlackWhiteList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibBlackWhiteListStorage.sol\\\";\\r\\n\\r\\nlibrary LibBlackWhiteList {\\r\\n\\t//_target: which list is belongs to...\\r\\n\\t//_account: an account on a _target\\r\\n\\t//_lockValue:\\r\\n\\t//  - if _target is a blackList than true _lockValue means that the account is prohibited\\r\\n\\t//  - if _target is a blackList than false _lockValue means that the account is acceptable\\r\\n\\t//  - if _target is a whiteList than true _lockValue means that the account is acceptable\\r\\n\\t//  - if _target is a whiteList than false _lockValue means that the account is prohibited\\r\\n\\tevent AccountBlackWhiteList(bytes32 indexed _target, address indexed _account, bool _lockValue);\\r\\n\\r\\n\\tfunction getAccountBlackWhiteList(bytes32 _target, address _account) internal view returns (bool lockValue_) {\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\tlockValue_ = wls.whiteList[_target][_account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAccountBlackWhiteList(bytes32 _target, address _account, bool _lockValue) internal {\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\twls.whiteList[_target][_account] = _lockValue;\\r\\n\\t\\temit AccountBlackWhiteList(_target, _account, _lockValue);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBatchAccountBlackWhiteList(bytes32 _target, address[] calldata _accounts, bool _lockValue) internal {\\r\\n\\t\\trequire(_accounts.length <= 255, \\\"Batch: too many addresses\\\");\\r\\n\\t\\tBlackWhiteListStorage storage wls = LibBlackWhiteListStorage.layout();\\r\\n\\t\\tfor (uint8 i = 0; i < _accounts.length; i++) {\\r\\n\\t\\t\\twls.whiteList[_target][_accounts[i]] = _lockValue;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc277a3892e2250b16f292d59b9943a9c584987c1325aead8a06ad5ffbc153436\",\"license\":\"MIT\"},\"contracts/base/BlackWhiteList/LibBlackWhiteListStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct BlackWhiteListStorage {\\r\\n\\tmapping(bytes32 => mapping(address => bool)) whiteList;\\r\\n}\\r\\n\\r\\nlibrary LibBlackWhiteListStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.white-list.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (BlackWhiteListStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x040e35cfc2497b8eecef40b205079d1b6dfd00a4d1e1724d31e9baa5e7752ee1\",\"license\":\"MIT\"},\"contracts/base/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice query the total minted token supply\\n\\t * @return token supply\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the token balance of given account\\n\\t * @param account address to query\\n\\t * @return token balance\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the allowance granted from given holder to given spender\\n\\t * @param holder approver of allowance\\n\\t * @param spender recipient of allowance\\n\\t * @return token allowance\\n\\t */\\n\\tfunction allowance(address holder, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice grant approval to spender to spend tokens\\n\\t * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n\\t * @param spender recipient of allowance\\n\\t * @param amount quantity of tokens approved for spending\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient on behalf of given holder\\n\\t * @param holder holder of tokens prior to transfer\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transferFrom(address holder, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2225a383553a4a87b9b6577c7b90eff90b4b6a0e967c97d0a3fd5291a290d8db\",\"license\":\"MIT\"},\"contracts/base/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from \\\"../IERC20.sol\\\";\\nimport { LibERC20Base } from \\\"./LibERC20Base.sol\\\";\\n\\n/**\\n * @title Base ERC20 implementation, excluding optional extensions\\n */\\nabstract contract ERC20Base is IERC20 {\\n\\tmodifier onlyPayloadSize(uint size) {\\n\\t\\trequire(!(msg.data.length < size + 4));\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice query the total minted token supply\\n\\t * @return totalSupply_ token supply\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256 totalSupply_) {\\n\\t\\treturn LibERC20Base._totalSupply();\\n\\t}\\n\\n\\t/**\\n\\t * @notice query the token balance of given account\\n\\t * @param account address to query\\n\\t * @return balance_ token balance\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256 balance_) {\\n\\t\\treturn LibERC20Base._balanceOf(account);\\n\\t}\\n\\n\\t/**\\n\\t * @notice query the allowance granted from given holder to given spender\\n\\t * @param holder approver of allowance\\n\\t * @param spender recipient of allowance\\n\\t * @return allowance_ token allowance\\n\\t */\\n\\tfunction allowance(address holder, address spender) external view returns (uint256 allowance_) {\\n\\t\\treturn _allowance(holder, spender);\\n\\t}\\n\\n\\tfunction _allowance(address holder, address spender) internal view virtual returns (uint256 allowance_) {\\n\\t\\treturn LibERC20Base._allowance(holder, spender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice enable spender to spend tokens on behalf of holder\\n\\t * @param spender recipient of allowance\\n\\t * @param amount quantity of tokens approved for spending\\n\\t * @return status_ success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external virtual onlyPayloadSize(2 * 32) returns (bool status_) {\\n\\t\\treturn _approve(msg.sender, spender, amount);\\n\\t}\\n\\n\\tfunction _approve(address holder, address spender, uint256 amount) internal virtual returns (bool status_) {\\n\\t\\treturn LibERC20Base._approve(holder, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice transfer tokens from holder to recipient\\n\\t * @param recipient beneficiary of transfer\\n\\t * @param amount quantity of tokens transferred\\n\\t * @return status_ success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) external onlyPayloadSize(2 * 32) returns (bool status_) {\\n\\t\\treturn _transfer(msg.sender, recipient, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient on behalf of given holder\\n\\t * @param holder holder of tokens prior to transfer\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return status_ success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transferFrom(address holder, address recipient, uint256 amount) external onlyPayloadSize(3 * 32) returns (bool status_) {\\n\\t\\treturn _transferFrom(holder, recipient, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice mint tokens for given account\\n\\t * @param account recipient of minted tokens\\n\\t * @param amount quantity of tokens minted\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"MintToZeroAddress\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\t\\tLibERC20Base._mint(account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice burn tokens held by given account\\n\\t * @param account holder of burned tokens\\n\\t * @param amount quantity of tokens burned\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"BurnFromZeroAddress\\\");\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\tLibERC20Base._burn(account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice transfer tokens from holder to recipient\\n\\t * @param holder owner of tokens to be transferred\\n\\t * @param recipient beneficiary of transfer\\n\\t * @param amount quantity of tokens transferred\\n\\t * @return status_ success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction _transfer(address holder, address recipient, uint256 amount) internal virtual returns (bool status_) {\\n\\t\\trequire(holder != address(0), \\\"TransferFromZeroAddress\\\");\\n\\t\\trequire(recipient != address(0), \\\"TransferToZeroAddress\\\");\\n\\n\\t\\t_beforeTokenTransfer(holder, recipient, amount);\\n\\n\\t\\treturn LibERC20Base._transfer(holder, recipient, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient on behalf of given holder\\n\\t * @param holder holder of tokens prior to transfer\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction _transferFrom(address holder, address recipient, uint256 amount) internal virtual returns (bool) {\\n\\t\\tLibERC20Base._decreaseAllowance(holder, msg.sender, amount);\\n\\n\\t\\t_transfer(holder, recipient, amount);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice ERC20 hook, called before all transfers including mint and burn\\n\\t * @dev function should be overridden and new implementation must call super\\n\\t * @param from sender of tokens\\n\\t * @param to receiver of tokens\\n\\t * @param amount quantity of tokens transferred\\n\\t */\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1c29a30be2c434a846fdd2295413ecbe294e56962fee935fbf6b0887310312ad\",\"license\":\"MIT\"},\"contracts/base/ERC20/base/LibERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibERC20BaseStorage, ERC20BaseStorage } from \\\"./LibERC20Storage.sol\\\";\\r\\n\\r\\nlibrary LibERC20Base {\\r\\n\\t//Come from IERC20\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n\\t//Come from IERC20Base\\r\\n\\t// error ERC20Base__ApproveFromZeroAddress();\\r\\n\\t// error ERC20Base__ApproveToZeroAddress();\\r\\n\\t// error ERC20Base__BurnExceedsBalance();\\r\\n\\t// error ERC20Base__BurnFromZeroAddress();\\r\\n\\t// error ERC20Base__InsufficientAllowance();\\r\\n\\t// error ERC20Base__MintToZeroAddress();\\r\\n\\t// error ERC20Base__TransferExceedsBalance();\\r\\n\\t// error ERC20Base__TransferFromZeroAddress();\\r\\n\\t// error ERC20Base__TransferToZeroAddress();\\r\\n\\r\\n\\t//\\r\\n\\t/**\\r\\n\\t * @notice query the total minted token supply\\r\\n\\t * @return token supply\\r\\n\\t */\\r\\n\\tfunction _totalSupply() internal view returns (uint256) {\\r\\n\\t\\treturn LibERC20BaseStorage.layout().totalSupply;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the token balance of given account\\r\\n\\t * @param account address to query\\r\\n\\t * @return balanceOf_ token balance\\r\\n\\t */\\r\\n\\tfunction _balanceOf(address account) internal view returns (uint256 balanceOf_) {\\r\\n\\t\\treturn LibERC20BaseStorage.layout().balances[account];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the allowance granted from given holder to given spender\\r\\n\\t * @param holder approver of allowance\\r\\n\\t * @param spender recipient of allowance\\r\\n\\t * @return allowance_ token allowance\\r\\n\\t */\\r\\n\\tfunction _allowance(address holder, address spender) internal view returns (uint256 allowance_) {\\r\\n\\t\\treturn LibERC20BaseStorage.layout().allowances[holder][spender];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice enable spender to spend tokens on behalf of holder\\r\\n\\t * @param holder address on whose behalf tokens may be spent\\r\\n\\t * @param spender recipient of allowance\\r\\n\\t * @param amount quantity of tokens approved for spending\\r\\n\\t * @return status_ success status (always true; otherwise function should revert)\\r\\n\\t */\\r\\n\\tfunction _approve(address holder, address spender, uint256 amount) internal returns (bool status_) {\\r\\n\\t\\trequire(holder != address(0), \\\"ApproveFromZeroAddress\\\");\\r\\n\\t\\trequire(spender != address(0), \\\"ApproveToZeroAddress\\\");\\r\\n\\r\\n\\t\\tLibERC20BaseStorage.layout().allowances[holder][spender] = amount;\\r\\n\\r\\n\\t\\temit Approval(holder, spender, amount);\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice decrease spend amount granted by holder to spender\\r\\n\\t * @param holder address on whose behalf tokens may be spent\\r\\n\\t * @param spender address whose allowance to decrease\\r\\n\\t * @param amount quantity by which to decrease allowance\\r\\n\\t */\\r\\n\\tfunction _decreaseAllowance(address holder, address spender, uint256 amount) internal {\\r\\n\\t\\tuint256 allowance = _allowance(holder, spender);\\r\\n\\r\\n\\t\\trequire(amount <= allowance, \\\"InsufficientAllowance\\\");\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t_approve(holder, spender, allowance - amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice mint tokens for given account\\r\\n\\t * @param account recipient of minted tokens\\r\\n\\t * @param amount quantity of tokens minted\\r\\n\\t */\\r\\n\\tfunction _mint(address account, uint256 amount) internal {\\r\\n\\t\\t//WARNING always check this before calling _mint:\\r\\n\\t\\t//if (account == address(0)) revert ERC20Base__MintToZeroAddress();\\r\\n\\r\\n\\t\\tERC20BaseStorage storage e20s = LibERC20BaseStorage.layout();\\r\\n\\t\\te20s.totalSupply += amount;\\r\\n\\t\\te20s.balances[account] += amount;\\r\\n\\r\\n\\t\\temit Transfer(address(0), account, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice burn tokens held by given account\\r\\n\\t * @param account holder of burned tokens\\r\\n\\t * @param amount quantity of tokens burned\\r\\n\\t */\\r\\n\\tfunction _burn(address account, uint256 amount) internal {\\r\\n\\t\\t//WARNING always check this before calling _burn:\\r\\n\\t\\t//if (account == address(0)) revert ERC20Base__BurnFromZeroAddress();\\r\\n\\r\\n\\t\\tERC20BaseStorage storage e20s = LibERC20BaseStorage.layout();\\r\\n\\r\\n\\t\\tuint256 balance = e20s.balances[account];\\r\\n\\t\\trequire(amount <= balance, \\\"BurnExceedsBalance\\\");\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te20s.balances[account] = balance - amount;\\r\\n\\t\\t}\\r\\n\\t\\te20s.totalSupply -= amount;\\r\\n\\r\\n\\t\\temit Transfer(account, address(0), amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice transfer tokens from holder to recipient\\r\\n\\t * @param holder owner of tokens to be transferred\\r\\n\\t * @param recipient beneficiary of transfer\\r\\n\\t * @param amount quantity of tokens transferred\\r\\n\\t * @return status_ success status (always true; otherwise function should revert)\\r\\n\\t */\\r\\n\\tfunction _transfer(address holder, address recipient, uint256 amount) internal returns (bool status_) {\\r\\n\\t\\tERC20BaseStorage storage e20s = LibERC20BaseStorage.layout();\\r\\n\\r\\n\\t\\tuint256 holderBalance = e20s.balances[holder];\\r\\n\\t\\trequire(amount <= holderBalance, \\\"TransferExceedsBalance\\\");\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te20s.balances[holder] = holderBalance - amount;\\r\\n\\t\\t}\\r\\n\\t\\te20s.balances[recipient] += amount;\\r\\n\\r\\n\\t\\temit Transfer(holder, recipient, amount);\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2f08275235a5f53eb5369f7f7648aff5cbae26b8f3671fbaa0d6eba7333be167\",\"license\":\"MIT\"},\"contracts/base/ERC20/base/LibERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct ERC20BaseStorage {\\r\\n\\tmapping(address => uint256) balances;\\r\\n\\tmapping(address => mapping(address => uint256)) allowances;\\r\\n\\tuint256 totalSupply;\\r\\n}\\r\\n\\r\\nlibrary LibERC20BaseStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.erc20-base.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ERC20BaseStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xad502e623b65a7b8fcc92c3e8d2b91b7ca415f5742197e9eacfa3b114f49ed78\",\"license\":\"MIT\"},\"contracts/base/ERC20/extended/ERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { IERC20Extended } from \\\"./IERC20Extended.sol\\\";\\r\\n\\r\\nimport { ERC20Base } from \\\"../base/ERC20Base.sol\\\";\\r\\nimport { LibERC20Base } from \\\"../base/LibERC20Base.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 safe approval extensions\\r\\n * @dev mitigations for transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\r\\n */\\r\\nabstract contract ERC20Extended is IERC20Extended, ERC20Base {\\r\\n\\t/**\\r\\n\\t * @notice increase spend amount granted to spender\\r\\n\\t * @param spender address whose allowance to increase\\r\\n\\t * @param amount quantity by which to increase allowance\\r\\n\\t * @return success status (always true; otherwise function will revert)\\r\\n\\t */\\r\\n\\tfunction increaseAllowance(address spender, uint256 amount) external returns (bool) {\\r\\n\\t\\treturn _increaseAllowance(spender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _increaseAllowance(address spender, uint256 amount) internal virtual returns (bool) {\\r\\n\\t\\tuint256 allowance = LibERC20Base._allowance(msg.sender, spender);\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (allowance > allowance + amount) revert ERC20Extended__ExcessiveAllowance();\\r\\n\\r\\n\\t\\t\\treturn LibERC20Base._approve(msg.sender, spender, allowance + amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice decrease spend amount granted to spender\\r\\n\\t * @param spender address whose allowance to decrease\\r\\n\\t * @param amount quantity by which to decrease allowance\\r\\n\\t * @return success status (always true; otherwise function will revert)\\r\\n\\t */\\r\\n\\tfunction decreaseAllowance(address spender, uint256 amount) external virtual returns (bool) {\\r\\n\\t\\treturn _decreaseAllowance(msg.sender, spender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _decreaseAllowance(address holder, address spender, uint256 amount) internal virtual returns (bool) {\\r\\n\\t\\tLibERC20Base._decreaseAllowance(holder, spender, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x4c8fbacb84fc236a69a26f27afb6d1799a4d25561e358d78fd3370f550ac2b60\",\"license\":\"MIT\"},\"contracts/base/ERC20/extended/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { IERC20ExtendedInternal } from \\\"./IERC20ExtendedInternal.sol\\\";\\n\\n/**\\n * @title ERC20 extended interface\\n */\\ninterface IERC20Extended is IERC20ExtendedInternal {\\n\\t/**\\n\\t * @notice increase spend amount granted to spender\\n\\t * @param spender address whose allowance to increase\\n\\t * @param amount quantity by which to increase allowance\\n\\t * @return success status (always true; otherwise function will revert)\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice decrease spend amount granted to spender\\n\\t * @param spender address whose allowance to decrease\\n\\t * @param amount quantity by which to decrease allowance\\n\\t * @return success status (always true; otherwise function will revert)\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xcb030f6142565ff0c2833722465acf3fa5734263c5fef18d6a1d179774b0b304\",\"license\":\"MIT\"},\"contracts/base/ERC20/extended/IERC20ExtendedInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IERC20ExtendedInternal {\\r\\n\\terror ERC20Extended__ExcessiveAllowance();\\r\\n\\terror ERC20Extended__InsufficientAllowance();\\r\\n}\\r\\n\",\"keccak256\":\"0x22b36e70ae2414cfbfeff9d23df404ad4552125d5cc39451769a7c2e51ba3b8d\",\"license\":\"MIT\"},\"contracts/base/ERC20/metadata/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { IERC20Metadata } from \\\"./IERC20Metadata.sol\\\";\\nimport { LibERC20Metadata } from \\\"./LibERC20Metadata.sol\\\";\\n\\n/**\\n * @title ERC20 metadata extensions\\n */\\nabstract contract ERC20Metadata is IERC20Metadata {\\n\\t/**\\n\\t * @inheritdoc IERC20Metadata\\n\\t */\\n\\tfunction name() external view returns (string memory) {\\n\\t\\treturn _name();\\n\\t}\\n\\n\\tfunction _name() internal view virtual returns (string memory) {\\n\\t\\treturn LibERC20Metadata._name();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc IERC20Metadata\\n\\t */\\n\\tfunction symbol() external view returns (string memory) {\\n\\t\\treturn _symbol();\\n\\t}\\n\\n\\tfunction _symbol() internal view virtual returns (string memory) {\\n\\t\\treturn LibERC20Metadata._symbol();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc IERC20Metadata\\n\\t */\\n\\tfunction decimals() external view returns (uint8) {\\n\\t\\treturn _decimals();\\n\\t}\\n\\n\\tfunction _decimals() internal view returns (uint8) {\\n\\t\\treturn LibERC20Metadata._decimals();\\n\\t}\\n\\n\\tfunction _setName(string memory __name) internal virtual {\\n\\t\\tLibERC20Metadata._setName(__name);\\n\\t}\\n\\n\\tfunction _setSymbol(string memory __symbol) internal virtual {\\n\\t\\tLibERC20Metadata._setSymbol(__symbol);\\n\\t}\\n\\n\\tfunction _setDecimals(uint8 __decimals) internal virtual {\\n\\t\\tLibERC20Metadata._setDecimals(__decimals);\\n\\t}\\n}\\n\",\"keccak256\":\"0x71acf9290dcb58a511e7d62b9ae95062dedb97c0072849a86b898d55ed8fa494\",\"license\":\"MIT\"},\"contracts/base/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata {\\n\\t/**\\n\\t * @notice return token name\\n\\t * @return token name\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice return token symbol\\n\\t * @return token symbol\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice return token decimals, generally used only for display purposes\\n\\t * @return token decimals\\n\\t */\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaef9c65c2330d80a184d3d59dbe37f80af62f88c5f707a2e36dd1377ba04898d\",\"license\":\"MIT\"},\"contracts/base/ERC20/metadata/LibERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { LibERC20MetadataStorage } from \\\"./LibERC20MetadataStorage.sol\\\";\\n\\n/**\\n * @title ERC20Metadata internal functions\\n */\\nlibrary LibERC20Metadata {\\n\\t/**\\n\\t * @notice return token name\\n\\t * @return token name\\n\\t */\\n\\tfunction _name() internal view returns (string memory) {\\n\\t\\treturn LibERC20MetadataStorage.layout().name;\\n\\t}\\n\\n\\t/**\\n\\t * @notice return token symbol\\n\\t * @return token symbol\\n\\t */\\n\\tfunction _symbol() internal view returns (string memory) {\\n\\t\\treturn LibERC20MetadataStorage.layout().symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @notice return token decimals, generally used only for display purposes\\n\\t * @return token decimals\\n\\t */\\n\\tfunction _decimals() internal view returns (uint8) {\\n\\t\\treturn LibERC20MetadataStorage.layout().decimals;\\n\\t}\\n\\n\\tfunction _setName(string memory name) internal {\\n\\t\\tLibERC20MetadataStorage.layout().name = name;\\n\\t}\\n\\n\\tfunction _setSymbol(string memory symbol) internal {\\n\\t\\tLibERC20MetadataStorage.layout().symbol = symbol;\\n\\t}\\n\\n\\tfunction _setDecimals(uint8 decimals) internal {\\n\\t\\tLibERC20MetadataStorage.layout().decimals = decimals;\\n\\t}\\n}\\n\",\"keccak256\":\"0x21122c54cf05b16bd34568fe7b84efd1c69f075aaa74423f4c7f0b03955145b9\",\"license\":\"MIT\"},\"contracts/base/ERC20/metadata/LibERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nstruct ERC20MetadataStorage {\\n\\tstring name;\\n\\tstring symbol;\\n\\tuint8 decimals;\\n}\\n\\nlibrary LibERC20MetadataStorage {\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.erc20-metadata.storage.v1\\\");\\n\\n\\tfunction layout() internal pure returns (ERC20MetadataStorage storage layout_) {\\n\\t\\tbytes32 position = STORAGE_SLOT;\\n\\t\\tassembly {\\n\\t\\t\\tlayout_.slot := position\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xa8d5c3f84cd1f6547900c19e4c53167362a2cc5a38f88163cb2b2f9e62dec9fc\",\"license\":\"MIT\"},\"contracts/base/ERC20Token/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { IERC20 } from \\\"../ERC20/IERC20.sol\\\";\\r\\nimport { ERC20Base } from \\\"../ERC20/base/ERC20Base.sol\\\";\\r\\nimport { ERC20Extended } from \\\"../ERC20/extended/ERC20Extended.sol\\\";\\r\\nimport { ERC20Metadata } from \\\"../ERC20/metadata/ERC20Metadata.sol\\\";\\r\\n\\r\\nimport { LibAccessControl } from \\\"../AccessControl/LibAccessControl.sol\\\";\\r\\nimport { LibBlackWhiteList } from \\\"../BlackWhiteList/LibBlackWhiteList.sol\\\";\\r\\nimport { LibTargetedPausable } from \\\"../TargetedPausable/LibTargetedPausable.sol\\\";\\r\\n\\r\\nimport { LibTokenConst } from \\\"./LibTokenConst.sol\\\";\\r\\nimport { LibCustomERC20Extension } from \\\"./LibCustomERC20Extension.sol\\\";\\r\\n\\r\\nimport { SafeMath } from \\\"../../utils/SafeMath.sol\\\";\\r\\n\\r\\nimport { ModifierRole } from \\\"../AccessControl/ModifierRole.sol\\\";\\r\\nimport { ModifierPausable } from \\\"../TargetedPausable/ModifierPausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title uSmart's ERC20 implementation, including recommended extensions and other usfull stuff\\r\\n */\\r\\n//ERC20Permit\\r\\nabstract contract uSmartERC20 is ERC20Base, ERC20Extended, ERC20Metadata, ModifierRole, ModifierPausable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tfunction _approve(\\r\\n\\t\\taddress _holder,\\r\\n\\t\\taddress _spender,\\r\\n\\t\\tuint256 _value\\r\\n\\t) internal override whenNotPaused(LibTokenConst.FULL) returns (bool) {\\r\\n\\t\\trequire((_value == 0) || (_allowance(msg.sender, _spender) == 0), \\\"Approve: zero first\\\");\\r\\n\\t\\treturn super._approve(_holder, _spender, _value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _increaseAllowance(address _spender, uint256 _addedValue) internal override whenNotPaused(LibTokenConst.FULL) returns (bool) {\\r\\n\\t\\treturn super._increaseAllowance(_spender, _addedValue);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _decreaseAllowance(\\r\\n\\t\\taddress _holder,\\r\\n\\t\\taddress _spender,\\r\\n\\t\\tuint256 _subtractValue\\r\\n\\t) internal override whenNotPaused(LibTokenConst.FULL) returns (bool) {\\r\\n\\t\\treturn super._decreaseAllowance(_holder, _spender, _subtractValue);\\r\\n\\t}\\r\\n\\r\\n\\tfunction mint(address account, uint256 amount) external whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TREASURY_ROLE) {\\r\\n\\t\\t_mint(account, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction burn(uint256 amount) external whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TREASURY_ROLE) {\\r\\n\\t\\t_burn(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction burnFrom(address account, uint256 amount) external whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TREASURY_ROLE) {\\r\\n\\t\\t_burn(account, amount);\\r\\n\\t}\\r\\n\\r\\n\\t//function _setName(string memory name) internal virtual override(ERC20Metadata, ERC20PermitInternal) {\\r\\n\\tfunction _setName(string memory name) internal virtual override {\\r\\n\\t\\tsuper._setName(name);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Transfer token between accounts, based on BNOX TOS.\\r\\n\\t * - poolFee% of the transferred amount is going to poolAddress\\r\\n\\t * - generalFee% of the transferred amount is going to amountGeneral\\r\\n\\t *\\r\\n\\t * @param _sender The address from where the token sent\\r\\n\\t * @param _recipient Recipient address\\r\\n\\t * @param _amount The amount to be transferred\\r\\n\\t */\\r\\n\\tfunction _transfer(address _sender, address _recipient, uint256 _amount) internal override returns (bool) {\\r\\n\\t\\tif (\\r\\n\\t\\t\\t(LibBlackWhiteList.getAccountBlackWhiteList(LibTokenConst.SENDER_FREE_FEE_WL, _sender)) ||\\r\\n\\t\\t\\t(LibBlackWhiteList.getAccountBlackWhiteList(LibTokenConst.RECIPIENT_FREE_FEE_WL, _recipient))\\r\\n\\t\\t) {\\r\\n\\t\\t\\treturn super._transfer(_sender, _recipient, _amount);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t/**\\r\\n\\t\\t\\t * Three decimal in percent.\\r\\n\\t\\t\\t * The decimal correction is 100.000, but to avoid rounding errors, first divide by 10.000\\r\\n\\t\\t\\t * and after that the calculation must add 5 and divide 10 at the end.\\r\\n\\t\\t\\t */\\r\\n\\t\\t\\tuint256 decimalCorrection = 10000;\\r\\n\\t\\t\\tuint256 generalFeePercent256 = LibCustomERC20Extension.getGeneralFee();\\r\\n\\t\\t\\tuint256 bsoFeePercent256 = LibCustomERC20Extension.getPoolFee();\\r\\n\\t\\t\\tuint256 totalFeePercent = generalFeePercent256.add(bsoFeePercent256);\\r\\n\\r\\n\\t\\t\\tuint256 totalFeeAmount = _amount.mul(totalFeePercent).div(decimalCorrection).add(5).div(10);\\r\\n\\t\\t\\tuint256 amountBso = _amount.mul(bsoFeePercent256).div(decimalCorrection).add(5).div(10);\\r\\n\\t\\t\\tuint256 amountGeneral = totalFeeAmount.sub(amountBso);\\r\\n\\r\\n\\t\\t\\tuint256 recipientTransferAmount = _amount.sub(totalFeeAmount);\\r\\n\\r\\n\\t\\t\\tbool result = super._transfer(_sender, _recipient, recipientTransferAmount);\\r\\n\\t\\t\\trequire(result, \\\"Transfer error\\\");\\r\\n\\r\\n\\t\\t\\tif (amountGeneral > 0) {\\r\\n\\t\\t\\t\\tresult = super._transfer(_sender, LibCustomERC20Extension.getGeneralFeeAddress(), amountGeneral);\\r\\n\\t\\t\\t\\trequire(result, \\\"General fee transfer error\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (amountBso > 0) {\\r\\n\\t\\t\\t\\tresult = super._transfer(_sender, LibCustomERC20Extension.getPoolFeeAddress(), amountBso);\\r\\n\\t\\t\\t\\trequire(result, \\\"Pool fee transfer error\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override whenNotPaused(LibTokenConst.FULL) {\\r\\n\\t\\trequire(!LibBlackWhiteList.getAccountBlackWhiteList(LibTokenConst.SENDER_BL, from), \\\"Blacklist: sender\\\");\\r\\n\\t\\trequire(!LibBlackWhiteList.getAccountBlackWhiteList(LibTokenConst.RECIPIENT_BL, to), \\\"Blacklist: recipient\\\");\\r\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x60f41c1337b1bb7efb85da0209ec456f57a5064841eb3d156931d8e9c5d69923\",\"license\":\"MIT\"},\"contracts/base/ERC20Token/LibCustomERC20Extension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibCustomERC20ExtensionStorage } from \\\"./LibCustomERC20ExtensionStorage.sol\\\";\\r\\n\\r\\nlibrary LibCustomERC20Extension {\\r\\n\\t///LibBlockBenERC20ExtensionStorage\\r\\n\\t//URL, Fee and other usfull extension will come here\\r\\n\\r\\n\\tfunction getTreasuryAddress() internal view returns (address) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().treasuryAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setTreasuryAddress(address _treasuryAddress) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().treasuryAddress = _treasuryAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getURL() internal view returns (string memory) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().url;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setURL(string calldata _url) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().url = _url;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getGeneralFeeAddress() internal view returns (address) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().generalFeeAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGeneralFeeAddress(address _generalFeeAddress) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().generalFeeAddress = _generalFeeAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getGeneralFee() internal view returns (uint16) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().generalFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGeneralFee(uint16 _generalFee) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().generalFee = _generalFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPoolFee() internal view returns (uint16) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().poolFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPoolFee(uint16 _poolFee) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().poolFee = _poolFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPoolFeeAddress() internal view returns (address) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().poolFeeAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPoolFeeAddress(address _poolFeeAddress) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().poolFeeAddress = _poolFeeAddress;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x048040c75f57d1523bdbeba36649147dd8deabf1e4bb56b0b240cd0b09a95d73\",\"license\":\"MIT\"},\"contracts/base/ERC20Token/LibCustomERC20ExtensionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct CustomERC20ExtensionStorage {\\r\\n\\tstring url;\\r\\n\\taddress treasuryAddress;\\r\\n\\tuint16 generalFee;\\r\\n\\taddress generalFeeAddress;\\r\\n\\tuint16 poolFee;\\r\\n\\taddress poolFeeAddress;\\r\\n}\\r\\n\\r\\nlibrary LibCustomERC20ExtensionStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.constract.custom-erc20-extension.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (CustomERC20ExtensionStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x5b6d88193d951af905eea41b69a32bf52b5ba66db4fcb1c9acda0cd5887e688a\",\"license\":\"MIT\"},\"contracts/base/ERC20Token/LibTokenConst.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary LibTokenConst {\\r\\n\\t//Pausable\\r\\n\\tbytes32 public constant FULL = 0x00;\\r\\n\\r\\n\\t//Roles\\r\\n\\tbytes32 public constant TOKEN_ADMIN_ROLE = keccak256(\\\"TOKEN_ADMIN_ROLE\\\");\\r\\n\\tbytes32 public constant TREASURY_ROLE = keccak256(\\\"TREASURY_ROLE\\\");\\r\\n\\tbytes32 public constant AML_ROLE = keccak256(\\\"AML_ROLE\\\");\\r\\n\\tbytes32 public constant COMPLIANCE_ROLE = keccak256(\\\"COMPLIANCE_ROLE\\\");\\r\\n\\r\\n\\t//BlackWhite lists, these accounts could not send/receive token\\r\\n\\tbytes32 public constant SENDER_BL = keccak256(\\\"SENDER_BLACKLIST\\\");\\r\\n\\tbytes32 public constant RECIPIENT_BL = keccak256(\\\"RECIPIENT_BLACKLIST\\\");\\r\\n\\r\\n\\t//FreeFee WhiteList, these accounts don't pay fee...\\r\\n\\tbytes32 public constant SENDER_FREE_FEE_WL = keccak256(\\\"SENDER_FREE_FEE_WHITELIST\\\");\\r\\n\\tbytes32 public constant RECIPIENT_FREE_FEE_WL = keccak256(\\\"RECIPIENT_FREE_FEE_WHITELIST\\\");\\r\\n}\\r\\n\",\"keccak256\":\"0x8a47f5923aab3b5eb5608f4ae833920797fae1b776e5c7a1ea97e4cb362d746c\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTargetedPausableStorage.sol\\\";\\r\\n\\r\\nlibrary LibTargetedPausable {\\r\\n\\terror TargetedPausable__TargetedPaused();\\r\\n\\terror TargetedPausable__NotTargetedPaused();\\r\\n\\r\\n\\t//target: what was paused\\r\\n\\t//account: the operator who is paused the target\\r\\n\\tevent TargetedPaused(bytes32 indexed target, address indexed account);\\r\\n\\r\\n\\t//target: what was unpaused\\r\\n\\t//account: the operator who is unpaused the target\\r\\n\\tevent TargetedUnpaused(bytes32 target, address indexed account);\\r\\n\\r\\n\\tfunction whenNotPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (LibTargetedPausable.paused(_target)) revert TargetedPausable__TargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (!LibTargetedPausable.paused(_target)) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction paused(bytes32 _target) internal view returns (bool paused_) {\\r\\n\\t\\tpaused_ = LibTargetedPausableStorage.layout().paused[_target];\\r\\n\\t}\\r\\n\\r\\n\\tfunction pause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (ps.paused[_target]) revert TargetedPausable__TargetedPaused();\\r\\n\\t\\tps.paused[_target] = true;\\r\\n\\t\\temit TargetedPaused(_target, _operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (!ps.paused[_target]) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t\\tps.paused[_target] = false;\\r\\n\\t\\tdelete ps.paused[_target];\\r\\n\\t\\temit TargetedUnpaused(_target, _operator);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x8380f056a3357d3405ab36740a5eb5b0be64e8f837c1a6a2456431e9a30ae053\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct TargetedPausableStorage {\\r\\n\\tmapping(bytes32 => bool) paused;\\r\\n}\\r\\n\\r\\nlibrary LibTargetedPausableStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.targeted-pausable.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TargetedPausableStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3a8d48db3da71fb9df91fe855d32fb0dd634556499739c6c277842021c92438d\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/ModifierPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibTargetedPausable } from \\\"./LibTargetedPausable.sol\\\";\\r\\n\\r\\nabstract contract ModifierPausable {\\r\\n\\t//\\r\\n\\tmodifier whenNotPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable.whenNotPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable.whenPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7ff443365b09572428f1808517faf1a3fff06cc7543da6e57045c0641f660aa5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\ninterface IERC173 {\\r\\n\\t/// @dev This emits when ownership of a contract changes.\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/// @notice Get the address of the owner\\r\\n\\t/// @return owner_ The address of the owner.\\r\\n\\tfunction owner() external view returns (address owner_);\\r\\n\\r\\n\\t/// @notice Set the address of the new owner of the contract\\r\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n\\t/// @param _newOwner The address of the new owner of the contract\\r\\n\\tfunction transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x92d3f89d7077a9b49b41fd69091ce8f8c1b20c5695dafbbb4b13e7b6f0d6e6ef\",\"license\":\"MIT\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { UintUtils } from \\\"./UintUtils.sol\\\";\\n\\nlibrary AddressUtils {\\n\\tusing UintUtils for uint256;\\n\\n\\terror AddressUtils__InsufficientBalance();\\n\\terror AddressUtils__NotContract();\\n\\terror AddressUtils__SendValueFailed();\\n\\n\\tfunction toString(address account) internal pure returns (string memory) {\\n\\t\\treturn uint256(uint160(account)).toHexString(20);\\n\\t}\\n\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\tfunction sendValue(address payable account, uint256 amount) internal {\\n\\t\\t(bool success, ) = account.call{ value: amount }(\\\"\\\");\\n\\t\\tif (!success) revert AddressUtils__SendValueFailed();\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"AddressUtils: failed low-level call\\\");\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n\\t\\treturn _functionCallWithValue(target, data, 0, error);\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"AddressUtils: failed low-level call with value\\\");\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) internal returns (bytes memory) {\\n\\t\\tif (value > address(this).balance) revert AddressUtils__InsufficientBalance();\\n\\t\\treturn _functionCallWithValue(target, data, value, error);\\n\\t}\\n\\n\\t/**\\n\\t * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n\\t * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n\\t * @param target recipient of call\\n\\t * @param gasAmount gas allowance for call\\n\\t * @param value native token value to include in call\\n\\t * @param maxCopy maximum number of bytes to copy from return data\\n\\t * @param data encoded call data\\n\\t * @return success whether call is successful\\n\\t * @return returnData copied return data\\n\\t */\\n\\tfunction excessivelySafeCall(\\n\\t\\taddress target,\\n\\t\\tuint256 gasAmount,\\n\\t\\tuint256 value,\\n\\t\\tuint16 maxCopy,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool success, bytes memory returnData) {\\n\\t\\treturnData = new bytes(maxCopy);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// execute external call via assembly to avoid automatic copying of return data\\n\\t\\t\\tsuccess := call(gasAmount, target, value, add(data, 0x20), mload(data), 0, 0)\\n\\n\\t\\t\\t// determine whether to limit amount of data to copy\\n\\t\\t\\tlet toCopy := returndatasize()\\n\\n\\t\\t\\tif gt(toCopy, maxCopy) {\\n\\t\\t\\t\\ttoCopy := maxCopy\\n\\t\\t\\t}\\n\\n\\t\\t\\t// store the length of the copied bytes\\n\\t\\t\\tmstore(returnData, toCopy)\\n\\n\\t\\t\\t// copy the bytes from returndata[0:toCopy]\\n\\t\\t\\treturndatacopy(add(returnData, 0x20), 0, toCopy)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) private returns (bytes memory) {\\n\\t\\tif (!isContract(target)) revert AddressUtils__NotContract();\\n\\n\\t\\t(bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n\\t\\tif (success) {\\n\\t\\t\\treturn returnData;\\n\\t\\t} else if (returnData.length > 0) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet returnData_size := mload(returnData)\\n\\t\\t\\t\\trevert(add(32, returnData), returnData_size)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\trevert(error);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7dec1466e1e606394a35fa837156a011f761ac6a6e9097b89a348fad1f2f692\",\"license\":\"MIT\"},\"contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n\\terror EnumerableSet__IndexOutOfBounds();\\n\\n\\tstruct Set {\\n\\t\\tbytes32[] _values;\\n\\t\\t// 1-indexed to allow 0 to signify nonexistence\\n\\t\\tmapping(bytes32 => uint256) _indexes;\\n\\t}\\n\\n\\tstruct Bytes32Set {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct AddressSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct UintSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n\\t\\treturn _at(set._inner, index);\\n\\t}\\n\\n\\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\n\\t\\treturn address(uint160(uint256(_at(set._inner, index))));\\n\\t}\\n\\n\\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n\\t\\treturn uint256(_at(set._inner, index));\\n\\t}\\n\\n\\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, value);\\n\\t}\\n\\n\\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction indexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, value);\\n\\t}\\n\\n\\tfunction indexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction indexOf(UintSet storage set, uint256 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(AddressSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(UintSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, value);\\n\\t}\\n\\n\\tfunction add(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, value);\\n\\t}\\n\\n\\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction toArray(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n\\t\\treturn set._inner._values;\\n\\t}\\n\\n\\tfunction toArray(AddressSet storage set) internal view returns (address[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\taddress[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction toArray(UintSet storage set) internal view returns (uint256[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\tuint256[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\n\\t\\tif (index >= set._values.length) revert EnumerableSet__IndexOutOfBounds();\\n\\t\\treturn set._values[index];\\n\\t}\\n\\n\\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\n\\t\\treturn set._indexes[value] != 0;\\n\\t}\\n\\n\\tfunction _indexOf(Set storage set, bytes32 value) private view returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn set._indexes[value] - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _length(Set storage set) private view returns (uint256) {\\n\\t\\treturn set._values.length;\\n\\t}\\n\\n\\tfunction _add(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tif (!_contains(set, value)) {\\n\\t\\t\\tset._values.push(value);\\n\\t\\t\\tset._indexes[value] = set._values.length;\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _remove(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tuint256 valueIndex = set._indexes[value];\\n\\n\\t\\tif (valueIndex != 0) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tbytes32 last = set._values[set._values.length - 1];\\n\\n\\t\\t\\t\\t// move last value to now-vacant index\\n\\n\\t\\t\\t\\tset._values[valueIndex - 1] = last;\\n\\t\\t\\t\\tset._indexes[last] = valueIndex;\\n\\t\\t\\t}\\n\\t\\t\\t// clear last index\\n\\n\\t\\t\\tset._values.pop();\\n\\t\\t\\tdelete set._indexes[value];\\n\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x442e9fd507b659095a1fec47f8cb6e540442165217af05db1afa2703a993e038\",\"license\":\"MIT\"},\"contracts/utils/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tuint256 c = a + b;\\r\\n\\t\\t\\tif (c < a) return (false, 0);\\r\\n\\t\\t\\treturn (true, c);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (b > a) return (false, 0);\\r\\n\\t\\t\\treturn (true, a - b);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n\\t\\t\\t// benefit is lost if 'b' is also tested.\\r\\n\\t\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\t\\tif (a == 0) return (true, 0);\\r\\n\\t\\t\\tuint256 c = a * b;\\r\\n\\t\\t\\tif (c / a != b) return (false, 0);\\r\\n\\t\\t\\treturn (true, c);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (b == 0) return (false, 0);\\r\\n\\t\\t\\treturn (true, a / b);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (b == 0) return (false, 0);\\r\\n\\t\\t\\treturn (true, a % b);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `+` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Addition cannot overflow.\\r\\n\\t */\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a + b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a - b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `*` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Multiplication cannot overflow.\\r\\n\\t */\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a * b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `/` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a / b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * reverting when dividing by zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\trequire(b <= a, errorMessage);\\r\\n\\t\\t\\treturn a - b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\trequire(b > 0, errorMessage);\\r\\n\\t\\t\\treturn a / b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * reverting with custom message when dividing by zero.\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\trequire(b > 0, errorMessage);\\r\\n\\t\\t\\treturn a % b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xcf05554a14a07a8b3b0e3b9db93e2e546857acbed67bbcf0523ccf91bc5638d9\",\"license\":\"MIT\"},\"contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n\\terror UintUtils__InsufficientHexLength();\\n\\n\\tbytes16 private constant HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n\\tfunction add(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? sub(a, -b) : a + uint256(b);\\n\\t}\\n\\n\\tfunction sub(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? add(a, -b) : a - uint256(b);\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 length = 0;\\n\\n\\t\\tfor (uint256 temp = value; temp != 0; temp >>= 8) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tlength++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\t\\tbuffer[i] = HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\t\\tvalue >>= 4;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\",\"keccak256\":\"0xec4d89ef08ad402e0c8b30b8e4e135991009384aa72f0cb7c6165721ec5050e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124b2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b411461025d578063a457c2d71461027b578063a9059cbb146102ab578063dd62ed3e146102db576100ea565b806342966c68146101f557806370a082311461021157806379cc679014610241576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806340c10f19146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f761030b565b60405161010491906119bf565b60405180910390f35b61012760048036038101906101229190611a7a565b61031a565b6040516101349190611ad5565b60405180910390f35b61014561034f565b6040516101529190611aff565b60405180910390f35b61017560048036038101906101709190611b1a565b61035e565b6040516101829190611ad5565b60405180910390f35b610193610394565b6040516101a09190611b89565b60405180910390f35b6101c360048036038101906101be9190611a7a565b6103a3565b6040516101d09190611ad5565b60405180910390f35b6101f360048036038101906101ee9190611a7a565b6103b7565b005b61020f600480360381019061020a9190611ba4565b6103fe565b005b61022b60048036038101906102269190611bd1565b610444565b6040516102389190611aff565b60405180910390f35b61025b60048036038101906102569190611a7a565b610456565b005b61026561049d565b60405161027291906119bf565b60405180910390f35b61029560048036038101906102909190611a7a565b6104ac565b6040516102a29190611ad5565b60405180910390f35b6102c560048036038101906102c09190611a7a565b6104c1565b6040516102d29190611ad5565b60405180910390f35b6102f560048036038101906102f09190611bfe565b6104f6565b6040516103029190611aff565b60405180910390f35b606061031561050a565b905090565b6000604060048161032b9190611c6d565b6000369050101561033b57600080fd5b610346338585610519565b91505092915050565b6000610359610594565b905090565b6000606060048161036f9190611c6d565b6000369050101561037f57600080fd5b61038a8585856105a7565b9150509392505050565b600061039e6105cb565b905090565b60006103af83836105da565b905092915050565b6000801b6103c4816105fc565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca96103ee8161063f565b6103f8848461064c565b50505050565b6000801b61040b816105fc565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca96104358161063f565b61043f33846106d5565b505050565b600061044f8261075e565b9050919050565b6000801b610463816105fc565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca961048d8161063f565b61049784846106d5565b50505050565b60606104a76107b0565b905090565b60006104b93384846107bf565b905092915050565b600060406004816104d29190611c6d565b600036905010156104e257600080fd5b6104ed3385856107e3565b91505092915050565b60006105028383610a81565b905092915050565b6060610514610a95565b905090565b60008060001b610528816105fc565b60008314806105405750600061053e3386610a81565b145b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611ced565b60405180910390fd5b61058a858585610b30565b9150509392505050565b600061059e610b46565b60020154905090565b60006105b4843384610b73565b6105bf8484846107e3565b50600190509392505050565b60006105d5610bd8565b905090565b60008060001b6105e9816105fc565b6105f38484610bf8565b91505092915050565b61060581610c59565b1561063c576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6106498133610c8c565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b290611d59565b60405180910390fd5b6106c760008383610cdd565b6106d18282610dcf565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90611dc5565b60405180910390fd5b61075082600083610cdd565b61075a8282610eb9565b5050565b6000610768610b46565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606107ba61101d565b905090565b60008060001b6107ce816105fc565b6107d98585856110b8565b9150509392505050565b600061080f7f58ee1fe68bf578a184572569d41aaa78ecfab9e6f520cea3fbeb3b18c9312f95856110d0565b80610840575061083f7f2e5b542f3df308d4afea2a0a7e615a38af6134400e948efd7c0f1693129e069a846110d0565b5b1561085757610850848484611146565b9050610a7a565b600061271090506000610868611244565b61ffff1690506000610878611265565b61ffff1690506000610893828461128690919063ffffffff16565b905060006108e2600a6108d460056108c6896108b8888e61129c90919063ffffffff16565b6112b290919063ffffffff16565b61128690919063ffffffff16565b6112b290919063ffffffff16565b90506000610931600a61092360056109158a6109078a8f61129c90919063ffffffff16565b6112b290919063ffffffff16565b61128690919063ffffffff16565b6112b290919063ffffffff16565b9050600061094882846112c890919063ffffffff16565b9050600061095f848b6112c890919063ffffffff16565b9050600061096e8d8d84611146565b9050806109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a790611e31565b60405180910390fd5b6000831115610a0e576109cb8d6109c56112de565b85611146565b905080610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0490611e9d565b60405180910390fd5b5b6000841115610a6c57610a298d610a23611311565b86611146565b905080610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6290611f09565b60405180910390fd5b5b505050505050505050600190505b9392505050565b6000610a8d8383611344565b905092915050565b6060610a9f6113d4565b6000018054610aad90611f58565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad990611f58565b8015610b265780601f10610afb57610100808354040283529160200191610b26565b820191906000526020600020905b815481529060010190602001808311610b0957829003601f168201915b5050505050905090565b6000610b3d848484611401565b90509392505050565b6000807fe9a7f3ff2959ae3f6e4713ab171289ebc2fa74daee48b6806f4ee628214ba41890508091505090565b6000610b7f8484611344565b905080821115610bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbb90611fd5565b60405180910390fd5b610bd18484848403611401565b5050505050565b6000610be26113d4565b60020160009054906101000a900460ff16905090565b600080610c053385611344565b9050828101811115610c43576040517fd256efb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c503385858401611401565b91505092915050565b6000610c636115da565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b610c968282611607565b610cd95781816040517f521dcf0d000000000000000000000000000000000000000000000000000000008152600401610cd092919061201d565b60405180910390fd5b5050565b6000801b610cea816105fc565b610d147ff068a4043b7899a312f6fe21b5b3a74d16e144a513eb6a345b2c713987c93b55856110d0565b15610d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4b90612092565b60405180910390fd5b610d7e7fc2f91dd6e7debe58ff6f83f765bc16170e3d00c80756fde41c280108425bbd47846110d0565b15610dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db5906120fe565b60405180910390fd5b610dc98484846116a8565b50505050565b6000610dd9610b46565b905081816002016000828254610def9190611c6d565b92505081905550818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e479190611c6d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eac9190611aff565b60405180910390a3505050565b6000610ec3610b46565b905060008160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610f4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f459061216a565b60405180910390fd5b8281038260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082826002016000828254610faa919061218a565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161100f9190611aff565b60405180910390a350505050565b60606110276113d4565b600101805461103590611f58565b80601f016020809104026020016040519081016040528092919081815260200182805461106190611f58565b80156110ae5780601f10611083576101008083540402835291602001916110ae565b820191906000526020600020905b81548152906001019060200180831161109157829003601f168201915b5050505050905090565b60006110c5848484610b73565b600190509392505050565b6000806110db6116ad565b905080600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036111b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ad9061220a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121c90612276565b60405180910390fd5b611230848484610cdd565b61123b8484846116da565b90509392505050565b600061124e611882565b60010160149054906101000a900461ffff16905090565b600061126f611882565b60020160149054906101000a900461ffff16905090565b600081836112949190611c6d565b905092915050565b600081836112aa9190612296565b905092915050565b600081836112c09190612307565b905092915050565b600081836112d6919061218a565b905092915050565b60006112e8611882565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061131b611882565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061134e610b46565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f08f0a4c6d91dd69feb0d369e358138ae9e369f563f1cc74f7107ce442013481590508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146890612384565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d7906123f0565b60405180910390fd5b816114e9610b46565b60010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516115c79190611aff565b60405180910390a3600190509392505050565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b6000806116126118af565b905061169f838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206001016118dc90919063ffffffff16565b91505092915050565b505050565b6000807f7fb8776fdb93079091f516133d7bb98c82f37f53f39f39f153c42a90e5e5891290508091505090565b6000806116e5610b46565b905060008160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080841115611770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117679061245c565b60405180910390fd5b8381038260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118099190611c6d565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161186d9190611aff565b60405180910390a36001925050509392505050565b6000807f3fcd443ff091d114942f25e5c03d43d2601e2157aed61f34014e948af05ef25190508091505090565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b6000611904836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61190c565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561196957808201518184015260208101905061194e565b60008484015250505050565b6000601f19601f8301169050919050565b60006119918261192f565b61199b818561193a565b93506119ab81856020860161194b565b6119b481611975565b840191505092915050565b600060208201905081810360008301526119d98184611986565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a11826119e6565b9050919050565b611a2181611a06565b8114611a2c57600080fd5b50565b600081359050611a3e81611a18565b92915050565b6000819050919050565b611a5781611a44565b8114611a6257600080fd5b50565b600081359050611a7481611a4e565b92915050565b60008060408385031215611a9157611a906119e1565b5b6000611a9f85828601611a2f565b9250506020611ab085828601611a65565b9150509250929050565b60008115159050919050565b611acf81611aba565b82525050565b6000602082019050611aea6000830184611ac6565b92915050565b611af981611a44565b82525050565b6000602082019050611b146000830184611af0565b92915050565b600080600060608486031215611b3357611b326119e1565b5b6000611b4186828701611a2f565b9350506020611b5286828701611a2f565b9250506040611b6386828701611a65565b9150509250925092565b600060ff82169050919050565b611b8381611b6d565b82525050565b6000602082019050611b9e6000830184611b7a565b92915050565b600060208284031215611bba57611bb96119e1565b5b6000611bc884828501611a65565b91505092915050565b600060208284031215611be757611be66119e1565b5b6000611bf584828501611a2f565b91505092915050565b60008060408385031215611c1557611c146119e1565b5b6000611c2385828601611a2f565b9250506020611c3485828601611a2f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c7882611a44565b9150611c8383611a44565b9250828201905080821115611c9b57611c9a611c3e565b5b92915050565b7f417070726f76653a207a65726f20666972737400000000000000000000000000600082015250565b6000611cd760138361193a565b9150611ce282611ca1565b602082019050919050565b60006020820190508181036000830152611d0681611cca565b9050919050565b7f4d696e74546f5a65726f41646472657373000000000000000000000000000000600082015250565b6000611d4360118361193a565b9150611d4e82611d0d565b602082019050919050565b60006020820190508181036000830152611d7281611d36565b9050919050565b7f4275726e46726f6d5a65726f4164647265737300000000000000000000000000600082015250565b6000611daf60138361193a565b9150611dba82611d79565b602082019050919050565b60006020820190508181036000830152611dde81611da2565b9050919050565b7f5472616e73666572206572726f72000000000000000000000000000000000000600082015250565b6000611e1b600e8361193a565b9150611e2682611de5565b602082019050919050565b60006020820190508181036000830152611e4a81611e0e565b9050919050565b7f47656e6572616c20666565207472616e73666572206572726f72000000000000600082015250565b6000611e87601a8361193a565b9150611e9282611e51565b602082019050919050565b60006020820190508181036000830152611eb681611e7a565b9050919050565b7f506f6f6c20666565207472616e73666572206572726f72000000000000000000600082015250565b6000611ef360178361193a565b9150611efe82611ebd565b602082019050919050565b60006020820190508181036000830152611f2281611ee6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f7057607f821691505b602082108103611f8357611f82611f29565b5b50919050565b7f496e73756666696369656e74416c6c6f77616e63650000000000000000000000600082015250565b6000611fbf60158361193a565b9150611fca82611f89565b602082019050919050565b60006020820190508181036000830152611fee81611fb2565b9050919050565b6000819050919050565b61200881611ff5565b82525050565b61201781611a06565b82525050565b60006040820190506120326000830185611fff565b61203f602083018461200e565b9392505050565b7f426c61636b6c6973743a2073656e646572000000000000000000000000000000600082015250565b600061207c60118361193a565b915061208782612046565b602082019050919050565b600060208201905081810360008301526120ab8161206f565b9050919050565b7f426c61636b6c6973743a20726563697069656e74000000000000000000000000600082015250565b60006120e860148361193a565b91506120f3826120b2565b602082019050919050565b60006020820190508181036000830152612117816120db565b9050919050565b7f4275726e4578636565647342616c616e63650000000000000000000000000000600082015250565b600061215460128361193a565b915061215f8261211e565b602082019050919050565b6000602082019050818103600083015261218381612147565b9050919050565b600061219582611a44565b91506121a083611a44565b92508282039050818111156121b8576121b7611c3e565b5b92915050565b7f5472616e7366657246726f6d5a65726f41646472657373000000000000000000600082015250565b60006121f460178361193a565b91506121ff826121be565b602082019050919050565b60006020820190508181036000830152612223816121e7565b9050919050565b7f5472616e73666572546f5a65726f416464726573730000000000000000000000600082015250565b600061226060158361193a565b915061226b8261222a565b602082019050919050565b6000602082019050818103600083015261228f81612253565b9050919050565b60006122a182611a44565b91506122ac83611a44565b92508282026122ba81611a44565b915082820484148315176122d1576122d0611c3e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061231282611a44565b915061231d83611a44565b92508261232d5761232c6122d8565b5b828204905092915050565b7f417070726f766546726f6d5a65726f4164647265737300000000000000000000600082015250565b600061236e60168361193a565b915061237982612338565b602082019050919050565b6000602082019050818103600083015261239d81612361565b9050919050565b7f417070726f7665546f5a65726f41646472657373000000000000000000000000600082015250565b60006123da60148361193a565b91506123e5826123a4565b602082019050919050565b60006020820190508181036000830152612409816123cd565b9050919050565b7f5472616e736665724578636565647342616c616e636500000000000000000000600082015250565b600061244660168361193a565b915061245182612410565b602082019050919050565b6000602082019050818103600083015261247581612439565b905091905056fea26469706673582212209a3f59d297b199846b66640bdfde37d3e6b276c69bfb1395ed2745b4ffec35e664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b411461025d578063a457c2d71461027b578063a9059cbb146102ab578063dd62ed3e146102db576100ea565b806342966c68146101f557806370a082311461021157806379cc679014610241576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806340c10f19146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f761030b565b60405161010491906119bf565b60405180910390f35b61012760048036038101906101229190611a7a565b61031a565b6040516101349190611ad5565b60405180910390f35b61014561034f565b6040516101529190611aff565b60405180910390f35b61017560048036038101906101709190611b1a565b61035e565b6040516101829190611ad5565b60405180910390f35b610193610394565b6040516101a09190611b89565b60405180910390f35b6101c360048036038101906101be9190611a7a565b6103a3565b6040516101d09190611ad5565b60405180910390f35b6101f360048036038101906101ee9190611a7a565b6103b7565b005b61020f600480360381019061020a9190611ba4565b6103fe565b005b61022b60048036038101906102269190611bd1565b610444565b6040516102389190611aff565b60405180910390f35b61025b60048036038101906102569190611a7a565b610456565b005b61026561049d565b60405161027291906119bf565b60405180910390f35b61029560048036038101906102909190611a7a565b6104ac565b6040516102a29190611ad5565b60405180910390f35b6102c560048036038101906102c09190611a7a565b6104c1565b6040516102d29190611ad5565b60405180910390f35b6102f560048036038101906102f09190611bfe565b6104f6565b6040516103029190611aff565b60405180910390f35b606061031561050a565b905090565b6000604060048161032b9190611c6d565b6000369050101561033b57600080fd5b610346338585610519565b91505092915050565b6000610359610594565b905090565b6000606060048161036f9190611c6d565b6000369050101561037f57600080fd5b61038a8585856105a7565b9150509392505050565b600061039e6105cb565b905090565b60006103af83836105da565b905092915050565b6000801b6103c4816105fc565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca96103ee8161063f565b6103f8848461064c565b50505050565b6000801b61040b816105fc565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca96104358161063f565b61043f33846106d5565b505050565b600061044f8261075e565b9050919050565b6000801b610463816105fc565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca961048d8161063f565b61049784846106d5565b50505050565b60606104a76107b0565b905090565b60006104b93384846107bf565b905092915050565b600060406004816104d29190611c6d565b600036905010156104e257600080fd5b6104ed3385856107e3565b91505092915050565b60006105028383610a81565b905092915050565b6060610514610a95565b905090565b60008060001b610528816105fc565b60008314806105405750600061053e3386610a81565b145b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611ced565b60405180910390fd5b61058a858585610b30565b9150509392505050565b600061059e610b46565b60020154905090565b60006105b4843384610b73565b6105bf8484846107e3565b50600190509392505050565b60006105d5610bd8565b905090565b60008060001b6105e9816105fc565b6105f38484610bf8565b91505092915050565b61060581610c59565b1561063c576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6106498133610c8c565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b290611d59565b60405180910390fd5b6106c760008383610cdd565b6106d18282610dcf565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90611dc5565b60405180910390fd5b61075082600083610cdd565b61075a8282610eb9565b5050565b6000610768610b46565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606107ba61101d565b905090565b60008060001b6107ce816105fc565b6107d98585856110b8565b9150509392505050565b600061080f7f58ee1fe68bf578a184572569d41aaa78ecfab9e6f520cea3fbeb3b18c9312f95856110d0565b80610840575061083f7f2e5b542f3df308d4afea2a0a7e615a38af6134400e948efd7c0f1693129e069a846110d0565b5b1561085757610850848484611146565b9050610a7a565b600061271090506000610868611244565b61ffff1690506000610878611265565b61ffff1690506000610893828461128690919063ffffffff16565b905060006108e2600a6108d460056108c6896108b8888e61129c90919063ffffffff16565b6112b290919063ffffffff16565b61128690919063ffffffff16565b6112b290919063ffffffff16565b90506000610931600a61092360056109158a6109078a8f61129c90919063ffffffff16565b6112b290919063ffffffff16565b61128690919063ffffffff16565b6112b290919063ffffffff16565b9050600061094882846112c890919063ffffffff16565b9050600061095f848b6112c890919063ffffffff16565b9050600061096e8d8d84611146565b9050806109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a790611e31565b60405180910390fd5b6000831115610a0e576109cb8d6109c56112de565b85611146565b905080610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0490611e9d565b60405180910390fd5b5b6000841115610a6c57610a298d610a23611311565b86611146565b905080610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6290611f09565b60405180910390fd5b5b505050505050505050600190505b9392505050565b6000610a8d8383611344565b905092915050565b6060610a9f6113d4565b6000018054610aad90611f58565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad990611f58565b8015610b265780601f10610afb57610100808354040283529160200191610b26565b820191906000526020600020905b815481529060010190602001808311610b0957829003601f168201915b5050505050905090565b6000610b3d848484611401565b90509392505050565b6000807fe9a7f3ff2959ae3f6e4713ab171289ebc2fa74daee48b6806f4ee628214ba41890508091505090565b6000610b7f8484611344565b905080821115610bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbb90611fd5565b60405180910390fd5b610bd18484848403611401565b5050505050565b6000610be26113d4565b60020160009054906101000a900460ff16905090565b600080610c053385611344565b9050828101811115610c43576040517fd256efb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c503385858401611401565b91505092915050565b6000610c636115da565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b610c968282611607565b610cd95781816040517f521dcf0d000000000000000000000000000000000000000000000000000000008152600401610cd092919061201d565b60405180910390fd5b5050565b6000801b610cea816105fc565b610d147ff068a4043b7899a312f6fe21b5b3a74d16e144a513eb6a345b2c713987c93b55856110d0565b15610d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4b90612092565b60405180910390fd5b610d7e7fc2f91dd6e7debe58ff6f83f765bc16170e3d00c80756fde41c280108425bbd47846110d0565b15610dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db5906120fe565b60405180910390fd5b610dc98484846116a8565b50505050565b6000610dd9610b46565b905081816002016000828254610def9190611c6d565b92505081905550818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e479190611c6d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eac9190611aff565b60405180910390a3505050565b6000610ec3610b46565b905060008160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610f4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f459061216a565b60405180910390fd5b8281038260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082826002016000828254610faa919061218a565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161100f9190611aff565b60405180910390a350505050565b60606110276113d4565b600101805461103590611f58565b80601f016020809104026020016040519081016040528092919081815260200182805461106190611f58565b80156110ae5780601f10611083576101008083540402835291602001916110ae565b820191906000526020600020905b81548152906001019060200180831161109157829003601f168201915b5050505050905090565b60006110c5848484610b73565b600190509392505050565b6000806110db6116ad565b905080600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036111b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ad9061220a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121c90612276565b60405180910390fd5b611230848484610cdd565b61123b8484846116da565b90509392505050565b600061124e611882565b60010160149054906101000a900461ffff16905090565b600061126f611882565b60020160149054906101000a900461ffff16905090565b600081836112949190611c6d565b905092915050565b600081836112aa9190612296565b905092915050565b600081836112c09190612307565b905092915050565b600081836112d6919061218a565b905092915050565b60006112e8611882565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061131b611882565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061134e610b46565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f08f0a4c6d91dd69feb0d369e358138ae9e369f563f1cc74f7107ce442013481590508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146890612384565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d7906123f0565b60405180910390fd5b816114e9610b46565b60010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516115c79190611aff565b60405180910390a3600190509392505050565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b6000806116126118af565b905061169f838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206001016118dc90919063ffffffff16565b91505092915050565b505050565b6000807f7fb8776fdb93079091f516133d7bb98c82f37f53f39f39f153c42a90e5e5891290508091505090565b6000806116e5610b46565b905060008160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080841115611770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117679061245c565b60405180910390fd5b8381038260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118099190611c6d565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161186d9190611aff565b60405180910390a36001925050509392505050565b6000807f3fcd443ff091d114942f25e5c03d43d2601e2157aed61f34014e948af05ef25190508091505090565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b6000611904836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61190c565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561196957808201518184015260208101905061194e565b60008484015250505050565b6000601f19601f8301169050919050565b60006119918261192f565b61199b818561193a565b93506119ab81856020860161194b565b6119b481611975565b840191505092915050565b600060208201905081810360008301526119d98184611986565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a11826119e6565b9050919050565b611a2181611a06565b8114611a2c57600080fd5b50565b600081359050611a3e81611a18565b92915050565b6000819050919050565b611a5781611a44565b8114611a6257600080fd5b50565b600081359050611a7481611a4e565b92915050565b60008060408385031215611a9157611a906119e1565b5b6000611a9f85828601611a2f565b9250506020611ab085828601611a65565b9150509250929050565b60008115159050919050565b611acf81611aba565b82525050565b6000602082019050611aea6000830184611ac6565b92915050565b611af981611a44565b82525050565b6000602082019050611b146000830184611af0565b92915050565b600080600060608486031215611b3357611b326119e1565b5b6000611b4186828701611a2f565b9350506020611b5286828701611a2f565b9250506040611b6386828701611a65565b9150509250925092565b600060ff82169050919050565b611b8381611b6d565b82525050565b6000602082019050611b9e6000830184611b7a565b92915050565b600060208284031215611bba57611bb96119e1565b5b6000611bc884828501611a65565b91505092915050565b600060208284031215611be757611be66119e1565b5b6000611bf584828501611a2f565b91505092915050565b60008060408385031215611c1557611c146119e1565b5b6000611c2385828601611a2f565b9250506020611c3485828601611a2f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c7882611a44565b9150611c8383611a44565b9250828201905080821115611c9b57611c9a611c3e565b5b92915050565b7f417070726f76653a207a65726f20666972737400000000000000000000000000600082015250565b6000611cd760138361193a565b9150611ce282611ca1565b602082019050919050565b60006020820190508181036000830152611d0681611cca565b9050919050565b7f4d696e74546f5a65726f41646472657373000000000000000000000000000000600082015250565b6000611d4360118361193a565b9150611d4e82611d0d565b602082019050919050565b60006020820190508181036000830152611d7281611d36565b9050919050565b7f4275726e46726f6d5a65726f4164647265737300000000000000000000000000600082015250565b6000611daf60138361193a565b9150611dba82611d79565b602082019050919050565b60006020820190508181036000830152611dde81611da2565b9050919050565b7f5472616e73666572206572726f72000000000000000000000000000000000000600082015250565b6000611e1b600e8361193a565b9150611e2682611de5565b602082019050919050565b60006020820190508181036000830152611e4a81611e0e565b9050919050565b7f47656e6572616c20666565207472616e73666572206572726f72000000000000600082015250565b6000611e87601a8361193a565b9150611e9282611e51565b602082019050919050565b60006020820190508181036000830152611eb681611e7a565b9050919050565b7f506f6f6c20666565207472616e73666572206572726f72000000000000000000600082015250565b6000611ef360178361193a565b9150611efe82611ebd565b602082019050919050565b60006020820190508181036000830152611f2281611ee6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f7057607f821691505b602082108103611f8357611f82611f29565b5b50919050565b7f496e73756666696369656e74416c6c6f77616e63650000000000000000000000600082015250565b6000611fbf60158361193a565b9150611fca82611f89565b602082019050919050565b60006020820190508181036000830152611fee81611fb2565b9050919050565b6000819050919050565b61200881611ff5565b82525050565b61201781611a06565b82525050565b60006040820190506120326000830185611fff565b61203f602083018461200e565b9392505050565b7f426c61636b6c6973743a2073656e646572000000000000000000000000000000600082015250565b600061207c60118361193a565b915061208782612046565b602082019050919050565b600060208201905081810360008301526120ab8161206f565b9050919050565b7f426c61636b6c6973743a20726563697069656e74000000000000000000000000600082015250565b60006120e860148361193a565b91506120f3826120b2565b602082019050919050565b60006020820190508181036000830152612117816120db565b9050919050565b7f4275726e4578636565647342616c616e63650000000000000000000000000000600082015250565b600061215460128361193a565b915061215f8261211e565b602082019050919050565b6000602082019050818103600083015261218381612147565b9050919050565b600061219582611a44565b91506121a083611a44565b92508282039050818111156121b8576121b7611c3e565b5b92915050565b7f5472616e7366657246726f6d5a65726f41646472657373000000000000000000600082015250565b60006121f460178361193a565b91506121ff826121be565b602082019050919050565b60006020820190508181036000830152612223816121e7565b9050919050565b7f5472616e73666572546f5a65726f416464726573730000000000000000000000600082015250565b600061226060158361193a565b915061226b8261222a565b602082019050919050565b6000602082019050818103600083015261228f81612253565b9050919050565b60006122a182611a44565b91506122ac83611a44565b92508282026122ba81611a44565b915082820484148315176122d1576122d0611c3e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061231282611a44565b915061231d83611a44565b92508261232d5761232c6122d8565b5b828204905092915050565b7f417070726f766546726f6d5a65726f4164647265737300000000000000000000600082015250565b600061236e60168361193a565b915061237982612338565b602082019050919050565b6000602082019050818103600083015261239d81612361565b9050919050565b7f417070726f7665546f5a65726f41646472657373000000000000000000000000600082015250565b60006123da60148361193a565b91506123e5826123a4565b602082019050919050565b60006020820190508181036000830152612409816123cd565b9050919050565b7f5472616e736665724578636565647342616c616e636500000000000000000000600082015250565b600061244660168361193a565b915061245182612410565b602082019050919050565b6000602082019050818103600083015261247581612439565b905091905056fea26469706673582212209a3f59d297b199846b66640bdfde37d3e6b276c69bfb1395ed2745b4ffec35e664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "holder": "approver of allowance",
          "spender": "recipient of allowance"
        },
        "returns": {
          "allowance_": "token allowance"
        }
      },
      "approve(address,uint256)": {
        "params": {
          "amount": "quantity of tokens approved for spending",
          "spender": "recipient of allowance"
        },
        "returns": {
          "status_": "success status (always true; otherwise function should revert)"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "balance_": "token balance"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "token decimals"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "amount": "quantity by which to decrease allowance",
          "spender": "address whose allowance to decrease"
        },
        "returns": {
          "_0": "success status (always true; otherwise function will revert)"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "amount": "quantity by which to increase allowance",
          "spender": "address whose allowance to increase"
        },
        "returns": {
          "_0": "success status (always true; otherwise function will revert)"
        }
      },
      "name()": {
        "returns": {
          "_0": "token name"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "token symbol"
        }
      },
      "totalSupply()": {
        "returns": {
          "totalSupply_": "token supply"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "quantity of tokens transferred",
          "recipient": "beneficiary of transfer"
        },
        "returns": {
          "status_": "success status (always true; otherwise function should revert)"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "holder": "holder of tokens prior to transfer",
          "recipient": "beneficiary of token transfer"
        },
        "returns": {
          "status_": "success status (always true; otherwise function should revert)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "query the allowance granted from given holder to given spender"
      },
      "approve(address,uint256)": {
        "notice": "enable spender to spend tokens on behalf of holder"
      },
      "balanceOf(address)": {
        "notice": "query the token balance of given account"
      },
      "decimals()": {
        "notice": "return token decimals, generally used only for display purposes"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "decrease spend amount granted to spender"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "increase spend amount granted to spender"
      },
      "name()": {
        "notice": "return token name"
      },
      "symbol()": {
        "notice": "return token symbol"
      },
      "totalSupply()": {
        "notice": "query the total minted token supply"
      },
      "transfer(address,uint256)": {
        "notice": "transfer tokens from holder to recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer tokens to given recipient on behalf of given holder"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}