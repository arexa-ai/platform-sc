{
  "address": "0x42a66E8727d0C8558e0BaB71B9C73E3DD330edcD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetedPausable__TargetedPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getGeneralFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneralFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "generalFee",
          "type": "uint16"
        }
      ],
      "name": "setGeneralFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "generalFeeAddress",
          "type": "address"
        }
      ],
      "name": "setGeneralFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "poolFee",
          "type": "uint16"
        }
      ],
      "name": "setPoolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFeeAddress",
          "type": "address"
        }
      ],
      "name": "setPoolFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "setURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8101ca9aab70d8c1d20cfbe3d90a42253f8f8f89ba097b3bf5fa2620bbc17452",
  "receipt": {
    "to": null,
    "from": "0x4C05aDEfa78d634818c8a5c02368f82f38147Fd9",
    "contractAddress": "0x42a66E8727d0C8558e0BaB71B9C73E3DD330edcD",
    "transactionIndex": 84,
    "gasUsed": "1251268",
    "logsBloom": "0x
    "blockHash": "0x7a0337b60f933e358d8c2361111762174ee4750e518201a9617a2715a3535b47",
    "transactionHash": "0x8101ca9aab70d8c1d20cfbe3d90a42253f8f8f89ba097b3bf5fa2620bbc17452",
    "logs": [],
    "blockNumber": 20138358,
    "cumulativeGasUsed": "8313724",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "25456762afbb335c7bf52b327b7b18f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetedPausable__TargetedPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getGeneralFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneralFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"generalFee\",\"type\":\"uint16\"}],\"name\":\"setGeneralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"generalFeeAddress\",\"type\":\"address\"}],\"name\":\"setGeneralFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolFee\",\"type\":\"uint16\"}],\"name\":\"setPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFeeAddress\",\"type\":\"address\"}],\"name\":\"setPoolFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArexaToken/ArexaTokenAdminFacet.sol\":\"ArexaTokenAdminFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ArexaToken/ArexaTokenAdminFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { TokenAdminFacet } from \\\"../base/ERC20Diamond/TokenAdminFacet.sol\\\";\\r\\n\\r\\ncontract ArexaTokenAdminFacet is TokenAdminFacet {}\\r\\n\",\"keccak256\":\"0x422bd7d9dec93bb353a6bf7810a1efda458b86ca50d4a7df239ab12d89408a40\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibAccessControlStorage.sol\\\";\\r\\n\\r\\nimport { IERC173 } from \\\"../../interfaces/IERC173.sol\\\";\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { UintUtils } from \\\"../../utils/UintUtils.sol\\\";\\r\\nimport { AddressUtils } from \\\"../../utils/AddressUtils.sol\\\";\\r\\n\\r\\nlibrary LibAccessControl {\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing UintUtils for uint256;\\r\\n\\tusing AddressUtils for address;\\r\\n\\r\\n\\terror Ownable__NotOwner();\\r\\n\\terror Ownable__NotTransitiveOwner();\\r\\n\\r\\n\\terror AccessDenied(bytes32 role, address account);\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\tevent RoleAdminChanged(address indexed owner, bytes32 role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\tevent RoleGranted(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\tevent RoleRevoked(address indexed owner, bytes32 role, address indexed account, address indexed sender);\\r\\n\\r\\n\\tbytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n\\tfunction _setOwner(address _newOwner) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\taddress previousOwner = acls.owner;\\r\\n\\t\\tacls.owner = _newOwner;\\r\\n\\r\\n\\t\\t//Init DEFAULT_ADMIN_ROLE to _newOwner\\r\\n\\t\\tLibAccessControl._grantRole(LibAccessControl.DEFAULT_ADMIN_ROLE, _newOwner);\\r\\n\\r\\n\\t\\temit OwnershipTransferred(previousOwner, _newOwner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _owner() internal view returns (address owner_) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\towner_ = acls.owner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transitiveOwner() internal view returns (address owner_) {\\r\\n\\t\\towner_ = LibAccessControl._owner();\\r\\n\\r\\n\\t\\twhile (owner_.isContract()) {\\r\\n\\t\\t\\ttry IERC173(owner_).owner() returns (address transitiveOwner) {\\r\\n\\t\\t\\t\\towner_ = transitiveOwner;\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _owner(), \\\"Not owner!\\\");\\r\\n\\t\\tif (msg.sender != _owner()) {\\r\\n\\t\\t\\trevert Ownable__NotOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _enforceIsTransitiveOwner() internal view {\\r\\n\\t\\t//require(msg.sender == _transitiveOwner(), \\\"Not transitive owner!\\\");\\r\\n\\t\\tif (msg.sender != _transitiveOwner()) {\\r\\n\\t\\t\\trevert Ownable__NotTransitiveOwner();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice assign role to given account\\r\\n\\t * @param _role role to assign\\r\\n\\t * @param _account recipient of role assignment\\r\\n\\t */\\r\\n\\tfunction _grantRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\tacls.roles[acls.owner][_role].members.add(_account);\\r\\n\\t\\t\\temit RoleGranted(acls.owner, _role, _account, msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice unassign role from given account\\r\\n\\t * @param _role role to unassign\\r\\n\\t * @param _account account to revokeAccessControlStorage\\r\\n\\t */\\r\\n\\tfunction _revokeRole(bytes32 _role, address _account) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\t// require(_role != LibAccessControl.DEFAULT_ADMIN_ROLE && _account != acls.owner);\\r\\n\\t\\tacls.roles[acls.owner][_role].members.remove(_account);\\r\\n\\t\\temit RoleRevoked(acls.owner, _role, _account, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice relinquish role\\r\\n\\t * @param _role role to relinquish\\r\\n\\t */\\r\\n\\tfunction _renounceRole(bytes32 _role) internal {\\r\\n\\t\\t_revokeRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query one of the accounts that have role of the project\\r\\n\\t * @dev WARNING: When using _getProjectRoleMember and _getProjectRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _index index of role member\\r\\n\\t */\\r\\n\\tfunction _getRoleMember(bytes32 _role, uint256 _index) internal view returns (address) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.at(_index);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query the number of accounts that have role.\\r\\n\\t * @dev WARNING: When using _getRoleMember and _getRoleMemberCount, make sure you perform all queries on the same block.\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _getRoleMemberCount(address, bytes32 _role) internal view returns (uint256) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query whether role is assigned to account\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account account to query\\r\\n\\t * @return bool whether role is assigned to account\\r\\n\\t */\\r\\n\\tfunction _hasRole(bytes32 _role, address _account) internal view returns (bool) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].members.contains(_account);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if sender does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role) internal view {\\r\\n\\t\\t_checkRole(_role, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if given account does not have given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @param _account to query\\r\\n\\t */\\r\\n\\tfunction _checkRole(bytes32 _role, address _account) internal view {\\r\\n\\t\\tif (!_hasRole(_role, _account)) {\\r\\n\\t\\t\\trevert AccessDenied({ role: _role, account: _account });\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query admin role for given role\\r\\n\\t * @param _role role to query\\r\\n\\t * @return admin role\\r\\n\\t */\\r\\n\\tfunction _getRoleAdmin(bytes32 _role) internal view returns (bytes32) {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\treturn acls.roles[acls.owner][_role].adminRole;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set role as admin role\\r\\n\\t * @param _role role to set\\r\\n\\t * @param _adminRole admin role to set\\r\\n\\t */\\r\\n\\tfunction _setRoleAdmin(bytes32 _role, bytes32 _adminRole) internal {\\r\\n\\t\\tAccessControllStorage storage acls = LibAccessControlStorage.layout();\\r\\n\\t\\tbytes32 previousAdminRole = _getRoleAdmin(_role);\\r\\n\\t\\tacls.roles[acls.owner][_role].adminRole = _adminRole;\\r\\n\\t\\temit RoleAdminChanged(acls.owner, _role, previousAdminRole, _adminRole);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2c0da263bd49a5c7a6d1a9d8866bbe5936b43f3ee39bf2c9dc4600d7045b49e9\",\"license\":\"MIT\"},\"contracts/base/AccessControl/LibAccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport \\\"./RoleData.sol\\\";\\r\\n\\r\\nstruct AccessControllStorage {\\r\\n\\t//owner => role => adminRole, members mapping\\r\\n\\taddress owner;\\r\\n\\tmapping(address => mapping(bytes32 => RoleData)) roles;\\r\\n}\\r\\n\\r\\nlibrary LibAccessControlStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.access-control.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (AccessControllStorage storage acls_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tacls_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9ae5597ade94391b4f367368b5e6f5b4d15dce1e430e217ee5e549a652c8eb8b\",\"license\":\"MIT\"},\"contracts/base/AccessControl/ModifierRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibAccessControl } from \\\"./LibAccessControl.sol\\\";\\r\\n\\r\\nabstract contract ModifierRole {\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyTransitiveOwner() {\\r\\n\\t\\tLibAccessControl._enforceIsTransitiveOwner();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRole(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(role);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRoleAdmin(bytes32 role) {\\r\\n\\t\\tLibAccessControl._checkRole(LibAccessControl._getRoleAdmin(role));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9a5f770772e3b447a47bbcacd0afe131c78c98bc87219da9e3dfe10a261ad64e\",\"license\":\"MIT\"},\"contracts/base/AccessControl/RoleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RoleData {\\r\\n\\tbytes32 adminRole;\\r\\n\\tEnumerableSet.AddressSet members;\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d7eaf459b09f21c482e9b9df5b5c99572095e79174de3621f5ec9e32413ac7\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport { IDiamondCut } from \\\"../../interfaces/IDiamondCut.sol\\\";\\n\\nimport { LibAccessControl } from \\\"../AccessControl/LibAccessControl.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tfunction setDiamondAddress(address _diamondAddress) internal {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(ds.diamondAddress == address(0), \\\"Already initialized!\\\");\\n\\t\\tds.diamondAddress = _diamondAddress;\\n\\t}\\n\\n\\tfunction getDiamondAddress() internal view returns (address) {\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\treturn ds.diamondAddress;\\n\\t}\\n\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tLibAccessControl._setOwner(_newOwner);\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\tLibAccessControl._enforceIsOwner();\\n\\t}\\n\\n\\t// Internal function version of diamondCut\\n\\tfunction diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n\\t\\t\\tIDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n\\t\\t\\tif (action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\t\\taddFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\t\\treplaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else if (action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\t\\tremoveFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n\\t\\tuint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\t\\t// add new facet address if it does not exist\\n\\t\\tif (selectorPosition == 0) {\\n\\t\\t\\taddFacet(ds, _facetAddress);\\n\\t\\t}\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\trequire(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t\\taddFunction(ds, selector, selectorPosition, _facetAddress);\\n\\t\\t\\tselectorPosition++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n\\t\\trequire(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n\\t\\tDiamondStorage storage ds = LibDiamondStorage.layout();\\n\\t\\t// if function does not exist then do nothing and return\\n\\t\\trequire(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n\\t\\tfor (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n\\t\\t\\tbytes4 selector = _functionSelectors[selectorIndex];\\n\\t\\t\\taddress oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\t\\t\\tremoveFunction(ds, oldFacetAddress, selector);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n\\t\\tenforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n\\t\\tds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n\\t\\tds.facetAddresses.push(_facetAddress);\\n\\t}\\n\\n\\tfunction addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n\\t\\tds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n\\t\\tds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n\\t}\\n\\n\\tfunction removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n\\t\\trequire(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n\\t\\t// an immutable function is a function defined directly in a diamond\\n\\t\\trequire(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n\\t\\t// replace selector with last selector, then delete last selector\\n\\t\\tuint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n\\t\\tuint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n\\t\\t// if not the same then replace _selector with lastSelector\\n\\t\\tif (selectorPosition != lastSelectorPosition) {\\n\\t\\t\\tbytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n\\t\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n\\t\\t\\tds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n\\t\\t}\\n\\t\\t// delete the last selector\\n\\t\\tds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n\\t\\tdelete ds.selectorToFacetAndPosition[_selector];\\n\\n\\t\\t// if no more selectors for facet address then delete the facet address\\n\\t\\tif (lastSelectorPosition == 0) {\\n\\t\\t\\t// replace facet address with last facet address and delete last facet address\\n\\t\\t\\tuint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n\\t\\t\\tuint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t\\tif (facetAddressPosition != lastFacetAddressPosition) {\\n\\t\\t\\t\\taddress lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n\\t\\t\\t\\tds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n\\t\\t\\t\\tds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n\\t\\t\\t}\\n\\t\\t\\tds.facetAddresses.pop();\\n\\t\\t\\tdelete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tenforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\tif (!success) {\\n\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t// bubble up error\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(error)\\n\\t\\t\\t\\t\\trevert(add(32, error), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert InitializationFunctionReverted(_init, _calldata);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f15f134edd02ce19fb55ce2c33ef634b5766bef24fee8dcc69f53d04bfe5219\",\"license\":\"MIT\"},\"contracts/base/Diamond/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct FacetAddressAndPosition {\\r\\n\\taddress facetAddress;\\r\\n\\tuint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n}\\r\\n\\r\\nstruct FacetFunctionSelectors {\\r\\n\\tbytes4[] functionSelectors;\\r\\n\\tuint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n}\\r\\n\\r\\nstruct DiamondStorage {\\r\\n\\taddress diamondAddress;\\r\\n\\t// maps function selector to the facet address and\\r\\n\\t// the position of the selector in the facetFunctionSelectors.selectors array\\r\\n\\tmapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n\\t// maps facet addresses to function selectors\\r\\n\\tmapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n\\t// facet addresses\\r\\n\\taddress[] facetAddresses;\\r\\n\\t// Used to query if a contract implements an interface.\\r\\n\\t// Used to implement ERC-165.\\r\\n\\tmapping(bytes4 => bool) supportedInterfaces;\\r\\n\\t//the whole diamond is paused or not\\r\\n\\tbool paused;\\r\\n}\\r\\n\\r\\nlibrary LibDiamondStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.diamond.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (DiamondStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x13a60db83059255e32f692e0508aaa9af49568a363e3aae233ae80aab0c75098\",\"license\":\"MIT\"},\"contracts/base/ERC20Diamond/TokenAdminFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibAccessControl } from \\\"../AccessControl/LibAccessControl.sol\\\";\\r\\nimport { LibTargetedPausable } from \\\"../TargetedPausable/LibTargetedPausable.sol\\\";\\r\\n\\r\\nimport { LibCustomERC20Extension } from \\\"../ERC20Token/LibCustomERC20Extension.sol\\\";\\r\\nimport { LibTokenConst } from \\\"../ERC20Token/LibTokenConst.sol\\\";\\r\\n\\r\\nimport { ModifierRole } from \\\"../AccessControl/ModifierRole.sol\\\";\\r\\nimport { ModifierPausable } from \\\"../TargetedPausable/ModifierPausable.sol\\\";\\r\\nimport { CallProtection } from \\\"../Shared/ProtectedCall.sol\\\";\\r\\n\\r\\nabstract contract TokenAdminFacet is CallProtection, ModifierRole, ModifierPausable {\\r\\n\\tfunction getTreasuryAddress() external view protectedCall returns (address) {\\r\\n\\t\\treturn LibCustomERC20Extension.getTreasuryAddress();\\r\\n\\t}\\r\\n\\r\\n\\tfunction setTreasuryAddress(\\r\\n\\t\\taddress treasuryAddress\\r\\n\\t) external protectedCall whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TOKEN_ADMIN_ROLE) {\\r\\n\\t\\tLibCustomERC20Extension.setTreasuryAddress(treasuryAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getURL() external view protectedCall returns (string memory) {\\r\\n\\t\\treturn LibCustomERC20Extension.getURL();\\r\\n\\t}\\r\\n\\r\\n\\tfunction setURL(string calldata url) external protectedCall whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TOKEN_ADMIN_ROLE) {\\r\\n\\t\\tLibCustomERC20Extension.setURL(url);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getGeneralFeeAddress() external view protectedCall returns (address) {\\r\\n\\t\\treturn LibCustomERC20Extension.getGeneralFeeAddress();\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGeneralFeeAddress(\\r\\n\\t\\taddress generalFeeAddress\\r\\n\\t) external protectedCall whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TOKEN_ADMIN_ROLE) {\\r\\n\\t\\tLibCustomERC20Extension.setGeneralFeeAddress(generalFeeAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getGeneralFee() external view protectedCall returns (uint16) {\\r\\n\\t\\treturn LibCustomERC20Extension.getGeneralFee();\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGeneralFee(\\r\\n\\t\\tuint16 generalFee\\r\\n\\t) external protectedCall whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TOKEN_ADMIN_ROLE) {\\r\\n\\t\\tLibCustomERC20Extension.setGeneralFee(generalFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPoolFee() external view protectedCall returns (uint16) {\\r\\n\\t\\treturn LibCustomERC20Extension.getPoolFee();\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPoolFee(uint16 poolFee) external protectedCall whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TOKEN_ADMIN_ROLE) {\\r\\n\\t\\tLibCustomERC20Extension.setPoolFee(poolFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPoolFeeAddress() external view protectedCall returns (address) {\\r\\n\\t\\treturn LibCustomERC20Extension.getPoolFeeAddress();\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPoolFeeAddress(\\r\\n\\t\\taddress poolFeeAddress\\r\\n\\t) external protectedCall whenNotPaused(LibTokenConst.FULL) onlyRole(LibTokenConst.TOKEN_ADMIN_ROLE) {\\r\\n\\t\\tLibCustomERC20Extension.setPoolFeeAddress(poolFeeAddress);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x370683117bd7d46f6b03630b7d737f2662c60cae8a1ab499f5c0b1406978a634\",\"license\":\"MIT\"},\"contracts/base/ERC20Token/LibCustomERC20Extension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibCustomERC20ExtensionStorage } from \\\"./LibCustomERC20ExtensionStorage.sol\\\";\\r\\n\\r\\nlibrary LibCustomERC20Extension {\\r\\n\\t///LibBlockBenERC20ExtensionStorage\\r\\n\\t//URL, Fee and other usfull extension will come here\\r\\n\\r\\n\\tfunction getTreasuryAddress() internal view returns (address) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().treasuryAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setTreasuryAddress(address _treasuryAddress) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().treasuryAddress = _treasuryAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getURL() internal view returns (string memory) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().url;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setURL(string calldata _url) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().url = _url;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getGeneralFeeAddress() internal view returns (address) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().generalFeeAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGeneralFeeAddress(address _generalFeeAddress) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().generalFeeAddress = _generalFeeAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getGeneralFee() internal view returns (uint16) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().generalFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGeneralFee(uint16 _generalFee) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().generalFee = _generalFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPoolFee() internal view returns (uint16) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().poolFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPoolFee(uint16 _poolFee) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().poolFee = _poolFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPoolFeeAddress() internal view returns (address) {\\r\\n\\t\\treturn LibCustomERC20ExtensionStorage.layout().poolFeeAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPoolFeeAddress(address _poolFeeAddress) internal {\\r\\n\\t\\tLibCustomERC20ExtensionStorage.layout().poolFeeAddress = _poolFeeAddress;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x048040c75f57d1523bdbeba36649147dd8deabf1e4bb56b0b240cd0b09a95d73\",\"license\":\"MIT\"},\"contracts/base/ERC20Token/LibCustomERC20ExtensionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct CustomERC20ExtensionStorage {\\r\\n\\tstring url;\\r\\n\\taddress treasuryAddress;\\r\\n\\tuint16 generalFee;\\r\\n\\taddress generalFeeAddress;\\r\\n\\tuint16 poolFee;\\r\\n\\taddress poolFeeAddress;\\r\\n}\\r\\n\\r\\nlibrary LibCustomERC20ExtensionStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.constract.custom-erc20-extension.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (CustomERC20ExtensionStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x5b6d88193d951af905eea41b69a32bf52b5ba66db4fcb1c9acda0cd5887e688a\",\"license\":\"MIT\"},\"contracts/base/ERC20Token/LibTokenConst.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary LibTokenConst {\\r\\n\\t//Pausable\\r\\n\\tbytes32 public constant FULL = 0x00;\\r\\n\\r\\n\\t//Roles\\r\\n\\tbytes32 public constant TOKEN_ADMIN_ROLE = keccak256(\\\"TOKEN_ADMIN_ROLE\\\");\\r\\n\\tbytes32 public constant TREASURY_ROLE = keccak256(\\\"TREASURY_ROLE\\\");\\r\\n\\tbytes32 public constant AML_ROLE = keccak256(\\\"AML_ROLE\\\");\\r\\n\\tbytes32 public constant COMPLIANCE_ROLE = keccak256(\\\"COMPLIANCE_ROLE\\\");\\r\\n\\r\\n\\t//BlackWhite lists, these accounts could not send/receive token\\r\\n\\tbytes32 public constant SENDER_BL = keccak256(\\\"SENDER_BLACKLIST\\\");\\r\\n\\tbytes32 public constant RECIPIENT_BL = keccak256(\\\"RECIPIENT_BLACKLIST\\\");\\r\\n\\r\\n\\t//FreeFee WhiteList, these accounts don't pay fee...\\r\\n\\tbytes32 public constant SENDER_FREE_FEE_WL = keccak256(\\\"SENDER_FREE_FEE_WHITELIST\\\");\\r\\n\\tbytes32 public constant RECIPIENT_FREE_FEE_WL = keccak256(\\\"RECIPIENT_FREE_FEE_WHITELIST\\\");\\r\\n}\\r\\n\",\"keccak256\":\"0x8a47f5923aab3b5eb5608f4ae833920797fae1b776e5c7a1ea97e4cb362d746c\",\"license\":\"MIT\"},\"contracts/base/Shared/ProtectedCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibDiamond } from \\\"../Diamond/LibDiamond.sol\\\";\\r\\n\\r\\ncontract CallProtection {\\r\\n\\tmodifier protectedCall() {\\r\\n\\t\\trequire(address(this) == LibDiamond.getDiamondAddress(), \\\"NOT_ALLOWED\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xc15612f2411ec779b6036b14a4495f5b402178ebb0864d727cb5cc01f917b798\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibTargetedPausableStorage.sol\\\";\\r\\n\\r\\nlibrary LibTargetedPausable {\\r\\n\\terror TargetedPausable__TargetedPaused();\\r\\n\\terror TargetedPausable__NotTargetedPaused();\\r\\n\\r\\n\\t//target: what was paused\\r\\n\\t//account: the operator who is paused the target\\r\\n\\tevent TargetedPaused(bytes32 indexed target, address indexed account);\\r\\n\\r\\n\\t//target: what was unpaused\\r\\n\\t//account: the operator who is unpaused the target\\r\\n\\tevent TargetedUnpaused(bytes32 target, address indexed account);\\r\\n\\r\\n\\tfunction whenNotPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (LibTargetedPausable.paused(_target)) revert TargetedPausable__TargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenPaused(bytes32 _target) internal view {\\r\\n\\t\\tif (!LibTargetedPausable.paused(_target)) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t}\\r\\n\\r\\n\\tfunction paused(bytes32 _target) internal view returns (bool paused_) {\\r\\n\\t\\tpaused_ = LibTargetedPausableStorage.layout().paused[_target];\\r\\n\\t}\\r\\n\\r\\n\\tfunction pause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (ps.paused[_target]) revert TargetedPausable__TargetedPaused();\\r\\n\\t\\tps.paused[_target] = true;\\r\\n\\t\\temit TargetedPaused(_target, _operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause(bytes32 _target, address _operator) internal {\\r\\n\\t\\tTargetedPausableStorage storage ps = LibTargetedPausableStorage.layout();\\r\\n\\t\\tif (!ps.paused[_target]) revert TargetedPausable__NotTargetedPaused();\\r\\n\\t\\tps.paused[_target] = false;\\r\\n\\t\\tdelete ps.paused[_target];\\r\\n\\t\\temit TargetedUnpaused(_target, _operator);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x8380f056a3357d3405ab36740a5eb5b0be64e8f837c1a6a2456431e9a30ae053\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/LibTargetedPausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct TargetedPausableStorage {\\r\\n\\tmapping(bytes32 => bool) paused;\\r\\n}\\r\\n\\r\\nlibrary LibTargetedPausableStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.targeted-pausable.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TargetedPausableStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3a8d48db3da71fb9df91fe855d32fb0dd634556499739c6c277842021c92438d\",\"license\":\"MIT\"},\"contracts/base/TargetedPausable/ModifierPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibTargetedPausable } from \\\"./LibTargetedPausable.sol\\\";\\r\\n\\r\\nabstract contract ModifierPausable {\\r\\n\\t//\\r\\n\\tmodifier whenNotPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable.whenNotPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenPaused(bytes32 target) {\\r\\n\\t\\tLibTargetedPausable.whenPaused(target);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7ff443365b09572428f1808517faf1a3fff06cc7543da6e57045c0641f660aa5\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n\\tenum FacetCutAction {\\n\\t\\tAdd,\\n\\t\\tReplace,\\n\\t\\tRemove\\n\\t}\\n\\t// Add=0, Replace=1, Remove=2\\n\\n\\tstruct FacetCut {\\n\\t\\taddress facetAddress;\\n\\t\\tFacetCutAction action;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n\\tevent DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x38a0a1b25fb31d2205f5aaedb20f1788a38bc4147a4a20ee030335b7cdbaa0c4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\ninterface IERC173 {\\r\\n\\t/// @dev This emits when ownership of a contract changes.\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/// @notice Get the address of the owner\\r\\n\\t/// @return owner_ The address of the owner.\\r\\n\\tfunction owner() external view returns (address owner_);\\r\\n\\r\\n\\t/// @notice Set the address of the new owner of the contract\\r\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n\\t/// @param _newOwner The address of the new owner of the contract\\r\\n\\tfunction transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x92d3f89d7077a9b49b41fd69091ce8f8c1b20c5695dafbbb4b13e7b6f0d6e6ef\",\"license\":\"MIT\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { UintUtils } from \\\"./UintUtils.sol\\\";\\n\\nlibrary AddressUtils {\\n\\tusing UintUtils for uint256;\\n\\n\\terror AddressUtils__InsufficientBalance();\\n\\terror AddressUtils__NotContract();\\n\\terror AddressUtils__SendValueFailed();\\n\\n\\tfunction toString(address account) internal pure returns (string memory) {\\n\\t\\treturn uint256(uint160(account)).toHexString(20);\\n\\t}\\n\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\tfunction sendValue(address payable account, uint256 amount) internal {\\n\\t\\t(bool success, ) = account.call{ value: amount }(\\\"\\\");\\n\\t\\tif (!success) revert AddressUtils__SendValueFailed();\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"AddressUtils: failed low-level call\\\");\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n\\t\\treturn _functionCallWithValue(target, data, 0, error);\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"AddressUtils: failed low-level call with value\\\");\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) internal returns (bytes memory) {\\n\\t\\tif (value > address(this).balance) revert AddressUtils__InsufficientBalance();\\n\\t\\treturn _functionCallWithValue(target, data, value, error);\\n\\t}\\n\\n\\t/**\\n\\t * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n\\t * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n\\t * @param target recipient of call\\n\\t * @param gasAmount gas allowance for call\\n\\t * @param value native token value to include in call\\n\\t * @param maxCopy maximum number of bytes to copy from return data\\n\\t * @param data encoded call data\\n\\t * @return success whether call is successful\\n\\t * @return returnData copied return data\\n\\t */\\n\\tfunction excessivelySafeCall(\\n\\t\\taddress target,\\n\\t\\tuint256 gasAmount,\\n\\t\\tuint256 value,\\n\\t\\tuint16 maxCopy,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool success, bytes memory returnData) {\\n\\t\\treturnData = new bytes(maxCopy);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// execute external call via assembly to avoid automatic copying of return data\\n\\t\\t\\tsuccess := call(gasAmount, target, value, add(data, 0x20), mload(data), 0, 0)\\n\\n\\t\\t\\t// determine whether to limit amount of data to copy\\n\\t\\t\\tlet toCopy := returndatasize()\\n\\n\\t\\t\\tif gt(toCopy, maxCopy) {\\n\\t\\t\\t\\ttoCopy := maxCopy\\n\\t\\t\\t}\\n\\n\\t\\t\\t// store the length of the copied bytes\\n\\t\\t\\tmstore(returnData, toCopy)\\n\\n\\t\\t\\t// copy the bytes from returndata[0:toCopy]\\n\\t\\t\\treturndatacopy(add(returnData, 0x20), 0, toCopy)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) private returns (bytes memory) {\\n\\t\\tif (!isContract(target)) revert AddressUtils__NotContract();\\n\\n\\t\\t(bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n\\t\\tif (success) {\\n\\t\\t\\treturn returnData;\\n\\t\\t} else if (returnData.length > 0) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet returnData_size := mload(returnData)\\n\\t\\t\\t\\trevert(add(32, returnData), returnData_size)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\trevert(error);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7dec1466e1e606394a35fa837156a011f761ac6a6e9097b89a348fad1f2f692\",\"license\":\"MIT\"},\"contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n\\terror EnumerableSet__IndexOutOfBounds();\\n\\n\\tstruct Set {\\n\\t\\tbytes32[] _values;\\n\\t\\t// 1-indexed to allow 0 to signify nonexistence\\n\\t\\tmapping(bytes32 => uint256) _indexes;\\n\\t}\\n\\n\\tstruct Bytes32Set {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct AddressSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct UintSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n\\t\\treturn _at(set._inner, index);\\n\\t}\\n\\n\\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\n\\t\\treturn address(uint160(uint256(_at(set._inner, index))));\\n\\t}\\n\\n\\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n\\t\\treturn uint256(_at(set._inner, index));\\n\\t}\\n\\n\\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, value);\\n\\t}\\n\\n\\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction indexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, value);\\n\\t}\\n\\n\\tfunction indexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction indexOf(UintSet storage set, uint256 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(AddressSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(UintSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, value);\\n\\t}\\n\\n\\tfunction add(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, value);\\n\\t}\\n\\n\\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction toArray(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n\\t\\treturn set._inner._values;\\n\\t}\\n\\n\\tfunction toArray(AddressSet storage set) internal view returns (address[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\taddress[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction toArray(UintSet storage set) internal view returns (uint256[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\tuint256[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\n\\t\\tif (index >= set._values.length) revert EnumerableSet__IndexOutOfBounds();\\n\\t\\treturn set._values[index];\\n\\t}\\n\\n\\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\n\\t\\treturn set._indexes[value] != 0;\\n\\t}\\n\\n\\tfunction _indexOf(Set storage set, bytes32 value) private view returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn set._indexes[value] - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _length(Set storage set) private view returns (uint256) {\\n\\t\\treturn set._values.length;\\n\\t}\\n\\n\\tfunction _add(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tif (!_contains(set, value)) {\\n\\t\\t\\tset._values.push(value);\\n\\t\\t\\tset._indexes[value] = set._values.length;\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _remove(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tuint256 valueIndex = set._indexes[value];\\n\\n\\t\\tif (valueIndex != 0) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tbytes32 last = set._values[set._values.length - 1];\\n\\n\\t\\t\\t\\t// move last value to now-vacant index\\n\\n\\t\\t\\t\\tset._values[valueIndex - 1] = last;\\n\\t\\t\\t\\tset._indexes[last] = valueIndex;\\n\\t\\t\\t}\\n\\t\\t\\t// clear last index\\n\\n\\t\\t\\tset._values.pop();\\n\\t\\t\\tdelete set._indexes[value];\\n\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x442e9fd507b659095a1fec47f8cb6e540442165217af05db1afa2703a993e038\",\"license\":\"MIT\"},\"contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n\\terror UintUtils__InsufficientHexLength();\\n\\n\\tbytes16 private constant HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n\\tfunction add(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? sub(a, -b) : a + uint256(b);\\n\\t}\\n\\n\\tfunction sub(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? add(a, -b) : a - uint256(b);\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 length = 0;\\n\\n\\t\\tfor (uint256 temp = value; temp != 0; temp >>= 8) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tlength++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\t\\tbuffer[i] = HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\t\\tvalue >>= 4;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\",\"keccak256\":\"0xec4d89ef08ad402e0c8b30b8e4e135991009384aa72f0cb7c6165721ec5050e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506115c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80636605bfda116100715780636605bfda146101675780636741fad21461018357806377343408146101a1578063e0024604146101bd578063f011a756146101db578063f9916d39146101f9576100b4565b80630dfe43f8146100b95780630e5a06b6146100d75780631a2b8150146100f357806325daa8f91461010f57806338bcdc1c1461012b57806361a1698e14610149575b600080fd5b6100c1610215565b6040516100ce9190610f4e565b60405180910390f35b6100f160048036038101906100ec9190610f9f565b610299565b005b61010d60048036038101906101089190611006565b610353565b005b61012960048036038101906101249190611006565b61040d565b005b6101336104c7565b60405161014091906110c3565b60405180910390f35b61015161054b565b60405161015e9190610f4e565b60405180910390f35b610181600480360381019061017c9190610f9f565b6105cf565b005b61018b610689565b60405161019891906110f4565b60405180910390f35b6101bb60048036038101906101b69190611174565b61070d565b005b6101c56107c9565b6040516101d29190610f4e565b60405180910390f35b6101e361084d565b6040516101f091906110f4565b60405180910390f35b610213600480360381019061020e9190610f9f565b6108d1565b005b600061021f61098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461028c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102839061120d565b60405180910390fd5b6102946109c3565b905090565b6102a161098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461030e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103059061120d565b60405180910390fd5b6000801b61031b816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd661034581610a39565b61034e83610a46565b505050565b61035b61098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146103c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bf9061120d565b60405180910390fd5b6000801b6103d5816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd66103ff81610a39565b61040883610a93565b505050565b61041561098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610482576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104799061120d565b60405180910390fd5b6000801b61048f816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd66104b981610a39565b6104c283610abc565b505050565b60606104d161098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461053e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105359061120d565b60405180910390fd5b610546610ae5565b905090565b600061055561098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b99061120d565b60405180910390fd5b6105ca610b80565b905090565b6105d761098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b9061120d565b60405180910390fd5b6000801b610651816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd661067b81610a39565b61068483610bb3565b505050565b600061069361098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f79061120d565b60405180910390fd5b610708610c00565b905090565b61071561098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610782576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107799061120d565b60405180910390fd5b6000801b61078f816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd66107b981610a39565b6107c38484610c21565b50505050565b60006107d361098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610840576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108379061120d565b60405180910390fd5b610848610c40565b905090565b600061085761098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb9061120d565b60405180910390fd5b6108cc610c73565b905090565b6108d961098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d9061120d565b60405180910390fd5b6000801b610953816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd661097d81610a39565b61098683610c94565b505050565b600080610996610ce1565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006109cd610d0e565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109ff81610d3b565b15610a36576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b610a438133610d6e565b50565b80610a4f610d0e565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80610a9c610d0e565b60020160146101000a81548161ffff021916908361ffff16021790555050565b80610ac5610d0e565b60010160146101000a81548161ffff021916908361ffff16021790555050565b6060610aef610d0e565b6000018054610afd9061125c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b299061125c565b8015610b765780601f10610b4b57610100808354040283529160200191610b76565b820191906000526020600020905b815481529060010190602001808311610b5957829003601f168201915b5050505050905090565b6000610b8a610d0e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80610bbc610d0e565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610c0a610d0e565b60020160149054906101000a900461ffff16905090565b8181610c2b610d0e565b6000019182610c3b92919061147d565b505050565b6000610c4a610d0e565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610c7d610d0e565b60010160149054906101000a900461ffff16905090565b80610c9d610d0e565b60020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000807f3fcd443ff091d114942f25e5c03d43d2601e2157aed61f34014e948af05ef25190508091505090565b6000610d45610dbf565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b610d788282610dec565b610dbb5781816040517f521dcf0d000000000000000000000000000000000000000000000000000000008152600401610db2929190611566565b60405180910390fd5b5050565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b600080610df7610e8d565b9050610e84838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600101610eba90919063ffffffff16565b91505092915050565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b6000610ee2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610eea565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3882610f0d565b9050919050565b610f4881610f2d565b82525050565b6000602082019050610f636000830184610f3f565b92915050565b600080fd5b600080fd5b610f7c81610f2d565b8114610f8757600080fd5b50565b600081359050610f9981610f73565b92915050565b600060208284031215610fb557610fb4610f69565b5b6000610fc384828501610f8a565b91505092915050565b600061ffff82169050919050565b610fe381610fcc565b8114610fee57600080fd5b50565b60008135905061100081610fda565b92915050565b60006020828403121561101c5761101b610f69565b5b600061102a84828501610ff1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561106d578082015181840152602081019050611052565b60008484015250505050565b6000601f19601f8301169050919050565b600061109582611033565b61109f818561103e565b93506110af81856020860161104f565b6110b881611079565b840191505092915050565b600060208201905081810360008301526110dd818461108a565b905092915050565b6110ee81610fcc565b82525050565b600060208201905061110960008301846110e5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111345761113361110f565b5b8235905067ffffffffffffffff81111561115157611150611114565b5b60208301915083600182028301111561116d5761116c611119565b5b9250929050565b6000806020838503121561118b5761118a610f69565b5b600083013567ffffffffffffffff8111156111a9576111a8610f6e565b5b6111b58582860161111e565b92509250509250929050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b60006111f7600b8361103e565b9150611202826111c1565b602082019050919050565b60006020820190508181036000830152611226816111ea565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127457607f821691505b6020821081036112875761128661122d565b5b50919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026113297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826112ec565b61133386836112ec565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061137a6113756113708461134b565b611355565b61134b565b9050919050565b6000819050919050565b6113948361135f565b6113a86113a082611381565b8484546112f9565b825550505050565b600090565b6113bd6113b0565b6113c881848461138b565b505050565b5b818110156113ec576113e16000826113b5565b6001810190506113ce565b5050565b601f82111561143157611402816112c7565b61140b846112dc565b8101602085101561141a578190505b61142e611426856112dc565b8301826113cd565b50505b505050565b600082821c905092915050565b600061145460001984600802611436565b1980831691505092915050565b600061146d8383611443565b9150826002028217905092915050565b611487838361128d565b67ffffffffffffffff8111156114a05761149f611298565b5b6114aa825461125c565b6114b58282856113f0565b6000601f8311600181146114e457600084156114d2578287013590505b6114dc8582611461565b865550611544565b601f1984166114f2866112c7565b60005b8281101561151a578489013582556001820191506020850194506020810190506114f5565b868310156115375784890135611533601f891682611443565b8355505b6001600288020188555050505b50505050505050565b6000819050919050565b6115608161154d565b82525050565b600060408201905061157b6000830185611557565b6115886020830184610f3f565b939250505056fea2646970667358221220fa019504f809a6ef930a71bb933e354dc09e0b68526751f3f1081642802bb96964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80636605bfda116100715780636605bfda146101675780636741fad21461018357806377343408146101a1578063e0024604146101bd578063f011a756146101db578063f9916d39146101f9576100b4565b80630dfe43f8146100b95780630e5a06b6146100d75780631a2b8150146100f357806325daa8f91461010f57806338bcdc1c1461012b57806361a1698e14610149575b600080fd5b6100c1610215565b6040516100ce9190610f4e565b60405180910390f35b6100f160048036038101906100ec9190610f9f565b610299565b005b61010d60048036038101906101089190611006565b610353565b005b61012960048036038101906101249190611006565b61040d565b005b6101336104c7565b60405161014091906110c3565b60405180910390f35b61015161054b565b60405161015e9190610f4e565b60405180910390f35b610181600480360381019061017c9190610f9f565b6105cf565b005b61018b610689565b60405161019891906110f4565b60405180910390f35b6101bb60048036038101906101b69190611174565b61070d565b005b6101c56107c9565b6040516101d29190610f4e565b60405180910390f35b6101e361084d565b6040516101f091906110f4565b60405180910390f35b610213600480360381019061020e9190610f9f565b6108d1565b005b600061021f61098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461028c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102839061120d565b60405180910390fd5b6102946109c3565b905090565b6102a161098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461030e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103059061120d565b60405180910390fd5b6000801b61031b816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd661034581610a39565b61034e83610a46565b505050565b61035b61098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146103c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bf9061120d565b60405180910390fd5b6000801b6103d5816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd66103ff81610a39565b61040883610a93565b505050565b61041561098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610482576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104799061120d565b60405180910390fd5b6000801b61048f816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd66104b981610a39565b6104c283610abc565b505050565b60606104d161098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461053e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105359061120d565b60405180910390fd5b610546610ae5565b905090565b600061055561098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b99061120d565b60405180910390fd5b6105ca610b80565b905090565b6105d761098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b9061120d565b60405180910390fd5b6000801b610651816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd661067b81610a39565b61068483610bb3565b505050565b600061069361098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f79061120d565b60405180910390fd5b610708610c00565b905090565b61071561098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610782576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107799061120d565b60405180910390fd5b6000801b61078f816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd66107b981610a39565b6107c38484610c21565b50505050565b60006107d361098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610840576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108379061120d565b60405180910390fd5b610848610c40565b905090565b600061085761098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb9061120d565b60405180910390fd5b6108cc610c73565b905090565b6108d961098b565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d9061120d565b60405180910390fd5b6000801b610953816109f6565b7f9e262e26e9d5bf97da5c389e15529a31bb2b13d89967a4f6eab01792567d5fd661097d81610a39565b61098683610c94565b505050565b600080610996610ce1565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006109cd610d0e565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109ff81610d3b565b15610a36576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b610a438133610d6e565b50565b80610a4f610d0e565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80610a9c610d0e565b60020160146101000a81548161ffff021916908361ffff16021790555050565b80610ac5610d0e565b60010160146101000a81548161ffff021916908361ffff16021790555050565b6060610aef610d0e565b6000018054610afd9061125c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b299061125c565b8015610b765780601f10610b4b57610100808354040283529160200191610b76565b820191906000526020600020905b815481529060010190602001808311610b5957829003601f168201915b5050505050905090565b6000610b8a610d0e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80610bbc610d0e565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610c0a610d0e565b60020160149054906101000a900461ffff16905090565b8181610c2b610d0e565b6000019182610c3b92919061147d565b505050565b6000610c4a610d0e565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610c7d610d0e565b60010160149054906101000a900461ffff16905090565b80610c9d610d0e565b60020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000807f3fcd443ff091d114942f25e5c03d43d2601e2157aed61f34014e948af05ef25190508091505090565b6000610d45610dbf565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b610d788282610dec565b610dbb5781816040517f521dcf0d000000000000000000000000000000000000000000000000000000008152600401610db2929190611566565b60405180910390fd5b5050565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b600080610df7610e8d565b9050610e84838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600101610eba90919063ffffffff16565b91505092915050565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b6000610ee2836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610eea565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3882610f0d565b9050919050565b610f4881610f2d565b82525050565b6000602082019050610f636000830184610f3f565b92915050565b600080fd5b600080fd5b610f7c81610f2d565b8114610f8757600080fd5b50565b600081359050610f9981610f73565b92915050565b600060208284031215610fb557610fb4610f69565b5b6000610fc384828501610f8a565b91505092915050565b600061ffff82169050919050565b610fe381610fcc565b8114610fee57600080fd5b50565b60008135905061100081610fda565b92915050565b60006020828403121561101c5761101b610f69565b5b600061102a84828501610ff1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561106d578082015181840152602081019050611052565b60008484015250505050565b6000601f19601f8301169050919050565b600061109582611033565b61109f818561103e565b93506110af81856020860161104f565b6110b881611079565b840191505092915050565b600060208201905081810360008301526110dd818461108a565b905092915050565b6110ee81610fcc565b82525050565b600060208201905061110960008301846110e5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111345761113361110f565b5b8235905067ffffffffffffffff81111561115157611150611114565b5b60208301915083600182028301111561116d5761116c611119565b5b9250929050565b6000806020838503121561118b5761118a610f69565b5b600083013567ffffffffffffffff8111156111a9576111a8610f6e565b5b6111b58582860161111e565b92509250509250929050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b60006111f7600b8361103e565b9150611202826111c1565b602082019050919050565b60006020820190508181036000830152611226816111ea565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127457607f821691505b6020821081036112875761128661122d565b5b50919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026113297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826112ec565b61133386836112ec565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061137a6113756113708461134b565b611355565b61134b565b9050919050565b6000819050919050565b6113948361135f565b6113a86113a082611381565b8484546112f9565b825550505050565b600090565b6113bd6113b0565b6113c881848461138b565b505050565b5b818110156113ec576113e16000826113b5565b6001810190506113ce565b5050565b601f82111561143157611402816112c7565b61140b846112dc565b8101602085101561141a578190505b61142e611426856112dc565b8301826113cd565b50505b505050565b600082821c905092915050565b600061145460001984600802611436565b1980831691505092915050565b600061146d8383611443565b9150826002028217905092915050565b611487838361128d565b67ffffffffffffffff8111156114a05761149f611298565b5b6114aa825461125c565b6114b58282856113f0565b6000601f8311600181146114e457600084156114d2578287013590505b6114dc8582611461565b865550611544565b601f1984166114f2866112c7565b60005b8281101561151a578489013582556001820191506020850194506020810190506114f5565b868310156115375784890135611533601f891682611443565b8355505b6001600288020188555050505b50505050505050565b6000819050919050565b6115608161154d565b82525050565b600060408201905061157b6000830185611557565b6115886020830184610f3f565b939250505056fea2646970667358221220fa019504f809a6ef930a71bb933e354dc09e0b68526751f3f1081642802bb96964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}