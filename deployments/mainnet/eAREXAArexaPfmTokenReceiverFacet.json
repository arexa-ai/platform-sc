{
  "address": "0xc7BFC2e125785fd7B7E395F2A7eB3aDfCaC90e70",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3a7f9b681c73e9920b3e6ae7e4634e7181ac0298df381629dfb088c1c62a8c3",
  "receipt": {
    "to": null,
    "from": "0x4C05aDEfa78d634818c8a5c02368f82f38147Fd9",
    "contractAddress": "0xc7BFC2e125785fd7B7E395F2A7eB3aDfCaC90e70",
    "transactionIndex": 168,
    "gasUsed": "694081",
    "logsBloom": "0x
    "blockHash": "0xbec0bbd0088d2fad56bc317c59778ba110b1701414584e4da1f79bdf942a5669",
    "transactionHash": "0xe3a7f9b681c73e9920b3e6ae7e4634e7181ac0298df381629dfb088c1c62a8c3",
    "logs": [],
    "blockNumber": 19752711,
    "cumulativeGasUsed": "8922458",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "29368373a120d2797ab4b44183bb832e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated. This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s). This function MUST revert if it rejects the transfer(s). Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format\",\"_from\":\"The address which previously owned the token\",\"_ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"_operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"_values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated. This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer. This function MUST revert if it rejects the transfer. Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format\",\"_from\":\"The address which previously owned the token\",\"_id\":\"The ID of the token being transferred\",\"_operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"_value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handle the receipt of multiple ERC1155 token types.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle the receipt of a single ERC1155 token type.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArexaPlatform/ArexaPfmTokenReceiverFacet.sol\":\"ArexaPfmTokenReceiverFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ArexaPlatform/ArexaPfmTokenReceiverFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibERC1155 } from \\\"../base/ERC1155/base/LibERC1155.sol\\\";\\r\\n\\r\\nimport { IERC1155 } from \\\"../base/ERC1155/IERC1155.sol\\\";\\r\\nimport { IERC1155Receiver } from \\\"../base/ERC1155/IERC1155Receiver.sol\\\";\\r\\n\\r\\ncontract ArexaPfmTokenReceiverFacet is IERC1155Receiver {\\r\\n\\tconstructor() {}\\r\\n\\r\\n\\tfunction onERC1155Received(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256 _id,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) external override returns (bytes4) {\\r\\n\\t\\treturn LibERC1155.onERC1155Received(_operator, _from, _id, _value, _data);\\r\\n\\t}\\r\\n\\r\\n\\tfunction onERC1155BatchReceived(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256[] calldata _ids,\\r\\n\\t\\tuint256[] calldata _values,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) external override returns (bytes4) {\\r\\n\\t\\treturn LibERC1155.onERC1155BatchReceived(_operator, _from, _ids, _values, _data);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x4ec3e192946a24f7bea105b253474b392832f51a3cb393334213dcfcd24174da\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/LibArexaConst.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\n/**\\r\\n * Copyright (C) 2023 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary LibArexaConst {\\r\\n\\t//\\r\\n\\t//Pausable\\r\\n\\tbytes32 public constant FULL = 0x00;\\r\\n\\tbytes32 public constant SUBSCR1_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.SUBSCR1_TOKEN_TYPE));\\r\\n\\tbytes32 public constant SUBSCR2_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.SUBSCR2_TOKEN_TYPE));\\r\\n\\tbytes32 public constant TRADER_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.TRADER_TOKEN_ID));\\r\\n\\tbytes32 public constant AREXA_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.AREXA_TOKEN_ID));\\r\\n\\tbytes32 public constant MAGIC_TOKEN = keccak256(abi.encode(\\\"TOKEN\\\", LibArexaConst.MAGIC_TOKEN_ID));\\r\\n\\r\\n\\t//Roles\\r\\n\\tbytes32 public constant AREXA_ADMIN_ROLE = keccak256(\\\"AREXA_ADMIN_ROLE\\\");\\r\\n\\t//bytes32 public constant TOKEN_ADMIN_ROLE = keccak256(\\\"AREXA_TOKEN_ADMIN_ROLE\\\");\\r\\n\\t//bytes32 public constant TREASURY_ROLE = keccak256(\\\"AREXA_TREASURY_ROLE\\\");\\r\\n\\r\\n\\t//BlackWhite lists\\r\\n\\tbytes32 public constant MAGIC100_FIRST_BUYER = keccak256(\\\"MAGIC100_FIRST_BUYER\\\"); //WhiteList\\r\\n\\r\\n\\t//TokenIDs:\\r\\n\\tuint256 public constant SUBSCR1_TOKEN_TYPE = 100000000; //Tier 1, every month\\r\\n\\tuint256 public constant SUBSCR2_TOKEN_TYPE = 200000000; //Tier 2, every month\\r\\n\\tuint256 public constant TRADER_TOKEN_ID = 300000000; //Tier 3, unlimited, always mint\\r\\n\\tuint256 public constant AREXA_TOKEN_ID = 400000000; //Tier 4, 100000000 piece\\r\\n\\tuint256 public constant MAGIC_TOKEN_ID = 500000000; //Tier 5, 100 piece\\r\\n\\r\\n\\t//AREXA TOKEN POOL TYPES:\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_INVESTOR = 1; //35M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_AREXAINC = 2; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_MARKETING = 3; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_DEVELOPMENT = 4; //5M\\r\\n\\tuint8 public constant AREXA_TOKEN_POOL_RESERVED = 5; //50M\\r\\n}\\r\\n\",\"keccak256\":\"0xeedce13c6edc52af9ce86c36b4801a16333d56ea490e6d264c4b02a8d6aa3341\",\"license\":\"UNLICENCED\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformShared.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibArexaPlatformStorage.sol\\\";\\r\\nimport \\\"../../base/TokenPNL/LibTokenPNL.sol\\\";\\r\\n\\r\\nimport \\\"../LibArexaConst.sol\\\";\\r\\n\\r\\nlibrary LibArexaPlatformShared {\\r\\n\\tuint8 public constant AMOUNT_VALUE_TYPE = 0;\\r\\n\\tuint8 public constant QUANTITY_VALUE_TYPE = 1;\\r\\n\\r\\n\\tfunction getPayingToken() internal view returns (IERC20) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.payingERC20Token;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaERC20Token() internal view returns (IERC20) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\treturn arexa.arexaERC20Token;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaTokenPool(uint8 _tokenPool) internal view returns (uint256 total_, uint256 sold_) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\ttotal_ = arexa.arexaTokenPool[_tokenPool].total;\\r\\n\\t\\tsold_ = arexa.arexaTokenPool[_tokenPool].sold;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getArexaIncomeParameter(uint256 _tokenId) internal view returns (uint32 pool_, uint32 arexa_) {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\t\\tpool_ = arexa.arexaIncomeParameter[_tokenId].pool;\\r\\n\\t\\tarexa_ = arexa.arexaIncomeParameter[_tokenId].arexa;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _divideAmountPoolAndArexa(uint256 _tokenId, uint256 _value) internal {\\r\\n\\t\\tArexaPlatformStorage storage arexa = LibArexaPlatformStorage.layout();\\r\\n\\r\\n\\t\\tuint256 poolAmount = (_value * arexa.arexaIncomeParameter[_tokenId].pool) /\\r\\n\\t\\t\\t(arexa.arexaIncomeParameter[_tokenId].pool + arexa.arexaIncomeParameter[_tokenId].arexa);\\r\\n\\t\\tuint256 arexaAmount = _value - poolAmount;\\r\\n\\r\\n\\t\\tLibTokenPNL.changeTotalValue(address(arexa.payingERC20Token), LibArexaConst.AREXA_TOKEN_ID, int256(poolAmount));\\r\\n\\t\\tarexa.poolBalance += poolAmount;\\r\\n\\t\\tarexa.arexaBalance += arexaAmount;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x202814d0cc08aa441653ad942457982767319a075086b20da203f5f41413ab97\",\"license\":\"MIT\"},\"contracts/ArexaPlatform/Platform/LibArexaPlatformStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 AREXA\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct ArexaTokenPool {\\r\\n\\tuint256 total;\\r\\n\\tuint256 sold;\\r\\n}\\r\\n\\r\\nstruct ArexaIncomeParameter {\\r\\n\\tuint32 pool;\\r\\n\\tuint32 arexa;\\r\\n}\\r\\n\\r\\nstruct ArexaPlatformStorage {\\r\\n\\tmapping(uint8 => ArexaTokenPool) arexaTokenPool;\\r\\n\\tmapping(uint256 => ArexaIncomeParameter) arexaIncomeParameter;\\r\\n\\tIERC20 payingERC20Token; //USDT\\r\\n\\tuint256 poolBalance; //The \\\"pool\\\" part of the sum income\\r\\n\\tuint256 arexaBalance; //The \\\"owner\\\" part of the sum income\\r\\n\\t//tokenType => lastSubscriptionTokenId\\r\\n\\tmapping(uint256 => uint256) lastSubscriptionTokenIds;\\r\\n\\tIERC20 arexaERC20Token; //AREXA\\r\\n\\tuint256 stakedArexaERC20TokenQuantity;\\r\\n\\tuint256 poolPaidOutBalance; //The \\\"pool\\\" part of the sum outgoing\\r\\n\\tuint256 arexaPaidOutBalance; //The \\\"owner\\\" part of the sum outgoing\\r\\n}\\r\\n\\r\\nlibrary LibArexaPlatformStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.contracts.arexa-platform.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ArexaPlatformStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7d2612b5f31a147ff2a53c75d39eebc1dbe2c84afece53e74f2241f13b9abf77\",\"license\":\"MIT\"},\"contracts/base/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155.\\n */\\ninterface IERC1155 {\\n\\t/**\\n\\t * @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\n\\t * The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\\n\\t * The `_from` argument MUST be the address of the holder whose balance is decreased.\\n\\t * The `_to` argument MUST be the address of the recipient whose balance is increased.\\n\\t * The `_id` argument MUST be the token type being transferred.\\n\\t * The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n\\t * When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n\\t * When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\n\\t */\\n\\tevent TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\n\\n\\t/**\\n\\t * @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\n\\t * The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\\n\\t * The `_from` argument MUST be the address of the holder whose balance is decreased.\\n\\t * The `_to` argument MUST be the address of the recipient whose balance is increased.\\n\\t * The `_ids` argument MUST be the list of tokens being transferred.\\n\\t * The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\\n\\t * When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n\\t * When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\n\\t */\\n\\tevent TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\n\\n\\t/**\\n\\t * @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled).\\n\\t */\\n\\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\t/**\\n\\t * @dev MUST emit when the URI is updated for a token ID.\\n\\t * URIs are defined in RFC 3986.\\n\\t * The URI MUST point to a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\n\\t */\\n\\tevent URI(string _value, uint256 indexed _id);\\n\\n\\t/**\\n\\t * @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n\\t * @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n\\t * MUST revert if `_to` is the zero address.\\n\\t * MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n\\t * MUST revert on any other error.\\n\\t * MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n\\t * After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n\\t * @param _from Source address\\n\\t * @param _to Target address\\n\\t * @param _id ID of the token type\\n\\t * @param _value Transfer amount\\n\\t * @param _data Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n\\t */\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\n\\n\\t/**\\n\\t * @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\n\\t * @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n\\t * MUST revert if `_to` is the zero address.\\n\\t * MUST revert if length of `_ids` is not the same as length of `_values`.\\n\\t * MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\n\\t * MUST revert on any other error.\\n\\t * MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n\\t * Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n\\t * After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n\\t * @param _from Source address\\n\\t * @param _to Target address\\n\\t * @param _ids IDs of each token type (order and length must match _values array)\\n\\t * @param _values Transfer amounts per token type (order and length must match _ids array)\\n\\t * @param _data Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\n\\t */\\n\\tfunction safeBatchTransferFrom(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256[] calldata _ids,\\n\\t\\tuint256[] calldata _values,\\n\\t\\tbytes calldata _data\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Get the balance of an account's tokens.\\n\\t * @param _owner The address of the token holder\\n\\t * @param _id ID of the token\\n\\t * @return The _owner's balance of the token type requested\\n\\t */\\n\\tfunction balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Get the balance of multiple account/token pairs\\n\\t * @param _owners The addresses of the token holders\\n\\t * @param _ids ID of the tokens\\n\\t * @return The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\\n\\t */\\n\\tfunction balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n\\t/**\\n\\t * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n\\t * @dev MUST emit the ApprovalForAll event on success.\\n\\t * @param _operator Address to add to the set of authorized operators\\n\\t * @param _approved True if the operator is approved, false to revoke approval\\n\\t */\\n\\tfunction setApprovalForAll(address _operator, bool _approved) external;\\n\\n\\t/**\\n\\t * @notice Queries the approval status of an operator for a given owner.\\n\\t * @param _owner The owner of the tokens\\n\\t * @param _operator Address of authorized operator\\n\\t * @return True if the operator is approved, false if not\\n\\t */\\n\\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x477916adb848830f4bcb83f7afe3bc30ed32bde8d79aacd7b97f1ec08c332f84\",\"license\":\"MIT\"},\"contracts/base/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * https://eips.ethereum.org/EIPS/eip-1155.\\n */\\ninterface IERC1155Receiver {\\n\\t/**\\n\\t * @notice Handle the receipt of a single ERC1155 token type.\\n\\t * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n\\t * This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n\\t * This function MUST revert if it rejects the transfer.\\n\\t * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n\\t * @param _operator The address which initiated the transfer (i.e. msg.sender)\\n\\t * @param _from The address which previously owned the token\\n\\t * @param _id The ID of the token being transferred\\n\\t * @param _value The amount of tokens being transferred\\n\\t * @param _data Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n\\t */\\n\\tfunction onERC1155Received(\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\tuint256 _id,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data\\n\\t) external returns (bytes4);\\n\\n\\t/**\\n\\t * @notice Handle the receipt of multiple ERC1155 token types.\\n\\t * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n\\t * This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n\\t * This function MUST revert if it rejects the transfer(s).\\n\\t * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n\\t * @param _operator The address which initiated the batch transfer (i.e. msg.sender)\\n\\t * @param _from The address which previously owned the token\\n\\t * @param _ids An array containing ids of each token being transferred (order and length must match _values array)\\n\\t * @param _values An array containing amounts of each token being transferred (order and length must match _ids array)\\n\\t * @param _data Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n\\t */\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress _operator,\\n\\t\\taddress _from,\\n\\t\\tuint256[] calldata _ids,\\n\\t\\tuint256[] calldata _values,\\n\\t\\tbytes calldata _data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeba602761fec3810381b28625959f0b9053b66b7b097ea766225784ad49dfef4\",\"license\":\"MIT\"},\"contracts/base/ERC1155/base/LibERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibERC1155Storage.sol\\\";\\r\\n\\r\\nimport \\\"../customization/LibERC1155Customization.sol\\\";\\r\\n\\r\\nimport { AddressUtils } from \\\"../../../utils/AddressUtils.sol\\\";\\r\\nimport { EnumerableSet } from \\\"../../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC1155Receiver } from \\\"../IERC1155Receiver.sol\\\";\\r\\n\\r\\nerror LibERC1155__BalanceQueryZeroAddress(); //Ok\\r\\nerror LibERC1155__ArrayLengthMismatch(); //Ok\\r\\nerror LibERC1155__MintToZeroAddress(); //ok\\r\\nerror LibERC1155__BurnExceedsBalance(); ///Ok\\r\\nerror LibERC1155__BurnFromZeroAddress(); //Ok\\r\\nerror LibERC1155__ERC1155ReceiverRejected(); // OK\\r\\nerror LibERC1155__ERC1155ReceiverNotImplemented(); //ok\\r\\nerror LibERC1155__TransferExceedsBalance(); //Ok\\r\\nerror LibERC1155__TransferToZeroAddress(); //Ok\\r\\nerror LibERC1155__NotOwnerOrApproved(); //Ok\\r\\nerror LibERC1155__NotOwnerOrApprovedLimit(); //Ok\\r\\nerror LibERC1155__SelfApproval(); //OK\\r\\n\\r\\nlibrary LibERC1155 {\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n\\tevent TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\r\\n\\r\\n\\tevent ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n\\tevent URI(string value, uint256 indexed tokenId);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155Allowance\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent Approval(address indexed owner, address indexed operator, uint256 indexed id, uint256 currenctValue, uint256 newValue);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * EVENTS from IERC1155Paused\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tevent AllTokenPaused(address indexed account);\\r\\n\\r\\n\\tevent AllTokenUnpaused(address indexed account);\\r\\n\\r\\n\\tevent TokenPaused(address indexed account, uint256 indexed tokenId);\\r\\n\\r\\n\\tevent TokenUnpaused(address indexed account, uint256 indexed tokenId);\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * Usings\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tusing AddressUtils for address;\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the balance of given token held by given address\\r\\n\\t * @param _account address to query\\r\\n\\t * @param _tokenId token to query\\r\\n\\t * @return token balance\\r\\n\\t */\\r\\n\\tfunction balanceOf(address _account, uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tif (_account == address(0)) revert LibERC1155__BalanceQueryZeroAddress();\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.balances[_tokenId][_account];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query the balance of given token held by the given addresses\\r\\n\\t * @param _accounts addresses to query\\r\\n\\t * @param _tokenIds list of token IDs to query\\r\\n\\t * @return tokens' balance\\r\\n\\t */\\r\\n\\tfunction balanceOfBatch(address[] memory _accounts, uint256[] memory _tokenIds) internal view returns (uint256[] memory) {\\r\\n\\t\\trequire(_accounts.length == _tokenIds.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\r\\n\\t\\tif (_tokenIds.length != _accounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tuint256[] memory batchBalances = new uint256[](_accounts.length);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < _accounts.length; ++i) {\\r\\n\\t\\t\\tbatchBalances[i] = balanceOf(_accounts[i], _tokenIds[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn batchBalances;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice mint given quantity of tokens for given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _toAccount beneficiary of minting\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to mint\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction mint(address _operator, address _toAccount, uint256 _tokenId, uint256 _amount, bytes memory _data) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__MintToZeroAddress();\\r\\n\\r\\n\\t\\tuint256[] memory tokenIds = _asSingletonArray(_tokenId);\\r\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, address(0), _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\te1155s.balances[_tokenId][_toAccount] += _amount;\\r\\n\\t\\temit TransferSingle(_operator, address(0), _toAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, address(0), _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeTransferAcceptanceCheck(_operator, address(0), _toAccount, _tokenId, _amount, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice mint batch of tokens for given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _toAccount beneficiary of minting\\r\\n\\t * @param _tokenIds list of token IDs\\r\\n\\t * @param _amounts list of quantities of tokens to mint\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction mintBatch(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__MintToZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\t\\t\\te1155s.balances[tokenId][_toAccount] += _amounts[i];\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, address(0), _toAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(_operator, address(0), _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice burn given quantity of tokens held by given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _fromAccount holder of tokens to burn\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to burn\\r\\n\\t */\\r\\n\\tfunction burn(address _operator, address _fromAccount, uint256 _tokenId, uint256 _amount) internal {\\r\\n\\t\\tif (_fromAccount == address(0)) revert LibERC1155__BurnFromZeroAddress();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, address(0), _asSingletonArray(_tokenId), _asSingletonArray(_amount), \\\"\\\");\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\tif (_amount > e1155s.balances[_tokenId][_fromAccount]) revert LibERC1155__BurnExceedsBalance();\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te1155s.balances[_tokenId][_fromAccount] -= _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferSingle(_operator, _fromAccount, address(0), _tokenId, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice burn given batch of tokens held by given address\\r\\n\\t * @param _operator caller, msg.sender or msgSender()\\r\\n\\t * @param _fromAccount holder of tokens to burn\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to burn\\r\\n\\t */\\r\\n\\tfunction burnBatch(address _operator, address _fromAccount, uint256[] memory _tokenIds, uint256[] memory _amounts) internal {\\r\\n\\t\\tif (_fromAccount == address(0)) revert LibERC1155__BurnFromZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, address(0), _tokenIds, _amounts, \\\"\\\");\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; i++) {\\r\\n\\t\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\t\\t\\t\\tif (_amounts[i] > e1155s.balances[tokenId][_fromAccount]) revert LibERC1155__BurnExceedsBalance();\\r\\n\\t\\t\\t\\te1155s.balances[tokenId][_fromAccount] -= _amounts[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, _fromAccount, address(0), _tokenIds, _amounts);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice transfer tokens between given addresses\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction safeTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__TransferToZeroAddress();\\r\\n\\r\\n\\t\\tuint256[] memory tokenIds = _asSingletonArray(_tokenId);\\r\\n\\t\\tuint256[] memory amounts = _asSingletonArray(_amount);\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\r\\n\\t\\tuint256 senderBalance = e1155s.balances[_tokenId][_fromAccount];\\r\\n\\r\\n\\t\\tif (_amount > senderBalance) revert LibERC1155__TransferExceedsBalance();\\r\\n\\t\\tcheckAllowance(_operator, _fromAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\te1155s.balances[_tokenId][_fromAccount] = senderBalance - _amount;\\r\\n\\t\\t\\tif (_operator != _fromAccount) {\\r\\n\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[_tokenId]) {\\r\\n\\t\\t\\t\\t\\te1155s.allowances[_fromAccount][_operator][_tokenId] = e1155s.allowances[_fromAccount][_operator][_tokenId] - _amount;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\te1155s.balances[_tokenId][_toAccount] += _amount;\\r\\n\\r\\n\\t\\temit TransferSingle(_operator, _fromAccount, _toAccount, _tokenId, _amount);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, _fromAccount, _toAccount, tokenIds, amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeTransferAcceptanceCheck(_operator, _fromAccount, _toAccount, _tokenId, _amount, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice transfer batch of tokens between given addresses\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction safeTransferBatch(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount == address(0)) revert LibERC1155__TransferToZeroAddress();\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\tcheckAllowanceBach(_operator, _fromAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t_whenTokenNotPaused(e1155s, tokenId);\\r\\n\\r\\n\\t\\t\\t\\tuint256 senderBalance = e1155s.balances[tokenId][_fromAccount];\\r\\n\\r\\n\\t\\t\\t\\tif (amount > senderBalance) revert LibERC1155__TransferExceedsBalance();\\r\\n\\r\\n\\t\\t\\t\\te1155s.balances[tokenId][_fromAccount] = senderBalance - amount;\\r\\n\\r\\n\\t\\t\\t\\tif (_operator != _fromAccount) {\\r\\n\\t\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[tokenId]) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.allowances[_fromAccount][_operator][tokenId] = e1155s.allowances[_fromAccount][_operator][tokenId] - amount;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\r\\n\\t\\t\\te1155s.balances[tokenId][_toAccount] += amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TransferBatch(_operator, _fromAccount, _toAccount, _tokenIds, _amounts);\\r\\n\\r\\n\\t\\t_afterTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\r\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\r\\n\\t * @dev MUST emit the ApprovalForAll event on success.\\r\\n\\t * @param _account The owner of the tokens\\r\\n\\t * @param _operator Address to add to the set of authorized operators\\r\\n\\t * @param _approved True if the operator is approved, false to revoke approval\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address _account, address _operator, bool _approved) internal {\\r\\n\\t\\tif (_account == _operator) revert LibERC1155__SelfApproval();\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.operatorApprovals[_account][_operator] = _approved;\\r\\n\\t\\temit ApprovalForAll(_account, _operator, _approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Queries the approval status of an operator for a given owner.\\r\\n\\t * @param _account The owner of the tokens\\r\\n\\t * @param _operator Address of authorized operator\\r\\n\\t * @return True if the operator is approved, false if not\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address _account, address _operator) internal view returns (bool) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.operatorApprovals[_account][_operator];\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Receiver\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tbytes4 internal constant ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\r\\n\\tbytes4 internal constant ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\r\\n\\r\\n\\tfunction onERC1155Received(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256 _id,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) internal returns (bytes4) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tERC1155ReceiverStorage storage receivedData = e1155s.receivedTokens[e1155s.receivedTokensLength];\\r\\n\\t\\treceivedData.operator = _operator;\\r\\n\\t\\treceivedData.from = _from;\\r\\n\\t\\treceivedData.ids = _asSingletonArray(_id);\\r\\n\\t\\treceivedData.values = _asSingletonArray(_value);\\r\\n\\t\\treceivedData.data = _data;\\r\\n\\t\\te1155s.receivedTokensLength++;\\r\\n\\r\\n\\t\\t// if (shouldReject == true) {\\r\\n\\t\\t// \\trevert(\\\"onERC1155Received: transfer not accepted\\\");\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\treturn ERC1155_ACCEPTED;\\r\\n\\t\\t// }\\r\\n\\t\\treturn ERC1155_ACCEPTED;\\r\\n\\t}\\r\\n\\r\\n\\tfunction onERC1155BatchReceived(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _from,\\r\\n\\t\\tuint256[] calldata _ids,\\r\\n\\t\\tuint256[] calldata _values,\\r\\n\\t\\tbytes calldata _data\\r\\n\\t) internal returns (bytes4) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tERC1155ReceiverStorage storage receivedData = e1155s.receivedTokens[e1155s.receivedTokensLength];\\r\\n\\t\\treceivedData.operator = _operator;\\r\\n\\t\\treceivedData.from = _from;\\r\\n\\t\\treceivedData.ids = _ids;\\r\\n\\t\\treceivedData.values = _values;\\r\\n\\t\\treceivedData.data = _data;\\r\\n\\t\\te1155s.receivedTokensLength++;\\r\\n\\t\\treturn ERC1155_BATCH_ACCEPTED;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Allowance\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\tfunction isOperatorSpendingLimitEnabled(uint256 _tokenId) internal view returns (bool) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.operatorSpendingLimitEnabled[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction setOperatorSpendingLimitEnabled(uint256 _tokenId, bool _enabled) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.operatorSpendingLimitEnabled[_tokenId] = _enabled;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allow other accounts/contracts to spend tokens on behalf of msg.sender\\r\\n\\t * @dev MUST emit Approval event on success.\\r\\n\\t * To minimize the risk of the approve/transferFrom attack vector (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), this function will throw if the current approved allowance does not equal the expected _currentValue, unless _value is 0.\\r\\n\\t * @param _owner Address of token owner\\r\\n\\t * @param _operator Address to approve, _operator will ba able to send token\\r\\n\\t * @param _tokenId ID of the Token\\r\\n\\t * @param _currentValue Expected current value of approved allowance.\\r\\n\\t * @param _newValue Allowance amount\\r\\n\\t */\\r\\n\\tfunction approve(address _owner, address _operator, uint256 _tokenId, uint256 _currentValue, uint256 _newValue) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.allowances[_owner][_operator][_tokenId] == _currentValue, \\\"Current value mismatch\\\");\\r\\n\\t\\te1155s.allowances[_owner][_operator][_tokenId] = _newValue;\\r\\n\\r\\n\\t\\temit Approval(_owner, _operator, _tokenId, _currentValue, _newValue);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Queries the spending limit approved for an account\\r\\n\\t * @param _owner The owner allowing the spending\\r\\n\\t * @param _operator The address allowed to spend.\\r\\n\\t * @param _tokenId ID of the Token\\r\\n\\t * @return The _operator's allowed spending balance of the Token requested\\r\\n\\t */\\r\\n\\tfunction allowance(address _owner, address _operator, uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.allowances[_owner][_operator][_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkAllowance(address _operator, address _fromAccount, uint256 _tokenId, uint256 _value) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tif (_fromAccount != _operator) {\\r\\n\\t\\t\\tif (!e1155s.operatorApprovals[_fromAccount][_operator]) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApproved();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[_tokenId] && e1155s.allowances[_fromAccount][_operator][_tokenId] < _value) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApprovedLimit();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkAllowanceBach(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts\\r\\n\\t) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tif (_fromAccount != _operator) {\\r\\n\\t\\t\\tif (!e1155s.operatorApprovals[_fromAccount][_operator]) {\\r\\n\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApproved();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\tuint256 tokenId = _tokenIds[i];\\r\\n\\t\\t\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\t\\t\\t\\t\\tif (e1155s.operatorSpendingLimitEnabled[tokenId] && e1155s.allowances[_fromAccount][_operator][tokenId] < amount) {\\r\\n\\t\\t\\t\\t\\t\\trevert LibERC1155__NotOwnerOrApprovedLimit();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Metadata\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Query global metadata URI, can contain {id}, client will replace with a valid token id\\r\\n\\t */\\r\\n\\tfunction getUri() internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.uri;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set global metadata URI, can contain {id}, client will\\r\\n\\t * @param _URI global URI\\r\\n\\t */\\r\\n\\tfunction setURI(string memory _URI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.uri = _URI;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTokenBaseUri() internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.baseURI;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set base metadata URI\\r\\n\\t * @dev base URI is a non-standard feature adapted from the ERC721 specification\\r\\n\\t * @param _baseURI base URI\\r\\n\\t */\\r\\n\\tfunction setTokenBaseURI(string memory _baseURI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.baseURI = _baseURI;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTokenUri(uint256 _tokenId) internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.tokenURIs[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice set pre-token metadata URI\\r\\n\\t * @param _tokenId token whose metadata URI to set\\r\\n\\t * @param _tokenURI per-token URI\\r\\n\\t */\\r\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\te1155s.tokenURIs[_tokenId] = _tokenURI;\\r\\n\\t\\temit URI(_tokenURI, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * This implementation returns the concatenation of the `_baseURI`\\r\\n\\t * and the token-specific uri if the latter is set\\r\\n\\t *\\r\\n\\t * This enables the following behaviors:\\r\\n\\t *\\r\\n\\t * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\r\\n\\t *   of `_baseURI` and `_tokenURIs[tokenId]`\\r\\n\\t *\\r\\n\\t * - if `_tokenURIs[tokenId]` is NOT set then we fallback to the defaut URI\\r\\n\\t *   which contains `ERC1155.uri`;\\r\\n\\t */\\r\\n\\tfunction getUri(uint256 tokenId) internal view returns (string memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tstring memory tokenURI = e1155s.tokenURIs[tokenId];\\r\\n\\r\\n\\t\\t// If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\r\\n\\t\\treturn bytes(tokenURI).length > 0 ? string(abi.encodePacked(e1155s.baseURI, tokenURI)) : e1155s.uri;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Enumerable\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query total minted supply of given token\\r\\n\\t * @param _tokenId token id to query\\r\\n\\t * @return token supply\\r\\n\\t */\\r\\n\\tfunction totalSupply(uint256 _tokenId) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.totalSupply[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query total number of holders for given token\\r\\n\\t * @param id token id to query\\r\\n\\t * @return quantity of holders\\r\\n\\t */\\r\\n\\tfunction totalHolders(uint256 id) internal view returns (uint256) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\treturn e1155s.accountsByToken[id].length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query holders of given token\\r\\n\\t * @param _tokenId token id to query\\r\\n\\t * @return list of holder addresses\\r\\n\\t */\\r\\n\\tfunction accountsByToken(uint256 _tokenId) internal view returns (address[] memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tEnumerableSet.AddressSet storage accounts = e1155s.accountsByToken[_tokenId];\\r\\n\\r\\n\\t\\taddress[] memory addresses = new address[](accounts.length());\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < accounts.length(); i++) {\\r\\n\\t\\t\\t\\taddresses[i] = accounts.at(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn addresses;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice query tokens held by given address\\r\\n\\t * @param _account address to query\\r\\n\\t * @return list of token ids\\r\\n\\t */\\r\\n\\tfunction tokensByAccount(address _account) internal view returns (uint256[] memory) {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\tEnumerableSet.UintSet storage tokens = e1155s.tokensByAccount[_account];\\r\\n\\r\\n\\t\\tuint256[] memory ids = new uint256[](tokens.length());\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tfor (uint256 i; i < tokens.length(); i++) {\\r\\n\\t\\t\\t\\tids[i] = tokens.at(i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ids;\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * IERC1155Pausable\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\tfunction _whenNotPaused(ERC1155Storage storage e1155s) internal view {\\r\\n\\t\\trequire(!e1155s.paused, \\\"All token is paused!\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction _whenTokenNotPaused(ERC1155Storage storage e1155s, uint256 _tokenId) internal view {\\r\\n\\t\\t_whenNotPaused(e1155s);\\r\\n\\t\\trequire(!e1155s.pausedToken[_tokenId], \\\"Token is paused!\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenNotPaused() internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenNotPaused(e1155s);\\r\\n\\t}\\r\\n\\r\\n\\tfunction whenTokenNotPaused(uint256 _tokenId) internal view {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\t_whenTokenNotPaused(e1155s, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction pauseAllToken(address _operator) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(!e1155s.paused, \\\"All tokens are already paused\\\");\\r\\n\\t\\te1155s.paused = true;\\r\\n\\t\\temit AllTokenPaused(_operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpauseAllToken(address _operator) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.paused, \\\"All tokens are not paused yet\\\");\\r\\n\\t\\te1155s.paused = false;\\r\\n\\t\\temit AllTokenUnpaused(_operator);\\r\\n\\t}\\r\\n\\r\\n\\tfunction pauseToken(address _operator, uint256 _tokenId) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(!e1155s.pausedToken[_tokenId], \\\"Token is already paused\\\");\\r\\n\\t\\te1155s.pausedToken[_tokenId] = true;\\r\\n\\t\\temit TokenPaused(_operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpauseToken(address _operator, uint256 _tokenId) internal {\\r\\n\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\t\\trequire(e1155s.pausedToken[_tokenId], \\\"Token is not paused yet\\\");\\r\\n\\t\\te1155s.pausedToken[_tokenId] = false;\\r\\n\\t\\temit TokenUnpaused(_operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/************************************************************************************************************\\r\\n\\t *\\r\\n\\t * Library internal helper functions\\r\\n\\t *\\r\\n\\t ************************************************************************************************************/\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenId token ID\\r\\n\\t * @param _amount quantity of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _doSafeTransferAcceptanceCheck(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_toAccount.isContract()) {\\r\\n\\t\\t\\ttry IERC1155Receiver(_toAccount).onERC1155Received(_operator, _fromAccount, _tokenId, _amount, _data) returns (\\r\\n\\t\\t\\t\\tbytes4 response\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155Received.selector) revert LibERC1155__ERC1155ReceiverRejected();\\r\\n\\t\\t\\t} catch Error(string memory reason) {\\r\\n\\t\\t\\t\\trevert(reason);\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\trevert LibERC1155__ERC1155ReceiverNotImplemented();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _doSafeBatchTransferAcceptanceCheck(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) private {\\r\\n\\t\\tif (_toAccount.isContract()) {\\r\\n\\t\\t\\ttry IERC1155Receiver(_toAccount).onERC1155BatchReceived(_operator, _fromAccount, _tokenIds, _amounts, _data) returns (\\r\\n\\t\\t\\t\\tbytes4 response\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155BatchReceived.selector) revert LibERC1155__ERC1155ReceiverRejected();\\r\\n\\t\\t\\t} catch Error(string memory reason) {\\r\\n\\t\\t\\t\\trevert(reason);\\r\\n\\t\\t\\t} catch {\\r\\n\\t\\t\\t\\trevert LibERC1155__ERC1155ReceiverNotImplemented();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _asSingletonArray(uint256 element) internal pure returns (uint256[] memory) {\\r\\n\\t\\tuint256[] memory array = new uint256[](1);\\r\\n\\t\\tarray[0] = element;\\r\\n\\t\\treturn array;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called before all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `ids` and `amounts` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tif (_fromAccount != _toAccount) {\\r\\n\\t\\t\\tERC1155Storage storage e1155s = LibERC1155Storage.layout();\\r\\n\\r\\n\\t\\t\\tmapping(uint256 => EnumerableSet.AddressSet) storage tokenAccounts = e1155s.accountsByToken;\\r\\n\\r\\n\\t\\t\\tEnumerableSet.UintSet storage fromAccountTokens = e1155s.tokensByAccount[_fromAccount];\\r\\n\\t\\t\\tEnumerableSet.UintSet storage toAccountTokens = e1155s.tokensByAccount[_toAccount];\\r\\n\\r\\n\\t\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\t\\tuint256 amount = _amounts[i];\\r\\n\\r\\n\\t\\t\\t\\tif (amount > 0) {\\r\\n\\t\\t\\t\\t\\tuint256 id = _tokenIds[i];\\r\\n\\r\\n\\t\\t\\t\\t\\tif (_fromAccount == address(0)) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.totalSupply[id] += amount;\\r\\n\\t\\t\\t\\t\\t} else if (balanceOf(_fromAccount, id) == amount) {\\r\\n\\t\\t\\t\\t\\t\\ttokenAccounts[id].remove(_fromAccount);\\r\\n\\t\\t\\t\\t\\t\\tfromAccountTokens.remove(id);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif (_toAccount == address(0)) {\\r\\n\\t\\t\\t\\t\\t\\te1155s.totalSupply[id] -= amount;\\r\\n\\t\\t\\t\\t\\t} else if (balanceOf(_toAccount, id) == 0) {\\r\\n\\t\\t\\t\\t\\t\\ttokenAccounts[id].add(_toAccount);\\r\\n\\t\\t\\t\\t\\t\\ttoAccountTokens.add(id);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tLibERC1155Customization._beforeTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called after all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `id` and `amount` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * @param _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * @param _data data payload\\r\\n\\t */\\r\\n\\tfunction _afterTokenTransfer(\\r\\n\\t\\taddress _operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\tLibERC1155Customization._afterTokenTransfer(_operator, _fromAccount, _toAccount, _tokenIds, _amounts, _data);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xec6b5201d39937703eb059c34d4289ad4e2eb03f1dcbfd648165fe2e1ac7354f\",\"license\":\"MIT\"},\"contracts/base/ERC1155/base/LibERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct ERC1155ReceiverStorage {\\r\\n\\tbytes data;\\r\\n\\taddress operator;\\r\\n\\taddress from;\\r\\n\\tuint256[] ids;\\r\\n\\tuint256[] values;\\r\\n}\\r\\n\\r\\nstruct ERC1155Storage {\\r\\n\\tmapping(uint256 => mapping(address => uint256)) balances; // Mapping from token ID to account balances\\r\\n\\tmapping(address => mapping(address => bool)) operatorApprovals; // Mapping from account to operator approvals\\r\\n\\tmapping(uint256 => bool) operatorSpendingLimitEnabled;\\r\\n\\tmapping(address => mapping(address => mapping(uint256 => uint256))) allowances;\\r\\n\\tmapping(uint256 => uint256) totalSupply;\\r\\n\\tmapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\r\\n\\tmapping(address => EnumerableSet.UintSet) tokensByAccount;\\r\\n\\tstring uri; // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\r\\n\\tstring baseURI; // Optional base URI, e.g. ipfs://53453534\\r\\n\\tmapping(uint256 => string) tokenURIs; // Optional mapping for token URIs, e.g. 4236464216781, so tokenURI will be: ipfs://53453534/4236464216781\\r\\n\\tbool paused;\\r\\n\\tmapping(uint256 => bool) pausedToken;\\r\\n\\tuint256 receivedTokensLength;\\r\\n\\tmapping(uint256 => ERC1155ReceiverStorage) receivedTokens;\\r\\n}\\r\\n\\r\\nlibrary LibERC1155Storage {\\r\\n\\tbytes32 internal constant ERC1155_STORAGE_SLOT = keccak256(\\\"usmart.contracts.erc1155-base.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (ERC1155Storage storage e1155s_) {\\r\\n\\t\\tbytes32 position = ERC1155_STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\te1155s_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x4e6183d99d461002f2e4873dd8ecc52d243537e0bb5f364b708c45e4ea533ba0\",\"license\":\"MIT\"},\"contracts/base/ERC1155/customization/LibERC1155Customization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../../TokenRestriction/LibTokenRestriction.sol\\\";\\r\\nimport \\\"../../TokenPNL/LibTokenPNL.sol\\\";\\r\\n\\r\\nimport \\\"../../../ArexaPlatform/Platform/LibArexaPlatformShared.sol\\\";\\r\\n\\r\\nlibrary LibERC1155Customization {\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called before all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `ids` and `amounts` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t *  param_operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t *  param_toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t *  param _data data payload\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfer(\\r\\n\\t\\taddress, //_operator,\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress, //_toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory //_data\\r\\n\\t) internal view {\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.checkRestrictions(_fromAccount, _tokenIds, _amounts);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC1155 hook, called after all transfers including mint and burn\\r\\n\\t * The same hook is called on both single and batched variants. For single\\r\\n\\t * transfers, the length of the `id` and `amount` arrays will be 1.\\r\\n\\t * Calling conditions (for each `id` and `amount` pair):\\r\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens of token type `id` will be  transferred to `to`.\\r\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\r\\n\\t * _operator executor of transfer\\r\\n\\t * @param _fromAccount sender of tokens\\r\\n\\t * @param _toAccount receiver of tokens\\r\\n\\t * @param _tokenIds token IDs\\r\\n\\t * @param _amounts quantities of tokens to transfer\\r\\n\\t * _data data payload\\r\\n\\t */\\r\\n\\tfunction _afterTokenTransfer(\\r\\n\\t\\taddress, //_operator\\r\\n\\t\\taddress _fromAccount,\\r\\n\\t\\taddress _toAccount,\\r\\n\\t\\tuint256[] memory _tokenIds,\\r\\n\\t\\tuint256[] memory _amounts,\\r\\n\\t\\tbytes memory //_data\\r\\n\\t) internal {\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.recalcRestrictions(_fromAccount, _tokenIds, _amounts, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_toAccount != address(0)) {\\r\\n\\t\\t\\tLibTokenRestriction.recalcRestrictions(_toAccount, _tokenIds, _amounts, 1);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tLibTokenPNL.refreshDivident(\\r\\n\\t\\t\\t\\taddress(LibArexaPlatformShared.getPayingToken()),\\r\\n\\t\\t\\t\\t_tokenIds[i],\\r\\n\\t\\t\\t\\t_fromAccount,\\r\\n\\t\\t\\t\\t_toAccount,\\r\\n\\t\\t\\t\\t_amounts[i]\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x83747a00d51e7cbe347aaf8c093ec4171fdbacd890a93b511ec2a46f45686fa4\",\"license\":\"MIT\"},\"contracts/base/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @notice query the total minted token supply\\n\\t * @return token supply\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the token balance of given account\\n\\t * @param account address to query\\n\\t * @return token balance\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice query the allowance granted from given holder to given spender\\n\\t * @param holder approver of allowance\\n\\t * @param spender recipient of allowance\\n\\t * @return token allowance\\n\\t */\\n\\tfunction allowance(address holder, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice grant approval to spender to spend tokens\\n\\t * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n\\t * @param spender recipient of allowance\\n\\t * @param amount quantity of tokens approved for spending\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @notice transfer tokens to given recipient on behalf of given holder\\n\\t * @param holder holder of tokens prior to transfer\\n\\t * @param recipient beneficiary of token transfer\\n\\t * @param amount quantity of tokens to transfer\\n\\t * @return success status (always true; otherwise function should revert)\\n\\t */\\n\\tfunction transferFrom(address holder, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2225a383553a4a87b9b6577c7b90eff90b4b6a0e967c97d0a3fd5291a290d8db\",\"license\":\"MIT\"},\"contracts/base/TokenPNL/LibTokenPNL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibTokenPNLStorage.sol\\\";\\r\\n\\r\\nlibrary LibTokenPNL {\\r\\n\\tfunction initTokenPNL(address _contract, uint256 _tokenId) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tinventory.isEnabled = true;\\r\\n\\t\\tinventory.sumQuantity = 0;\\r\\n\\t\\tinventory.sumAmount = 0;\\r\\n\\t\\tinventory.sumPnl = 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeTotalValue(address _contract, uint256 _tokenId, int256 _amount) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//because every transfer, mint and burn do like ralizing the pnl\\r\\n\\t\\t//and after this realizing the user can payout the collected a PNL\\r\\n\\t\\t//so decreasing the value can cause money loss in the contract!!!\\r\\n\\t\\t//if wanted full inventory feature in a distributed way: ask uSmart ;)\\r\\n\\t\\trequire(_amount >= 0, \\\"Pool can only increase!\\\");\\r\\n\\r\\n\\t\\tinventory.sumAmount += _amount;\\r\\n\\t\\tinventory.sumPnl += _amount; //Here is the MAGIC!\\r\\n\\r\\n\\t\\t// console.log(\\\"ChangeTotalValue\\\");\\r\\n\\t\\t// console.log(\\\"_tokenId\\\", _tokenId);\\r\\n\\t\\t// if (inventory.sumAmount >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumAmount\\\", uint256(inventory.sumAmount));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumAmount -\\\", uint256(-1 * inventory.sumAmount));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInventory(\\r\\n\\t\\taddress _contract,\\r\\n\\t\\tuint256 _tokenId\\r\\n\\t) internal view returns (bool isEnabled, int256 sumQuantity, int256 sumAmount, int256 sumPnl) {\\r\\n\\t\\t//\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\treturn (inventory.isEnabled, inventory.sumQuantity, inventory.sumAmount, inventory.sumPnl);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInventoryItem(\\r\\n\\t\\taddress _contract,\\r\\n\\t\\tuint256 _tokenId,\\r\\n\\t\\taddress _account\\r\\n\\t) internal view returns (int256 quantity, int256 deltaPnl, int256 payedPnl) {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\treturn (inventory.divident[_account].quantity, inventory.divident[_account].deltaPnl, inventory.divident[_account].payedPnl);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _refreshDividentInternal(Inventory storage inventory, address _account, int256 _quantity) internal {\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\r\\n\\t\\trequire(inventory.sumQuantity + _quantity >= 0, \\\"Pool token quanity can't be less then zero!\\\");\\r\\n\\t\\trequire(inventoryItem.quantity + _quantity >= 0, \\\"User token quanity can't be less then zero!\\\");\\r\\n\\r\\n\\t\\t// console.log(\\\"_refreshDividentInternal\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\r\\n\\t\\t// if (inventory.sumQuantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity\\\", uint256(inventory.sumQuantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity -\\\", uint256(-1 * inventory.sumQuantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tint256 addressPnlDelta = 0;\\r\\n\\t\\tif (inventory.sumQuantity != 0) {\\r\\n\\t\\t\\taddressPnlDelta = (inventory.sumPnl * _quantity) / inventory.sumQuantity;\\r\\n\\t\\t}\\r\\n\\t\\t// if (addressPnlDelta >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"addressPnlDelta\\\", uint256(addressPnlDelta));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"addressPnlDelta -\\\", uint256(-1 * addressPnlDelta));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tinventory.sumQuantity = inventory.sumQuantity + _quantity;\\r\\n\\t\\tinventory.sumPnl = inventory.sumPnl + addressPnlDelta;\\r\\n\\t\\tinventoryItem.quantity = inventoryItem.quantity + _quantity;\\r\\n\\t\\tinventoryItem.deltaPnl = inventoryItem.deltaPnl - addressPnlDelta;\\r\\n\\r\\n\\t\\t// if (inventory.sumQuantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumQuantity\\\", uint256(inventory.sumQuantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumQuantity -\\\", uint256(-1 * inventory.sumQuantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.quantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.quantity\\\", uint256(inventoryItem.quantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.quantity -\\\", uint256(-1 * inventoryItem.quantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.deltaPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.deltaPnl\\\", uint256(inventoryItem.deltaPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"NEW inventoryItem.deltaPnl -\\\", uint256(-1 * inventoryItem.deltaPnl));\\r\\n\\t\\t// }\\r\\n\\t}\\r\\n\\r\\n\\tfunction refreshDivident(address _contract, uint256 _tokenId, address _fromAccount, address _toAccount, uint256 _quantity) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_fromAccount != address(0)) {\\r\\n\\t\\t\\t_refreshDividentInternal(inventory, _fromAccount, -1 * int256(_quantity));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_toAccount != address(0)) {\\r\\n\\t\\t\\t_refreshDividentInternal(inventory, _toAccount, int256(_quantity));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcDivident(address _contract, uint256 _tokenId, address _account) internal view returns (int256) {\\r\\n\\t\\tif (_account == address(0)) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\t\\t//calculate actual value of the token\\r\\n\\t\\tint256 actValue = 0;\\r\\n\\t\\tif (inventory.sumQuantity != 0) {\\r\\n\\t\\t\\tactValue = (inventory.sumPnl * inventoryItem.quantity) / inventory.sumQuantity;\\r\\n\\t\\t}\\r\\n\\t\\t//the divident is equal with the actual value minus the summa pnlDelta\\r\\n\\t\\t//note: the pnlDelta already have the negative sign!!!\\r\\n\\t\\tint256 actDivident = actValue + inventoryItem.deltaPnl - inventoryItem.payedPnl;\\r\\n\\r\\n\\t\\t// console.log(\\\"calcDivident\\\");\\r\\n\\t\\t// if (inventory.sumPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl\\\", uint256(inventory.sumPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumPnl -\\\", uint256(-1 * inventory.sumPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.quantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.quantity\\\", uint256(inventoryItem.quantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.quantity -\\\", uint256(-1 * inventoryItem.quantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventory.sumQuantity >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity\\\", uint256(inventory.sumQuantity));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventory.sumQuantity -\\\", uint256(-1 * inventory.sumQuantity));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.deltaPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.deltaPnl\\\", uint256(inventoryItem.deltaPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.deltaPnl -\\\", uint256(-1 * inventoryItem.deltaPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (inventoryItem.payedPnl >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.payedPnl\\\", uint256(inventoryItem.payedPnl));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"inventoryItem.payedPnl -\\\", uint256(-1 * inventoryItem.payedPnl));\\r\\n\\t\\t// }\\r\\n\\t\\t// if (actDivident >= 0) {\\r\\n\\t\\t// \\tconsole.log(\\\"actDivident\\\", uint256(actDivident));\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tconsole.log(\\\"actDivident -\\\", uint256(-1 * actDivident));\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\treturn actDivident;\\r\\n\\t}\\r\\n\\r\\n\\tfunction refreshPayoutDivident(address _contract, uint256 _tokenId, address _account, int256 _amount) internal {\\r\\n\\t\\tTokenPNLStorage storage tokenPNL = LibTokenPNLStorage.layout();\\r\\n\\t\\tInventory storage inventory = tokenPNL.inventory[_contract][_tokenId];\\r\\n\\t\\tif (!inventory.isEnabled) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\trequire(_amount >= 0, \\\"Only positive amount can be payed out!\\\");\\r\\n\\r\\n\\t\\tint256 payableDivident = calcDivident(_contract, _tokenId, _account);\\r\\n\\r\\n\\t\\trequire(_amount <= payableDivident, \\\"The amount is bigger then tha payable divident!\\\");\\r\\n\\r\\n\\t\\tInventoryItem storage inventoryItem = inventory.divident[_account];\\r\\n\\t\\tinventoryItem.payedPnl = inventoryItem.payedPnl + _amount;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x6ee08d59bcb037857e003916987b97f6f1d49a3c9fcef1bacd3a782a1c8cff69\",\"license\":\"MIT\"},\"contracts/base/TokenPNL/LibTokenPNLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct InventoryItem {\\r\\n\\tint256 quantity;\\r\\n\\tint256 deltaPnl; //After calculating the act Pnl based on the quantity this is a Pnl modification factor!\\r\\n\\tint256 payedPnl;\\r\\n}\\r\\n\\r\\nstruct Inventory {\\r\\n\\tbool isEnabled;\\r\\n\\tint256 sumQuantity;\\r\\n\\tint256 sumAmount;\\r\\n\\tint256 sumPnl;\\r\\n\\t//Account - pool divident calculation\\r\\n\\tmapping(address => InventoryItem) divident;\\r\\n}\\r\\n\\r\\nstruct TokenPNLStorage {\\r\\n\\t//contract => tokenId => inventory map\\r\\n\\t//Eg: IERC20 => 0 => inventory\\r\\n\\t//Eg: IERC1155 => tokenId => Inventory\\r\\n\\tmapping(address => mapping(uint256 => Inventory)) inventory;\\r\\n}\\r\\n\\r\\nlibrary LibTokenPNLStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-pnl.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenPNLStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2ad5ccdae091ea94e36dce8d852d697f8569b438284f51a4a983a7c0d4b9de8b\",\"license\":\"MIT\"},\"contracts/base/TokenRestriction/LibTokenRestriction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./LibTokenRestrictionStorage.sol\\\";\\r\\nimport \\\"../../base/ERC1155/base/LibERC1155.sol\\\";\\r\\nimport \\\"../../utils/Math.sol\\\";\\r\\n\\r\\nimport { IERC20 } from \\\"../../base/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary LibTokenRestriction {\\r\\n\\tfunction initTokenRestriction(uint256 _tokenId, uint256 _endOfRestriction, uint256 _endOfRestrictionCalc, uint256 _timeDelta) internal {\\r\\n\\t\\t// require(block.number + 12 * _timeDelta < _endOfRestriction);\\r\\n\\t\\t// require(_endOfRestriction + 12 * _timeDelta < _endOfRestrictionCalc);\\r\\n\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\t\\tif ((restriction.endOfRestrictionCalc == 0) || (restriction.endOfRestriction + 1 == restriction.endOfRestrictionCalc)) {\\r\\n\\t\\t\\trestriction.endOfRestriction = _endOfRestriction;\\r\\n\\t\\t\\trestriction.endOfRestrictionCalc = _endOfRestrictionCalc;\\r\\n\\t\\t\\trestriction.timeDelta = _timeDelta;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcUnrestrictedAmount(address _account, uint256 _tokenId, uint256 _amount) internal view returns (uint256) {\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc < block.number) {\\r\\n\\t\\t\\treturn _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// if (restriction.endOfRestriction < block.number) {\\r\\n\\t\\t// \\treturn _amount;\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((K8-I8)/L8)*(E8-M8)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumulated)/12)\\r\\n\\t\\t// console.log(\\\"calcUnrestrictedAmount\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\t\\t// console.log(\\\"blocknumber\\\", block.number);\\r\\n\\t\\t// console.log(\\\"accRestr.time\\\", accRestr.time);\\r\\n\\t\\t// console.log(\\\"restriction.timeDelta\\\", restriction.timeDelta);\\r\\n\\t\\t// console.log(\\\"accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\t\\t// console.log(\\\"helper\\\", helper);\\r\\n\\r\\n\\t\\t//=MIN(M10+Q10;E10)-G10\\r\\n\\t\\t//=MIN(accumulated+helper;bought)-sold\\r\\n\\t\\tuint256 canSell = Math.min(accRestr.accumulated + helper, accRestr.bought) - accRestr.sold;\\r\\n\\t\\t// console.log(\\\"canSell\\\", canSell);\\r\\n\\r\\n\\t\\treturn canSell;\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkRestriction(address _account, uint256 _tokenId, uint256 _amount) internal view returns (bool) {\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc <= block.number) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// if (restriction.endOfRestriction < block.number) {\\r\\n\\t\\t// \\treturn;\\r\\n\\t\\t// }\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((K8-I8)/L8)*(E8-M8)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumulated)/12)\\r\\n\\t\\t// console.log(\\\"CheckRestriction\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\t\\t// console.log(\\\"blocknumber\\\", block.number);\\r\\n\\t\\t// console.log(\\\"accRestr.time\\\", accRestr.time);\\r\\n\\t\\t// console.log(\\\"restriction.timeDelta\\\", restriction.timeDelta);\\r\\n\\t\\t// console.log(\\\"accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\t\\t// console.log(\\\"helper\\\", helper);\\r\\n\\r\\n\\t\\t//=MIN(M10+Q10;E10)-G10\\r\\n\\t\\t//=MIN(accumulated+helper;bought)-sold\\r\\n\\t\\tuint256 canSell = Math.min(accRestr.accumulated + helper, accRestr.bought) - accRestr.sold;\\r\\n\\t\\t// console.log(\\\"canSell\\\", canSell);\\r\\n\\r\\n\\t\\trequire(_amount <= canSell, \\\"The amount is grater then the accumlated ('sellable') amount!\\\");\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction checkRestrictions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts) internal view returns (bool) {\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\tcheckRestriction(_account, _tokenIds[i], _amounts[i]);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction recalcRestriction(address _account, uint256 _tokenId, uint256 _amount, uint8 _direction) internal {\\r\\n\\t\\t//eladhat\\u00f3 mennyis\\u00e9g kalkul\\u00e1ci\\u00f3hoz\\r\\n\\t\\tTokenRestrictionStorage storage arexa = LibTokenRestrictionStorage.layout();\\r\\n\\t\\tRestriction storage restriction = arexa.tokenRestriction[_tokenId];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestrictionCalc <= block.number) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tRestrictionCalc storage accRestr = restriction.restriction[_account];\\r\\n\\r\\n\\t\\tif (restriction.endOfRestriction <= block.number) {\\r\\n\\t\\t\\t//valami m\\u00e1st kell csin\\u00e1lni\\r\\n\\t\\t\\tif (_direction == 1) {\\r\\n\\t\\t\\t\\taccRestr.bought += _amount;\\r\\n\\t\\t\\t\\taccRestr.accumulated += _amount;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//friss\\u00edteni \\u00fczemszer\\u0171en.\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((J12-I12)/L12)*(E12-M12)/12)\\r\\n\\t\\t//=FLOOR.MATH(FLOOR.MATH((actTime-time)/timeDelta)*(bought-accumlated)/12)\\r\\n\\t\\t// console.log(\\\"RecalcRestriction\\\");\\r\\n\\t\\t// console.log(\\\"account\\\", _account);\\r\\n\\t\\t// console.log(\\\"blocknumber\\\", block.number);\\r\\n\\t\\t// console.log(\\\"accRestr.time\\\", accRestr.time);\\r\\n\\t\\t// console.log(\\\"restriction.timeDelta\\\", restriction.timeDelta);\\r\\n\\t\\t// console.log(\\\"accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\t\\tuint256 helper = ((block.number - accRestr.time) / restriction.timeDelta) * ((accRestr.bought - accRestr.accumulated) / 12);\\r\\n\\t\\t// console.log(\\\"helper\\\", helper);\\r\\n\\r\\n\\t\\t//=MIN(M12+N12; E12)\\r\\n\\t\\t//=MIN(accumulated+helper; bought)\\r\\n\\t\\taccRestr.accumulated = Math.min(accRestr.accumulated + helper, accRestr.bought);\\r\\n\\t\\t// console.log(\\\"NEW accRestr.accumulated\\\", accRestr.accumulated);\\r\\n\\r\\n\\t\\t//vesz, elad\\r\\n\\t\\tif (_direction == 1) {\\r\\n\\t\\t\\taccRestr.bought += _amount;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\taccRestr.sold += _amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\taccRestr.time = block.number;\\r\\n\\r\\n\\t\\t// console.log(\\\"NEW accRestr.bought\\\", accRestr.bought);\\r\\n\\t\\t// console.log(\\\"NEW accRestr.sold\\\", accRestr.sold);\\r\\n\\t\\t// console.log(\\\"NEW accRestr.time\\\", accRestr.time);\\r\\n\\t}\\r\\n\\r\\n\\tfunction recalcRestrictions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts, uint8 _direction) internal {\\r\\n\\t\\tif (_tokenIds.length != _amounts.length) revert LibERC1155__ArrayLengthMismatch();\\r\\n\\r\\n\\t\\tfor (uint256 i; i < _tokenIds.length; ) {\\r\\n\\t\\t\\trecalcRestriction(_account, _tokenIds[i], _amounts[i], _direction);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x38eeb77ee9d9c6f5df3ed0fd765b207f2d9f3a9383dab85595a7a11ebb0c42d3\",\"license\":\"MIT\"},\"contracts/base/TokenRestriction/LibTokenRestrictionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * Copyright (C) 2024 uSmart\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { EnumerableSet } from \\\"../../utils/EnumerableSet.sol\\\";\\r\\n\\r\\nstruct RestrictionCalc {\\r\\n\\tuint256 bought;\\r\\n\\tuint256 sold;\\r\\n\\tuint256 time; //blockheight * 1 000 000 000\\r\\n\\tuint256 accumulated;\\r\\n}\\r\\n\\r\\nstruct Restriction {\\r\\n\\tuint256 endOfRestriction; //if act-time is lower then endOfRestriction then only calculating the a previous data, new tokens do not restircted\\r\\n\\tuint256 endOfRestrictionCalc; //if act-time is lower then endOfRestrictionCalc then now calculation at all\\r\\n\\tuint256 timeDelta; //if time is blockHeight based then delta should be calculated like that. If second based then...\\r\\n\\t//Account - restriction calculation params\\r\\n\\tmapping(address => RestrictionCalc) restriction;\\r\\n}\\r\\n\\r\\nstruct TokenRestrictionStorage {\\r\\n\\t//tokenId => restriction, every token have\\r\\n\\tmapping(uint256 => Restriction) tokenRestriction;\\r\\n}\\r\\n\\r\\nlibrary LibTokenRestrictionStorage {\\r\\n\\tbytes32 internal constant STORAGE_SLOT = keccak256(\\\"usmart.common.token-restriction.storage.v1\\\");\\r\\n\\r\\n\\tfunction layout() internal pure returns (TokenRestrictionStorage storage layout_) {\\r\\n\\t\\tbytes32 position = STORAGE_SLOT;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlayout_.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xe358c34214fecb91a975cd5269031d6b92f13d0d8af754b2d4dc56fc5246a744\",\"license\":\"MIT\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nimport { UintUtils } from \\\"./UintUtils.sol\\\";\\n\\nlibrary AddressUtils {\\n\\tusing UintUtils for uint256;\\n\\n\\terror AddressUtils__InsufficientBalance();\\n\\terror AddressUtils__NotContract();\\n\\terror AddressUtils__SendValueFailed();\\n\\n\\tfunction toString(address account) internal pure returns (string memory) {\\n\\t\\treturn uint256(uint160(account)).toHexString(20);\\n\\t}\\n\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\tfunction sendValue(address payable account, uint256 amount) internal {\\n\\t\\t(bool success, ) = account.call{ value: amount }(\\\"\\\");\\n\\t\\tif (!success) revert AddressUtils__SendValueFailed();\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"AddressUtils: failed low-level call\\\");\\n\\t}\\n\\n\\tfunction functionCall(address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n\\t\\treturn _functionCallWithValue(target, data, 0, error);\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"AddressUtils: failed low-level call with value\\\");\\n\\t}\\n\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) internal returns (bytes memory) {\\n\\t\\tif (value > address(this).balance) revert AddressUtils__InsufficientBalance();\\n\\t\\treturn _functionCallWithValue(target, data, value, error);\\n\\t}\\n\\n\\t/**\\n\\t * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n\\t * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n\\t * @param target recipient of call\\n\\t * @param gasAmount gas allowance for call\\n\\t * @param value native token value to include in call\\n\\t * @param maxCopy maximum number of bytes to copy from return data\\n\\t * @param data encoded call data\\n\\t * @return success whether call is successful\\n\\t * @return returnData copied return data\\n\\t */\\n\\tfunction excessivelySafeCall(\\n\\t\\taddress target,\\n\\t\\tuint256 gasAmount,\\n\\t\\tuint256 value,\\n\\t\\tuint16 maxCopy,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool success, bytes memory returnData) {\\n\\t\\treturnData = new bytes(maxCopy);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// execute external call via assembly to avoid automatic copying of return data\\n\\t\\t\\tsuccess := call(gasAmount, target, value, add(data, 0x20), mload(data), 0, 0)\\n\\n\\t\\t\\t// determine whether to limit amount of data to copy\\n\\t\\t\\tlet toCopy := returndatasize()\\n\\n\\t\\t\\tif gt(toCopy, maxCopy) {\\n\\t\\t\\t\\ttoCopy := maxCopy\\n\\t\\t\\t}\\n\\n\\t\\t\\t// store the length of the copied bytes\\n\\t\\t\\tmstore(returnData, toCopy)\\n\\n\\t\\t\\t// copy the bytes from returndata[0:toCopy]\\n\\t\\t\\treturndatacopy(add(returnData, 0x20), 0, toCopy)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 value, string memory error) private returns (bytes memory) {\\n\\t\\tif (!isContract(target)) revert AddressUtils__NotContract();\\n\\n\\t\\t(bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n\\t\\tif (success) {\\n\\t\\t\\treturn returnData;\\n\\t\\t} else if (returnData.length > 0) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet returnData_size := mload(returnData)\\n\\t\\t\\t\\trevert(add(32, returnData), returnData_size)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\trevert(error);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7dec1466e1e606394a35fa837156a011f761ac6a6e9097b89a348fad1f2f692\",\"license\":\"MIT\"},\"contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n\\terror EnumerableSet__IndexOutOfBounds();\\n\\n\\tstruct Set {\\n\\t\\tbytes32[] _values;\\n\\t\\t// 1-indexed to allow 0 to signify nonexistence\\n\\t\\tmapping(bytes32 => uint256) _indexes;\\n\\t}\\n\\n\\tstruct Bytes32Set {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct AddressSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tstruct UintSet {\\n\\t\\tSet _inner;\\n\\t}\\n\\n\\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n\\t\\treturn _at(set._inner, index);\\n\\t}\\n\\n\\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\n\\t\\treturn address(uint160(uint256(_at(set._inner, index))));\\n\\t}\\n\\n\\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n\\t\\treturn uint256(_at(set._inner, index));\\n\\t}\\n\\n\\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, value);\\n\\t}\\n\\n\\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n\\t\\treturn _contains(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction indexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, value);\\n\\t}\\n\\n\\tfunction indexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction indexOf(UintSet storage set, uint256 value) internal view returns (uint256) {\\n\\t\\treturn _indexOf(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(AddressSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction length(UintSet storage set) internal view returns (uint256) {\\n\\t\\treturn _length(set._inner);\\n\\t}\\n\\n\\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, value);\\n\\t}\\n\\n\\tfunction add(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _add(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, value);\\n\\t}\\n\\n\\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\\n\\t}\\n\\n\\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\n\\t\\treturn _remove(set._inner, bytes32(value));\\n\\t}\\n\\n\\tfunction toArray(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n\\t\\treturn set._inner._values;\\n\\t}\\n\\n\\tfunction toArray(AddressSet storage set) internal view returns (address[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\taddress[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction toArray(UintSet storage set) internal view returns (uint256[] memory) {\\n\\t\\tbytes32[] storage values = set._inner._values;\\n\\t\\tuint256[] storage array;\\n\\n\\t\\tassembly {\\n\\t\\t\\tarray.slot := values.slot\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\n\\t\\tif (index >= set._values.length) revert EnumerableSet__IndexOutOfBounds();\\n\\t\\treturn set._values[index];\\n\\t}\\n\\n\\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\n\\t\\treturn set._indexes[value] != 0;\\n\\t}\\n\\n\\tfunction _indexOf(Set storage set, bytes32 value) private view returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn set._indexes[value] - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _length(Set storage set) private view returns (uint256) {\\n\\t\\treturn set._values.length;\\n\\t}\\n\\n\\tfunction _add(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tif (!_contains(set, value)) {\\n\\t\\t\\tset._values.push(value);\\n\\t\\t\\tset._indexes[value] = set._values.length;\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _remove(Set storage set, bytes32 value) private returns (bool status) {\\n\\t\\tuint256 valueIndex = set._indexes[value];\\n\\n\\t\\tif (valueIndex != 0) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tbytes32 last = set._values[set._values.length - 1];\\n\\n\\t\\t\\t\\t// move last value to now-vacant index\\n\\n\\t\\t\\t\\tset._values[valueIndex - 1] = last;\\n\\t\\t\\t\\tset._indexes[last] = valueIndex;\\n\\t\\t\\t}\\n\\t\\t\\t// clear last index\\n\\n\\t\\t\\tset._values.pop();\\n\\t\\t\\tdelete set._indexes[value];\\n\\n\\t\\t\\tstatus = true;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x442e9fd507b659095a1fec47f8cb6e540442165217af05db1afa2703a993e038\",\"license\":\"MIT\"},\"contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\nlibrary Math {\\n\\t/**\\n\\t * @notice calculate the absolute value of a number\\n\\t * @param a number whose absoluve value to calculate\\n\\t * @return absolute value\\n\\t */\\n\\tfunction abs(int256 a) internal pure returns (uint256) {\\n\\t\\treturn uint256(a < 0 ? -a : a);\\n\\t}\\n\\n\\t/**\\n\\t * @notice select the greater of two numbers\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return greater number\\n\\t */\\n\\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a > b ? a : b;\\n\\t}\\n\\n\\t/**\\n\\t * @notice select the lesser of two numbers\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return lesser number\\n\\t */\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a > b ? b : a;\\n\\t}\\n\\n\\t/**\\n\\t * @notice calculate the average of two numbers, rounded down\\n\\t * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n\\t * @param a first number\\n\\t * @param b second number\\n\\t * @return mean value\\n\\t */\\n\\tfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn (a & b) + ((a ^ b) >> 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice estimate square root of number\\n\\t * @dev uses Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n\\t * @param x input number\\n\\t * @return y square root\\n\\t */\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256 y) {\\n\\t\\tuint256 z = (x + 1) >> 1;\\n\\t\\ty = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = (x / z + z) >> 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x032ee4f9c6cc152b1930c8c84a11bc736dc627a71a41a73e28b09b3ad7a231b3\",\"license\":\"MIT\"},\"contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * Copyright (C) 2024 uSmart\\n */\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n\\terror UintUtils__InsufficientHexLength();\\n\\n\\tbytes16 private constant HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n\\tfunction add(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? sub(a, -b) : a + uint256(b);\\n\\t}\\n\\n\\tfunction sub(uint256 a, int256 b) internal pure returns (uint256) {\\n\\t\\treturn b < 0 ? add(a, -b) : a - uint256(b);\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\n\\t\\tuint256 length = 0;\\n\\n\\t\\tfor (uint256 temp = value; temp != 0; temp >>= 8) {\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tlength++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\t\\tbuffer[i] = HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\t\\tvalue >>= 4;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\",\"keccak256\":\"0xec4d89ef08ad402e0c8b30b8e4e135991009384aa72f0cb7c6165721ec5050e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ba0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bc197c811461003b578063f23a6e611461006b575b600080fd5b610055600480360381019061005091906105ac565b61009b565b60405161006291906106c3565b60405180910390f35b61008560048036038101906100809190610714565b6100bb565b60405161009291906106c3565b60405180910390f35b60006100ad89898989898989896100d7565b905098975050505050505050565b60006100cb8787878787876101f5565b90509695505050505050565b6000806100e261032b565b9050600081600d01600083600c0154815260200190815260200160002090508a8160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888882600301919061019a9291906103d2565b5086868260040191906101ae9291906103d2565b5084848260000191826101c29291906109f4565b5081600c0160008154809291906101d890610af3565b919050555063bc197c8160e01b9250505098975050505050505050565b60008061020061032b565b9050600081600d01600083600c015481526020019081526020016000209050888160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550878160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102ae87610358565b8160030190805190602001906102c592919061041f565b506102cf86610358565b8160040190805190602001906102e692919061041f565b5084848260000191826102fa9291906109f4565b5081600c01600081548092919061031090610af3565b919050555063f23a6e6160e01b925050509695505050505050565b6000807fe20f5a7f7e820e4505f9ef8ed1186e372d3490e37d8001618819927829be4e0590508091505090565b60606000600167ffffffffffffffff811115610377576103766107b9565b5b6040519080825280602002602001820160405280156103a55781602001602082028036833780820191505090505b50905082816000815181106103bd576103bc610b3b565b5b60200260200101818152505080915050919050565b82805482825590600052602060002090810192821561040e579160200282015b8281111561040d5782358255916020019190600101906103f2565b5b50905061041b919061046c565b5090565b82805482825590600052602060002090810192821561045b579160200282015b8281111561045a57825182559160200191906001019061043f565b5b509050610468919061046c565b5090565b5b8082111561048557600081600090555060010161046d565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104be82610493565b9050919050565b6104ce816104b3565b81146104d957600080fd5b50565b6000813590506104eb816104c5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610516576105156104f1565b5b8235905067ffffffffffffffff811115610533576105326104f6565b5b60208301915083602082028301111561054f5761054e6104fb565b5b9250929050565b60008083601f84011261056c5761056b6104f1565b5b8235905067ffffffffffffffff811115610589576105886104f6565b5b6020830191508360018202830111156105a5576105a46104fb565b5b9250929050565b60008060008060008060008060a0898b0312156105cc576105cb610489565b5b60006105da8b828c016104dc565b98505060206105eb8b828c016104dc565b975050604089013567ffffffffffffffff81111561060c5761060b61048e565b5b6106188b828c01610500565b9650965050606089013567ffffffffffffffff81111561063b5761063a61048e565b5b6106478b828c01610500565b9450945050608089013567ffffffffffffffff81111561066a5761066961048e565b5b6106768b828c01610556565b92509250509295985092959890939650565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6106bd81610688565b82525050565b60006020820190506106d860008301846106b4565b92915050565b6000819050919050565b6106f1816106de565b81146106fc57600080fd5b50565b60008135905061070e816106e8565b92915050565b60008060008060008060a0878903121561073157610730610489565b5b600061073f89828a016104dc565b965050602061075089828a016104dc565b955050604061076189828a016106ff565b945050606061077289828a016106ff565b935050608087013567ffffffffffffffff8111156107935761079261048e565b5b61079f89828a01610556565b92509250509295509295509295565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061082f57607f821691505b602082108103610842576108416107e8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261086d565b6108b4868361086d565b95508019841693508086168417925050509392505050565b6000819050919050565b60006108f16108ec6108e7846106de565b6108cc565b6106de565b9050919050565b6000819050919050565b61090b836108d6565b61091f610917826108f8565b84845461087a565b825550505050565b600090565b610934610927565b61093f818484610902565b505050565b5b818110156109635761095860008261092c565b600181019050610945565b5050565b601f8211156109a85761097981610848565b6109828461085d565b81016020851015610991578190505b6109a561099d8561085d565b830182610944565b50505b505050565b600082821c905092915050565b60006109cb600019846008026109ad565b1980831691505092915050565b60006109e483836109ba565b9150826002028217905092915050565b6109fe83836107ae565b67ffffffffffffffff811115610a1757610a166107b9565b5b610a218254610817565b610a2c828285610967565b6000601f831160018114610a5b5760008415610a49578287013590505b610a5385826109d8565b865550610abb565b601f198416610a6986610848565b60005b82811015610a9157848901358255600182019150602085019450602081019050610a6c565b86831015610aae5784890135610aaa601f8916826109ba565b8355505b6001600288020188555050505b50505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610afe826106de565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b3057610b2f610ac4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207a83a6ee6cc36c5e47c563802cee97eea91d41206a7fe330b8e61a79d1185d1264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063bc197c811461003b578063f23a6e611461006b575b600080fd5b610055600480360381019061005091906105ac565b61009b565b60405161006291906106c3565b60405180910390f35b61008560048036038101906100809190610714565b6100bb565b60405161009291906106c3565b60405180910390f35b60006100ad89898989898989896100d7565b905098975050505050505050565b60006100cb8787878787876101f5565b90509695505050505050565b6000806100e261032b565b9050600081600d01600083600c0154815260200190815260200160002090508a8160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888882600301919061019a9291906103d2565b5086868260040191906101ae9291906103d2565b5084848260000191826101c29291906109f4565b5081600c0160008154809291906101d890610af3565b919050555063bc197c8160e01b9250505098975050505050505050565b60008061020061032b565b9050600081600d01600083600c015481526020019081526020016000209050888160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550878160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102ae87610358565b8160030190805190602001906102c592919061041f565b506102cf86610358565b8160040190805190602001906102e692919061041f565b5084848260000191826102fa9291906109f4565b5081600c01600081548092919061031090610af3565b919050555063f23a6e6160e01b925050509695505050505050565b6000807fe20f5a7f7e820e4505f9ef8ed1186e372d3490e37d8001618819927829be4e0590508091505090565b60606000600167ffffffffffffffff811115610377576103766107b9565b5b6040519080825280602002602001820160405280156103a55781602001602082028036833780820191505090505b50905082816000815181106103bd576103bc610b3b565b5b60200260200101818152505080915050919050565b82805482825590600052602060002090810192821561040e579160200282015b8281111561040d5782358255916020019190600101906103f2565b5b50905061041b919061046c565b5090565b82805482825590600052602060002090810192821561045b579160200282015b8281111561045a57825182559160200191906001019061043f565b5b509050610468919061046c565b5090565b5b8082111561048557600081600090555060010161046d565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104be82610493565b9050919050565b6104ce816104b3565b81146104d957600080fd5b50565b6000813590506104eb816104c5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610516576105156104f1565b5b8235905067ffffffffffffffff811115610533576105326104f6565b5b60208301915083602082028301111561054f5761054e6104fb565b5b9250929050565b60008083601f84011261056c5761056b6104f1565b5b8235905067ffffffffffffffff811115610589576105886104f6565b5b6020830191508360018202830111156105a5576105a46104fb565b5b9250929050565b60008060008060008060008060a0898b0312156105cc576105cb610489565b5b60006105da8b828c016104dc565b98505060206105eb8b828c016104dc565b975050604089013567ffffffffffffffff81111561060c5761060b61048e565b5b6106188b828c01610500565b9650965050606089013567ffffffffffffffff81111561063b5761063a61048e565b5b6106478b828c01610500565b9450945050608089013567ffffffffffffffff81111561066a5761066961048e565b5b6106768b828c01610556565b92509250509295985092959890939650565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6106bd81610688565b82525050565b60006020820190506106d860008301846106b4565b92915050565b6000819050919050565b6106f1816106de565b81146106fc57600080fd5b50565b60008135905061070e816106e8565b92915050565b60008060008060008060a0878903121561073157610730610489565b5b600061073f89828a016104dc565b965050602061075089828a016104dc565b955050604061076189828a016106ff565b945050606061077289828a016106ff565b935050608087013567ffffffffffffffff8111156107935761079261048e565b5b61079f89828a01610556565b92509250509295509295509295565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061082f57607f821691505b602082108103610842576108416107e8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261086d565b6108b4868361086d565b95508019841693508086168417925050509392505050565b6000819050919050565b60006108f16108ec6108e7846106de565b6108cc565b6106de565b9050919050565b6000819050919050565b61090b836108d6565b61091f610917826108f8565b84845461087a565b825550505050565b600090565b610934610927565b61093f818484610902565b505050565b5b818110156109635761095860008261092c565b600181019050610945565b5050565b601f8211156109a85761097981610848565b6109828461085d565b81016020851015610991578190505b6109a561099d8561085d565b830182610944565b50505b505050565b600082821c905092915050565b60006109cb600019846008026109ad565b1980831691505092915050565b60006109e483836109ba565b9150826002028217905092915050565b6109fe83836107ae565b67ffffffffffffffff811115610a1757610a166107b9565b5b610a218254610817565b610a2c828285610967565b6000601f831160018114610a5b5760008415610a49578287013590505b610a5385826109d8565b865550610abb565b601f198416610a6986610848565b60005b82811015610a9157848901358255600182019150602085019450602081019050610a6c565b86831015610aae5784890135610aaa601f8916826109ba565b8355505b6001600288020188555050505b50505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610afe826106de565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b3057610b2f610ac4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207a83a6ee6cc36c5e47c563802cee97eea91d41206a7fe330b8e61a79d1185d1264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated. This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s). This function MUST revert if it rejects the transfer(s). Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.",
        "params": {
          "_data": "Additional data with no specified format",
          "_from": "The address which previously owned the token",
          "_ids": "An array containing ids of each token being transferred (order and length must match _values array)",
          "_operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "_values": "An array containing amounts of each token being transferred (order and length must match _ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated. This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer. This function MUST revert if it rejects the transfer. Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.",
        "params": {
          "_data": "Additional data with no specified format",
          "_from": "The address which previously owned the token",
          "_id": "The ID of the token being transferred",
          "_operator": "The address which initiated the transfer (i.e. msg.sender)",
          "_value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "notice": "Handle the receipt of multiple ERC1155 token types."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Handle the receipt of a single ERC1155 token type."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}