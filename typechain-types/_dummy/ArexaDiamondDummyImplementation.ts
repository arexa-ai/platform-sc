/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ArexaDiamondDummyImplementation {
  export type Tuple6871229Struct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type Tuple6871229StructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };

  export type Tuple1236461Struct = {
    facetAddress: PromiseOrValue<string>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type Tuple1236461StructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export interface ArexaDiamondDummyImplementationInterface
  extends utils.Interface {
  functions: {
    "AMOUNT_VALUE_TYPE()": FunctionFragment;
    "AREXA_ADMIN_ROLE()": FunctionFragment;
    "AREXA_TOKEN_ID()": FunctionFragment;
    "AREXA_TOKEN_POOL_AREXAINC()": FunctionFragment;
    "AREXA_TOKEN_POOL_DEVELOPMENT()": FunctionFragment;
    "AREXA_TOKEN_POOL_INVESTOR()": FunctionFragment;
    "AREXA_TOKEN_POOL_MARKETING()": FunctionFragment;
    "AREXA_TOKEN_POOL_RESERVED()": FunctionFragment;
    "MAGIC100_FIRST_BUYER()": FunctionFragment;
    "MAGIC_TOKEN_ID()": FunctionFragment;
    "PAUSABLE_AREXA_TOKEN()": FunctionFragment;
    "PAUSABLE_FULL()": FunctionFragment;
    "PAUSABLE_MAGIC_TOKEN()": FunctionFragment;
    "PAUSABLE_SUBSCR1_TOKEN()": FunctionFragment;
    "PAUSABLE_SUBSCR2_TOKEN()": FunctionFragment;
    "PAUSABLE_TRADER_TOKEN()": FunctionFragment;
    "QUANTITY_VALUE_TYPE()": FunctionFragment;
    "SUBSCR1_TOKEN_TYPE()": FunctionFragment;
    "SUBSCR2_TOKEN_TYPE()": FunctionFragment;
    "TRADER_TOKEN_ID()": FunctionFragment;
    "accountsByToken(uint256)": FunctionFragment;
    "allowance(address,address,uint256)": FunctionFragment;
    "approve(address,uint256,uint256,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "buyArexaToken(uint128,uint8)": FunctionFragment;
    "buyArexaTokenAdmin(address,uint128,uint8,uint16)": FunctionFragment;
    "buyEdgeSubscription(uint32)": FunctionFragment;
    "buyEdgeSubscriptionAdmin(address,uint32,uint16)": FunctionFragment;
    "buyMagic100Token()": FunctionFragment;
    "buyMagic100TokenAdmin(address,uint16)": FunctionFragment;
    "buyOracleSubscription(uint32)": FunctionFragment;
    "buyOracleSubscriptionAdmin(address,uint32,uint16)": FunctionFragment;
    "buySubscription(uint256,uint32)": FunctionFragment;
    "buySubscriptionAdmin(address,uint256,uint32,uint16)": FunctionFragment;
    "buyTraderToken(uint128,uint8)": FunctionFragment;
    "buyTraderTokenAdmin(address,uint128,uint8,uint16)": FunctionFragment;
    "calcDivident(address)": FunctionFragment;
    "calcSubscriptionPrice(uint256,uint32)": FunctionFragment;
    "calcUnrestrictedAmount(address,uint256,uint256)": FunctionFragment;
    "checkRestriction(address,uint256,uint256)": FunctionFragment;
    "checkRestrictions(address,uint256[],uint256[])": FunctionFragment;
    "createSubscription(uint256,uint16,uint8,uint256,uint256,uint256)": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getAccountBlackWhiteList(bytes32,address)": FunctionFragment;
    "getArexaERC20Token()": FunctionFragment;
    "getArexaIncomeParameter(uint256)": FunctionFragment;
    "getArexaTokenPool(uint8)": FunctionFragment;
    "getCurrentSubscriptionTokenId(uint256)": FunctionFragment;
    "getInventory()": FunctionFragment;
    "getInventoryItem(address)": FunctionFragment;
    "getMagic100FirstBuyerWL(address)": FunctionFragment;
    "getPayingToken()": FunctionFragment;
    "getPoolAndArexaIncomeBalances()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTokenBaseUri()": FunctionFragment;
    "getTokenUri(uint256)": FunctionFragment;
    "getUri()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isOperatorSpendingLimitEnabled(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(bytes32)": FunctionFragment;
    "pauseAllToken()": FunctionFragment;
    "pauseToken(uint256)": FunctionFragment;
    "paused(bytes32)": FunctionFragment;
    "payArexaTokenFromPool(uint8,address,uint32)": FunctionFragment;
    "payoutArexaDivident(address,uint256)": FunctionFragment;
    "payoutArexaIncome(address,uint256)": FunctionFragment;
    "payoutDivident(uint256)": FunctionFragment;
    "renounceRole(bytes32)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setAccountBlackWhiteList(bytes32,address,bool)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setArexaIncomeParameter(uint256,uint32,uint32)": FunctionFragment;
    "setBatchMagic100FirstBuyerWL(address[],bool)": FunctionFragment;
    "setDummyImplementation(address)": FunctionFragment;
    "setMagic100FirstBuyerWL(address,bool)": FunctionFragment;
    "setOperatorSpendingLimitEnabled(uint256,bool)": FunctionFragment;
    "setPayingToken(address)": FunctionFragment;
    "setRoleAdmin(bytes32,bytes32)": FunctionFragment;
    "setTokenBaseURI(string)": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "setURI(string)": FunctionFragment;
    "stakeArexaToken(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokensByAccount(address)": FunctionFragment;
    "totalHolders(uint256)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause(bytes32)": FunctionFragment;
    "unpauseAllToken()": FunctionFragment;
    "unpauseToken(uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "withdrawArexaToken(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AMOUNT_VALUE_TYPE"
      | "AREXA_ADMIN_ROLE"
      | "AREXA_TOKEN_ID"
      | "AREXA_TOKEN_POOL_AREXAINC"
      | "AREXA_TOKEN_POOL_DEVELOPMENT"
      | "AREXA_TOKEN_POOL_INVESTOR"
      | "AREXA_TOKEN_POOL_MARKETING"
      | "AREXA_TOKEN_POOL_RESERVED"
      | "MAGIC100_FIRST_BUYER"
      | "MAGIC_TOKEN_ID"
      | "PAUSABLE_AREXA_TOKEN"
      | "PAUSABLE_FULL"
      | "PAUSABLE_MAGIC_TOKEN"
      | "PAUSABLE_SUBSCR1_TOKEN"
      | "PAUSABLE_SUBSCR2_TOKEN"
      | "PAUSABLE_TRADER_TOKEN"
      | "QUANTITY_VALUE_TYPE"
      | "SUBSCR1_TOKEN_TYPE"
      | "SUBSCR2_TOKEN_TYPE"
      | "TRADER_TOKEN_ID"
      | "accountsByToken"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfBatch"
      | "buyArexaToken"
      | "buyArexaTokenAdmin"
      | "buyEdgeSubscription"
      | "buyEdgeSubscriptionAdmin"
      | "buyMagic100Token"
      | "buyMagic100TokenAdmin"
      | "buyOracleSubscription"
      | "buyOracleSubscriptionAdmin"
      | "buySubscription"
      | "buySubscriptionAdmin"
      | "buyTraderToken"
      | "buyTraderTokenAdmin"
      | "calcDivident"
      | "calcSubscriptionPrice"
      | "calcUnrestrictedAmount"
      | "checkRestriction"
      | "checkRestrictions"
      | "createSubscription"
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "getAccountBlackWhiteList"
      | "getArexaERC20Token"
      | "getArexaIncomeParameter"
      | "getArexaTokenPool"
      | "getCurrentSubscriptionTokenId"
      | "getInventory"
      | "getInventoryItem"
      | "getMagic100FirstBuyerWL"
      | "getPayingToken"
      | "getPoolAndArexaIncomeBalances"
      | "getRoleAdmin"
      | "getTokenBaseUri"
      | "getTokenUri"
      | "getUri"
      | "grantRole"
      | "hasRole"
      | "implementation"
      | "isApprovedForAll"
      | "isOperatorSpendingLimitEnabled"
      | "name"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "pause"
      | "pauseAllToken"
      | "pauseToken"
      | "paused"
      | "payArexaTokenFromPool"
      | "payoutArexaDivident"
      | "payoutArexaIncome"
      | "payoutDivident"
      | "renounceRole"
      | "revokeRole"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setAccountBlackWhiteList"
      | "setApprovalForAll"
      | "setArexaIncomeParameter"
      | "setBatchMagic100FirstBuyerWL"
      | "setDummyImplementation"
      | "setMagic100FirstBuyerWL"
      | "setOperatorSpendingLimitEnabled"
      | "setPayingToken"
      | "setRoleAdmin"
      | "setTokenBaseURI"
      | "setTokenURI"
      | "setURI"
      | "stakeArexaToken"
      | "supportsInterface"
      | "symbol"
      | "tokensByAccount"
      | "totalHolders"
      | "totalSupply"
      | "transferOwnership"
      | "unpause"
      | "unpauseAllToken"
      | "unpauseToken"
      | "uri"
      | "withdrawArexaToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AMOUNT_VALUE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_AREXAINC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_DEVELOPMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_INVESTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_MARKETING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_RESERVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGIC100_FIRST_BUYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGIC_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_AREXA_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_FULL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_MAGIC_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_SUBSCR1_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_SUBSCR2_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_TRADER_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUANTITY_VALUE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCR1_TOKEN_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCR2_TOKEN_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADER_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountsByToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyArexaToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyArexaTokenAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyEdgeSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyEdgeSubscriptionAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyMagic100Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMagic100TokenAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOracleSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOracleSubscriptionAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buySubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buySubscriptionAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTraderToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTraderTokenAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcDivident",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSubscriptionPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUnrestrictedAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRestriction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRestrictions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      ArexaDiamondDummyImplementation.Tuple6871229Struct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountBlackWhiteList",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArexaERC20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArexaIncomeParameter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArexaTokenPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSubscriptionTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInventory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInventoryItem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMagic100FirstBuyerWL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAndArexaIncomeBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBaseUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenUri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getUri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorSpendingLimitEnabled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseAllToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "paused",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "payArexaTokenFromPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutArexaDivident",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutArexaIncome",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutDivident",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountBlackWhiteList",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArexaIncomeParameter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchMagic100FirstBuyerWL",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDummyImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMagic100FirstBuyerWL",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorSpendingLimitEnabled",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayingToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeArexaToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensByAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalHolders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseAllToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawArexaToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "AMOUNT_VALUE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_AREXAINC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_DEVELOPMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_INVESTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_MARKETING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_RESERVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGIC100_FIRST_BUYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGIC_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_AREXA_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_FULL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_MAGIC_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_SUBSCR1_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_SUBSCR2_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_TRADER_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUANTITY_VALUE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCR1_TOKEN_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCR2_TOKEN_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADER_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountsByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyArexaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyArexaTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyEdgeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyEdgeSubscriptionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMagic100Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMagic100TokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyOracleSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyOracleSubscriptionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buySubscriptionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTraderToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTraderTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDivident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUnrestrictedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBlackWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArexaERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArexaIncomeParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArexaTokenPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSubscriptionTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventoryItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagic100FirstBuyerWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAndArexaIncomeBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBaseUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorSpendingLimitEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAllToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payArexaTokenFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutArexaDivident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutArexaIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutDivident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountBlackWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArexaIncomeParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchMagic100FirstBuyerWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDummyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMagic100FirstBuyerWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorSpendingLimitEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeArexaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseAllToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawArexaToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ArexaDiamondDummyImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArexaDiamondDummyImplementationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<[number]>;

    AREXA_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<[number]>;

    MAGIC100_FIRST_BUYER(overrides?: CallOverrides): Promise<[string]>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<[number]>;

    SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountsByToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    allowance(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _currentValue: PromiseOrValue<BigNumberish>,
      _newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyArexaTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyEdgeSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyMagic100Token(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyMagic100TokenAdmin(
      toAccount: PromiseOrValue<string>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyOracleSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buySubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTraderTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcUnrestrictedAmount(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkRestriction(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkRestrictions(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createSubscription(
      tokenType: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: ArexaDiamondDummyImplementation.Tuple6871229Struct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [ArexaDiamondDummyImplementation.Tuple1236461StructOutput[]] & {
        facets_: ArexaDiamondDummyImplementation.Tuple1236461StructOutput[];
      }
    >;

    getAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getArexaERC20Token(overrides?: CallOverrides): Promise<[string]>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { pool: number; arexa: number }>;

    getArexaTokenPool(
      _tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { total: BigNumber; sold: BigNumber }>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInventory(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        sumQuantity: BigNumber;
        sumAmount: BigNumber;
        sumPnl: BigNumber;
      }
    >;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        deltaPnl: BigNumber;
        payedPnl: BigNumber;
      }
    >;

    getMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPayingToken(overrides?: CallOverrides): Promise<[string]>;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pool: BigNumber;
        poolPaidOut: BigNumber;
        arexa: BigNumber;
        arexaPaidOut: BigNumber;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenBaseUri(overrides?: CallOverrides): Promise<[string]>;

    getTokenUri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUri(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status_: boolean }>;

    payArexaTokenFromPool(
      poolType: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBatchMagic100FirstBuyerWL(
      _addresses: PromiseOrValue<string>[],
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDummyImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPayingToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenBaseURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenURI(
      _id: PromiseOrValue<BigNumberish>,
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeArexaToken(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokensByAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    totalHolders(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawArexaToken(
      fromAccount: PromiseOrValue<string>,
      toAccount: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

  AREXA_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<number>;

  MAGIC100_FIRST_BUYER(overrides?: CallOverrides): Promise<string>;

  MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_FULL(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<string>;

  QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

  SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  accountsByToken(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  allowance(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _operator: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _currentValue: PromiseOrValue<BigNumberish>,
    _newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _owner: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    _owners: PromiseOrValue<string>[],
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  buyArexaToken(
    value: PromiseOrValue<BigNumberish>,
    valueType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyArexaTokenAdmin(
    toAccount: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    valueType: PromiseOrValue<BigNumberish>,
    discountPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyEdgeSubscription(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyEdgeSubscriptionAdmin(
    toAccount: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    discountPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyMagic100Token(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyMagic100TokenAdmin(
    toAccount: PromiseOrValue<string>,
    discountPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyOracleSubscription(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyOracleSubscriptionAdmin(
    toAccount: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    discountPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buySubscription(
    tokenId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buySubscriptionAdmin(
    toAccount: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    discountPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTraderToken(
    value: PromiseOrValue<BigNumberish>,
    valueType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTraderTokenAdmin(
    toAccount: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    valueType: PromiseOrValue<BigNumberish>,
    discountPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcDivident(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSubscriptionPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcUnrestrictedAmount(
    account: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkRestriction(
    account: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkRestrictions(
    account: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  createSubscription(
    tokenType: PromiseOrValue<BigNumberish>,
    year: PromiseOrValue<BigNumberish>,
    month: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    min: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: ArexaDiamondDummyImplementation.Tuple6871229Struct[],
    _init: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<ArexaDiamondDummyImplementation.Tuple1236461StructOutput[]>;

  getAccountBlackWhiteList(
    _target: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getArexaERC20Token(overrides?: CallOverrides): Promise<string>;

  getArexaIncomeParameter(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { pool: number; arexa: number }>;

  getArexaTokenPool(
    _tokenType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { total: BigNumber; sold: BigNumber }>;

  getCurrentSubscriptionTokenId(
    tokenType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInventory(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      isEnabled: boolean;
      sumQuantity: BigNumber;
      sumAmount: BigNumber;
      sumPnl: BigNumber;
    }
  >;

  getInventoryItem(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      quantity: BigNumber;
      deltaPnl: BigNumber;
      payedPnl: BigNumber;
    }
  >;

  getMagic100FirstBuyerWL(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPayingToken(overrides?: CallOverrides): Promise<string>;

  getPoolAndArexaIncomeBalances(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pool: BigNumber;
      poolPaidOut: BigNumber;
      arexa: BigNumber;
      arexaPaidOut: BigNumber;
    }
  >;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenBaseUri(overrides?: CallOverrides): Promise<string>;

  getTokenUri(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUri(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  implementation(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorSpendingLimitEnabled(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    _operator: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _values: PromiseOrValue<BigNumberish>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    _operator: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseAllToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(
    target: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payArexaTokenFromPool(
    poolType: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoutArexaDivident(
    toAccount: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoutArexaIncome(
    toAccount: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoutDivident(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _values: PromiseOrValue<BigNumberish>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccountBlackWhiteList(
    _target: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    _lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArexaIncomeParameter(
    tokenId: PromiseOrValue<BigNumberish>,
    pool: PromiseOrValue<BigNumberish>,
    arexa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBatchMagic100FirstBuyerWL(
    _addresses: PromiseOrValue<string>[],
    _lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDummyImplementation(
    _implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMagic100FirstBuyerWL(
    _account: PromiseOrValue<string>,
    _lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperatorSpendingLimitEnabled(
    _tokenId: PromiseOrValue<BigNumberish>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPayingToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    adminRole: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenBaseURI(
    newuri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenURI(
    _id: PromiseOrValue<BigNumberish>,
    newuri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setURI(
    newuri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeArexaToken(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokensByAccount(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  totalHolders(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseAllToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawArexaToken(
    fromAccount: PromiseOrValue<string>,
    toAccount: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

    AREXA_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<number>;

    MAGIC100_FIRST_BUYER(overrides?: CallOverrides): Promise<string>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<string>;

    QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

    SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    accountsByToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    allowance(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _currentValue: PromiseOrValue<BigNumberish>,
      _newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyArexaTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyEdgeSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyMagic100Token(overrides?: CallOverrides): Promise<void>;

    buyMagic100TokenAdmin(
      toAccount: PromiseOrValue<string>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyOracleSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buySubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTraderTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUnrestrictedAmount(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRestriction(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkRestrictions(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    createSubscription(
      tokenType: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: ArexaDiamondDummyImplementation.Tuple6871229Struct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<ArexaDiamondDummyImplementation.Tuple1236461StructOutput[]>;

    getAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getArexaERC20Token(overrides?: CallOverrides): Promise<string>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { pool: number; arexa: number }>;

    getArexaTokenPool(
      _tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { total: BigNumber; sold: BigNumber }>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInventory(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        sumQuantity: BigNumber;
        sumAmount: BigNumber;
        sumPnl: BigNumber;
      }
    >;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        deltaPnl: BigNumber;
        payedPnl: BigNumber;
      }
    >;

    getMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPayingToken(overrides?: CallOverrides): Promise<string>;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pool: BigNumber;
        poolPaidOut: BigNumber;
        arexa: BigNumber;
        arexaPaidOut: BigNumber;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenBaseUri(overrides?: CallOverrides): Promise<string>;

    getTokenUri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUri(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    implementation(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAllToken(overrides?: CallOverrides): Promise<void>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payArexaTokenFromPool(
      poolType: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBatchMagic100FirstBuyerWL(
      _addresses: PromiseOrValue<string>[],
      _lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDummyImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayingToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenBaseURI(
      newuri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      _id: PromiseOrValue<BigNumberish>,
      newuri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeArexaToken(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokensByAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    totalHolders(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseAllToken(overrides?: CallOverrides): Promise<void>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawArexaToken(
      fromAccount: PromiseOrValue<string>,
      toAccount: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<BigNumber>;

    MAGIC100_FIRST_BUYER(overrides?: CallOverrides): Promise<BigNumber>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    accountsByToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _currentValue: PromiseOrValue<BigNumberish>,
      _newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyArexaTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyEdgeSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyMagic100Token(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyMagic100TokenAdmin(
      toAccount: PromiseOrValue<string>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyOracleSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buySubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTraderTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUnrestrictedAmount(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRestriction(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRestrictions(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSubscription(
      tokenType: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: ArexaDiamondDummyImplementation.Tuple6871229Struct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArexaERC20Token(overrides?: CallOverrides): Promise<BigNumber>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArexaTokenPool(
      _tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInventory(overrides?: CallOverrides): Promise<BigNumber>;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayingToken(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBaseUri(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenUri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUri(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payArexaTokenFromPool(
      poolType: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBatchMagic100FirstBuyerWL(
      _addresses: PromiseOrValue<string>[],
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDummyImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPayingToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenBaseURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenURI(
      _id: PromiseOrValue<BigNumberish>,
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeArexaToken(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokensByAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalHolders(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawArexaToken(
      fromAccount: PromiseOrValue<string>,
      toAccount: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AREXA_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_AREXAINC(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_DEVELOPMENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_INVESTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_MARKETING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_RESERVED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGIC100_FIRST_BUYER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSABLE_AREXA_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSABLE_MAGIC_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_SUBSCR1_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_SUBSCR2_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_TRADER_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QUANTITY_VALUE_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCR1_TOKEN_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCR2_TOKEN_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountsByToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _operator: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _currentValue: PromiseOrValue<BigNumberish>,
      _newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyArexaTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyEdgeSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyMagic100Token(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyMagic100TokenAdmin(
      toAccount: PromiseOrValue<string>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyOracleSubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buySubscriptionAdmin(
      toAccount: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTraderTokenAdmin(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      discountPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUnrestrictedAmount(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRestriction(
      account: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRestrictions(
      account: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSubscription(
      tokenType: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: ArexaDiamondDummyImplementation.Tuple6871229Struct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArexaERC20Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArexaTokenPool(
      _tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInventory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBaseUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenUri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payArexaTokenFromPool(
      poolType: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccountBlackWhiteList(
      _target: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBatchMagic100FirstBuyerWL(
      _addresses: PromiseOrValue<string>[],
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDummyImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMagic100FirstBuyerWL(
      _account: PromiseOrValue<string>,
      _lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorSpendingLimitEnabled(
      _tokenId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPayingToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenBaseURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      _id: PromiseOrValue<BigNumberish>,
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeArexaToken(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensByAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalHolders(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawArexaToken(
      fromAccount: PromiseOrValue<string>,
      toAccount: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
