/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TokenAMLFacetInterface extends utils.Interface {
  functions: {
    "RECIPIENT_BLACKLIST()": FunctionFragment;
    "SENDER_BLACKLIST()": FunctionFragment;
    "getAccountBlackWhiteList(bytes32,address)": FunctionFragment;
    "getDestinationAccountBL(address)": FunctionFragment;
    "getSourceAccountBL(address)": FunctionFragment;
    "setAccountBlackWhiteList(bytes32,address,bool)": FunctionFragment;
    "setBatchDestinationAccountBL(address[],bool)": FunctionFragment;
    "setBatchSourceAccountBL(address[],bool)": FunctionFragment;
    "setDestinationAccountBL(address,bool)": FunctionFragment;
    "setSourceAccountBL(address,bool)": FunctionFragment;
    "withdrawUserTokenByCompliance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RECIPIENT_BLACKLIST"
      | "SENDER_BLACKLIST"
      | "getAccountBlackWhiteList"
      | "getDestinationAccountBL"
      | "getSourceAccountBL"
      | "setAccountBlackWhiteList"
      | "setBatchDestinationAccountBL"
      | "setBatchSourceAccountBL"
      | "setDestinationAccountBL"
      | "setSourceAccountBL"
      | "withdrawUserTokenByCompliance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RECIPIENT_BLACKLIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SENDER_BLACKLIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBlackWhiteList",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDestinationAccountBL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSourceAccountBL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountBlackWhiteList",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchDestinationAccountBL",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchSourceAccountBL",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinationAccountBL",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSourceAccountBL",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUserTokenByCompliance",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "RECIPIENT_BLACKLIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SENDER_BLACKLIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBlackWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDestinationAccountBL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSourceAccountBL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountBlackWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchDestinationAccountBL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchSourceAccountBL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestinationAccountBL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSourceAccountBL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUserTokenByCompliance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TokenAMLFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenAMLFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RECIPIENT_BLACKLIST(overrides?: CallOverrides): Promise<[string]>;

    SENDER_BLACKLIST(overrides?: CallOverrides): Promise<[string]>;

    getAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDestinationAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getSourceAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBatchDestinationAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBatchSourceAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDestinationAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSourceAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUserTokenByCompliance(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RECIPIENT_BLACKLIST(overrides?: CallOverrides): Promise<string>;

  SENDER_BLACKLIST(overrides?: CallOverrides): Promise<string>;

  getAccountBlackWhiteList(
    target: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDestinationAccountBL(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getSourceAccountBL(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAccountBlackWhiteList(
    target: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBatchDestinationAccountBL(
    addresses: PromiseOrValue<string>[],
    lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBatchSourceAccountBL(
    addresses: PromiseOrValue<string>[],
    lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDestinationAccountBL(
    account: PromiseOrValue<string>,
    lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSourceAccountBL(
    account: PromiseOrValue<string>,
    lockValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUserTokenByCompliance(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RECIPIENT_BLACKLIST(overrides?: CallOverrides): Promise<string>;

    SENDER_BLACKLIST(overrides?: CallOverrides): Promise<string>;

    getAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDestinationAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSourceAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBatchDestinationAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBatchSourceAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDestinationAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSourceAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUserTokenByCompliance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    RECIPIENT_BLACKLIST(overrides?: CallOverrides): Promise<BigNumber>;

    SENDER_BLACKLIST(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDestinationAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSourceAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBatchDestinationAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBatchSourceAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDestinationAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSourceAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUserTokenByCompliance(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RECIPIENT_BLACKLIST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SENDER_BLACKLIST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDestinationAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSourceAccountBL(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAccountBlackWhiteList(
      target: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBatchDestinationAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBatchSourceAccountBL(
      addresses: PromiseOrValue<string>[],
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDestinationAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSourceAccountBL(
      account: PromiseOrValue<string>,
      lockValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUserTokenByCompliance(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
