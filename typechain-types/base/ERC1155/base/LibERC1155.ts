/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface LibERC1155Interface extends utils.Interface {
  functions: {};

  events: {
    "AllTokenPaused(address)": EventFragment;
    "AllTokenUnpaused(address)": EventFragment;
    "Approval(address,address,uint256,uint256,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TokenPaused(address,uint256)": EventFragment;
    "TokenUnpaused(address,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllTokenPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllTokenUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface AllTokenPausedEventObject {
  account: string;
}
export type AllTokenPausedEvent = TypedEvent<
  [string],
  AllTokenPausedEventObject
>;

export type AllTokenPausedEventFilter = TypedEventFilter<AllTokenPausedEvent>;

export interface AllTokenUnpausedEventObject {
  account: string;
}
export type AllTokenUnpausedEvent = TypedEvent<
  [string],
  AllTokenUnpausedEventObject
>;

export type AllTokenUnpausedEventFilter =
  TypedEventFilter<AllTokenUnpausedEvent>;

export interface ApprovalEventObject {
  owner: string;
  operator: string;
  id: BigNumber;
  currenctValue: BigNumber;
  newValue: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TokenPausedEventObject {
  account: string;
  tokenId: BigNumber;
}
export type TokenPausedEvent = TypedEvent<
  [string, BigNumber],
  TokenPausedEventObject
>;

export type TokenPausedEventFilter = TypedEventFilter<TokenPausedEvent>;

export interface TokenUnpausedEventObject {
  account: string;
  tokenId: BigNumber;
}
export type TokenUnpausedEvent = TypedEvent<
  [string, BigNumber],
  TokenUnpausedEventObject
>;

export type TokenUnpausedEventFilter = TypedEventFilter<TokenUnpausedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  tokenId: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface LibERC1155 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibERC1155Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AllTokenPaused(address)"(
      account?: PromiseOrValue<string> | null
    ): AllTokenPausedEventFilter;
    AllTokenPaused(
      account?: PromiseOrValue<string> | null
    ): AllTokenPausedEventFilter;

    "AllTokenUnpaused(address)"(
      account?: PromiseOrValue<string> | null
    ): AllTokenUnpausedEventFilter;
    AllTokenUnpaused(
      account?: PromiseOrValue<string> | null
    ): AllTokenUnpausedEventFilter;

    "Approval(address,address,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      currenctValue?: null,
      newValue?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      currenctValue?: null,
      newValue?: null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "TokenPaused(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenPausedEventFilter;
    TokenPaused(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenPausedEventFilter;

    "TokenUnpaused(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenUnpausedEventFilter;
    TokenUnpaused(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenUnpausedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(
      value?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
