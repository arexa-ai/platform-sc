/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LibBlackWhiteList,
  LibBlackWhiteListInterface,
} from "../../../base/BlackWhiteList/LibBlackWhiteList";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_target",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_lockValue",
        type: "bool",
      },
    ],
    name: "AccountBlackWhiteList",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e333abb1f72d7994bf3b4bb12b029b19c93c7b54510eb75f00423e79f908ddf64736f6c63430008110033";

type LibBlackWhiteListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibBlackWhiteListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibBlackWhiteList__factory extends ContractFactory {
  constructor(...args: LibBlackWhiteListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibBlackWhiteList> {
    return super.deploy(overrides || {}) as Promise<LibBlackWhiteList>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibBlackWhiteList {
    return super.attach(address) as LibBlackWhiteList;
  }
  override connect(signer: Signer): LibBlackWhiteList__factory {
    return super.connect(signer) as LibBlackWhiteList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibBlackWhiteListInterface {
    return new utils.Interface(_abi) as LibBlackWhiteListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibBlackWhiteList {
    return new Contract(address, _abi, signerOrProvider) as LibBlackWhiteList;
  }
}
