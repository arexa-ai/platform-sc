/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ArexaAdminFacet,
  ArexaAdminFacetInterface,
} from "../../ArexaPlatform/ArexaAdminFacet";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetedPausable__TargetedPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "getArexaERC20Token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPayingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "setPayingToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610782806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630848818b146100465780635ddb39de146100625780639de34b3b14610080575b600080fd5b610060600480360381019061005b91906105d7565b61009e565b005b61006a6100e3565b6040516100779190610663565b60405180910390f35b610088610167565b6040516100959190610663565b60405180910390f35b6000801b6100ab816101eb565b7f72a415ccbbed7752b009b01c3fad0a1694ff64e2a51c65a309c0517cd732d2d16100d58161022e565b6100de8361023b565b505050565b60006100ed61028e565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461015a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610151906106db565b60405180910390fd5b6101626102c6565b905090565b600061017161028e565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146101de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d5906106db565b60405180910390fd5b6101e66102fe565b905090565b6101f481610336565b1561022b576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6102388133610369565b50565b60006102456103ba565b9050818160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806102996103e7565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000806102d16103ba565b90508060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000806103096103ba565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000610340610414565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b6103738282610441565b6103b65781816040517f521dcf0d0000000000000000000000000000000000000000000000000000000081526004016103ad929190610723565b60405180910390fd5b5050565b6000807f1a2f703e435318ee39feac62abda44020ca215505d5ba3284195182c842a2d3090508091505090565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b60008061044c6104e2565b90506104d9838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010161050f90919063ffffffff16565b91505092915050565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b6000610537836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61053f565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061059282610567565b9050919050565b60006105a482610587565b9050919050565b6105b481610599565b81146105bf57600080fd5b50565b6000813590506105d1816105ab565b92915050565b6000602082840312156105ed576105ec610562565b5b60006105fb848285016105c2565b91505092915050565b6000819050919050565b600061062961062461061f84610567565b610604565b610567565b9050919050565b600061063b8261060e565b9050919050565b600061064d82610630565b9050919050565b61065d81610642565b82525050565b60006020820190506106786000830184610654565b92915050565b600082825260208201905092915050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b60006106c5600b8361067e565b91506106d08261068f565b602082019050919050565b600060208201905081810360008301526106f4816106b8565b9050919050565b6000819050919050565b61070e816106fb565b82525050565b61071d81610587565b82525050565b60006040820190506107386000830185610705565b6107456020830184610714565b939250505056fea2646970667358221220fd4e091a670d5a42456a2cb794f6df46b03a89e7bdfd300edfaacaf62230bdb464736f6c63430008110033";

type ArexaAdminFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArexaAdminFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArexaAdminFacet__factory extends ContractFactory {
  constructor(...args: ArexaAdminFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ArexaAdminFacet> {
    return super.deploy(overrides || {}) as Promise<ArexaAdminFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ArexaAdminFacet {
    return super.attach(address) as ArexaAdminFacet;
  }
  override connect(signer: Signer): ArexaAdminFacet__factory {
    return super.connect(signer) as ArexaAdminFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArexaAdminFacetInterface {
    return new utils.Interface(_abi) as ArexaAdminFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArexaAdminFacet {
    return new Contract(address, _abi, signerOrProvider) as ArexaAdminFacet;
  }
}
