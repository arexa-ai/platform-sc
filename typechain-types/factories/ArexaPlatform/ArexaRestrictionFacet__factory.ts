/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ArexaRestrictionFacet,
  ArexaRestrictionFacetInterface,
} from "../../ArexaPlatform/ArexaRestrictionFacet";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "LibERC1155__ArrayLengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "calcUnrestrictedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "checkRestriction",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "checkRestrictions",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b22806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635da9751c14610046578063b227956014610076578063c8e5859c14610092575b600080fd5b610060600480360381019061005b91906106fe565b6100ae565b60405161006d9190610760565b60405180910390f35b610090600480360381019061008b91906107e0565b610139565b005b6100ac60048036038101906100a791906106fe565b610242565b005b60006100b86102c7565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610125576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011c906108d2565b60405180910390fd5b6101308484846102ff565b90509392505050565b6101416102c7565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a5906108d2565b60405180910390fd5b61023b85858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061040d565b5050505050565b61024a6102c7565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146102b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae906108d2565b60405180910390fd5b6102c28383836104a6565b505050565b6000806102d26105ed565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60008061030a61061a565b905060008160000160008681526020019081526020016000209050438160010154101561033b578392505050610406565b60008160030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c826003015483600001546103989190610921565b6103a29190610984565b83600201548360020154436103b79190610921565b6103c19190610984565b6103cb91906109b5565b9050600082600101546103f18385600301546103e791906109f7565b8560000154610647565b6103fb9190610921565b905080955050505050505b9392505050565b8051825114610448576040517f583b4bea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156104a0576104938484838151811061046b5761046a610a2b565b5b602002602001015184848151811061048657610485610a2b565b5b60200260200101516104a6565b808060010191505061044b565b50505050565b60006104b061061a565b905060008160000160008581526020019081526020016000209050438160010154116104dd5750506105e8565b60008160030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c8260030154836000015461053a9190610921565b6105449190610984565b83600201548360020154436105599190610921565b6105639190610984565b61056d91906109b5565b90506000826001015461059383856003015461058991906109f7565b8560000154610647565b61059d9190610921565b9050808611156105e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d990610acc565b60405180910390fd5b50505050505b505050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000807fb666c964c288db81fc3205a9feeb13cfebbde2a4a4664c45ea26ef9d3d8de79290508091505090565b60008183116106565782610658565b815b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106958261066a565b9050919050565b6106a58161068a565b81146106b057600080fd5b50565b6000813590506106c28161069c565b92915050565b6000819050919050565b6106db816106c8565b81146106e657600080fd5b50565b6000813590506106f8816106d2565b92915050565b60008060006060848603121561071757610716610660565b5b6000610725868287016106b3565b9350506020610736868287016106e9565b9250506040610747868287016106e9565b9150509250925092565b61075a816106c8565b82525050565b60006020820190506107756000830184610751565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107a05761079f61077b565b5b8235905067ffffffffffffffff8111156107bd576107bc610780565b5b6020830191508360208202830111156107d9576107d8610785565b5b9250929050565b6000806000806000606086880312156107fc576107fb610660565b5b600061080a888289016106b3565b955050602086013567ffffffffffffffff81111561082b5761082a610665565b5b6108378882890161078a565b9450945050604086013567ffffffffffffffff81111561085a57610859610665565b5b6108668882890161078a565b92509250509295509295909350565b600082825260208201905092915050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b60006108bc600b83610875565b91506108c782610886565b602082019050919050565b600060208201905081810360008301526108eb816108af565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061092c826106c8565b9150610937836106c8565b925082820390508181111561094f5761094e6108f2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061098f826106c8565b915061099a836106c8565b9250826109aa576109a9610955565b5b828204905092915050565b60006109c0826106c8565b91506109cb836106c8565b92508282026109d9816106c8565b915082820484148315176109f0576109ef6108f2565b5b5092915050565b6000610a02826106c8565b9150610a0d836106c8565b9250828201905080821115610a2557610a246108f2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f54686520616d6f756e7420697320677261746572207468656e2074686520616360008201527f63756d6c6174656420282773656c6c61626c65272920616d6f756e7421000000602082015250565b6000610ab6603d83610875565b9150610ac182610a5a565b604082019050919050565b60006020820190508181036000830152610ae581610aa9565b905091905056fea2646970667358221220509fc4e0f69c9912c2eec927477837506fc3ad59937790f49cd1fa1fe32ce3cd64736f6c63430008110033";

type ArexaRestrictionFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArexaRestrictionFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArexaRestrictionFacet__factory extends ContractFactory {
  constructor(...args: ArexaRestrictionFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ArexaRestrictionFacet> {
    return super.deploy(overrides || {}) as Promise<ArexaRestrictionFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ArexaRestrictionFacet {
    return super.attach(address) as ArexaRestrictionFacet;
  }
  override connect(signer: Signer): ArexaRestrictionFacet__factory {
    return super.connect(signer) as ArexaRestrictionFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArexaRestrictionFacetInterface {
    return new utils.Interface(_abi) as ArexaRestrictionFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArexaRestrictionFacet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ArexaRestrictionFacet;
  }
}
