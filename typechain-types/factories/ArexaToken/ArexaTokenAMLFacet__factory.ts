/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ArexaTokenAMLFacet,
  ArexaTokenAMLFacetInterface,
} from "../../ArexaToken/ArexaTokenAMLFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetedPausable__TargetedPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "RECIPIENT_BLACKLIST",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SENDER_BLACKLIST",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_target",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getAccountBlackWhiteList",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getDestinationAccountBL",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getSourceAccountBL",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_target",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_lockValue",
        type: "bool",
      },
    ],
    name: "setAccountBlackWhiteList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "_lockValue",
        type: "bool",
      },
    ],
    name: "setBatchDestinationAccountBL",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "_lockValue",
        type: "bool",
      },
    ],
    name: "setBatchSourceAccountBL",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_lockValue",
        type: "bool",
      },
    ],
    name: "setDestinationAccountBL",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_lockValue",
        type: "bool",
      },
    ],
    name: "setSourceAccountBL",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "withdrawUserTokenByCompliance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506112b0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636c19e588116100715780636c19e588146101645780638dc82297146101805780639f4e14b01461019e578063adc557d4146101ba578063bc949df8146101d6578063d8427cce146101f2576100a9565b806329012777146100ae5780632b7ea538146100ca57806345d4dc68146100e85780634c67fedd146101045780634f80ad2514610134575b600080fd5b6100c860048036038101906100c39190610e61565b610222565b005b6100d2610390565b6040516100df9190610eda565b60405180910390f35b61010260048036038101906100fd9190610f53565b6103b4565b005b61011e60048036038101906101199190610f53565b610457565b60405161012b9190610f8f565b60405180910390f35b61014e60048036038101906101499190610fd6565b6104ff565b60405161015b9190610f8f565b60405180910390f35b61017e60048036038101906101799190611016565b610513565b005b6101886105d1565b6040516101959190610eda565b60405180910390f35b6101b860048036038101906101b39190610e61565b6105f5565b005b6101d460048036038101906101cf9190611069565b610763565b005b6101f060048036038101906101eb9190611069565b610840565b005b61020c60048036038101906102079190610f53565b61091d565b6040516102199190610f8f565b60405180910390f35b61022a6109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028e90611106565b60405180910390fd5b6000801b6102a4816109fd565b7f17a5b61e4b0039a783f3595ae6d0f558a99530d7aec98ec66e68de70cfe985396102ce81610a40565b60ff858590501115610315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030c90611172565b60405180910390fd5b60005b85859050811015610388576103757fc2f91dd6e7debe58ff6f83f765bc16170e3d00c80756fde41c280108425bbd4787878481811061035a57610359611192565b5b905060200201602081019061036f9190610f53565b86610a4d565b8080610380906111fa565b915050610318565b505050505050565b7ff068a4043b7899a312f6fe21b5b3a74d16e144a513eb6a345b2c713987c93b5581565b6103bc6109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042090611106565b60405180910390fd5b7f442a94f1a1fac79af32856af2a64f63648cfa2ef3b98610a5bb7cbec4cee698561045381610a40565b5050565b60006104616109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590611106565b60405180910390fd5b6104f87ff068a4043b7899a312f6fe21b5b3a74d16e144a513eb6a345b2c713987c93b5583610b18565b9050919050565b600061050b8383610b18565b905092915050565b61051b6109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057f90611106565b60405180910390fd5b6000801b610595816109fd565b7f17a5b61e4b0039a783f3595ae6d0f558a99530d7aec98ec66e68de70cfe985396105bf81610a40565b6105ca858585610a4d565b5050505050565b7fc2f91dd6e7debe58ff6f83f765bc16170e3d00c80756fde41c280108425bbd4781565b6105fd6109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066190611106565b60405180910390fd5b6000801b610677816109fd565b7f17a5b61e4b0039a783f3595ae6d0f558a99530d7aec98ec66e68de70cfe985396106a181610a40565b60ff8585905011156106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df90611172565b60405180910390fd5b60005b8585905081101561075b576107487ff068a4043b7899a312f6fe21b5b3a74d16e144a513eb6a345b2c713987c93b5587878481811061072d5761072c611192565b5b90506020020160208101906107429190610f53565b86610a4d565b8080610753906111fa565b9150506106eb565b505050505050565b61076b6109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146107d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cf90611106565b60405180910390fd5b6000801b6107e5816109fd565b7f17a5b61e4b0039a783f3595ae6d0f558a99530d7aec98ec66e68de70cfe9853961080f81610a40565b61083a7ff068a4043b7899a312f6fe21b5b3a74d16e144a513eb6a345b2c713987c93b558585610a4d565b50505050565b6108486109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146108b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ac90611106565b60405180910390fd5b6000801b6108c2816109fd565b7f17a5b61e4b0039a783f3595ae6d0f558a99530d7aec98ec66e68de70cfe985396108ec81610a40565b6109177fc2f91dd6e7debe58ff6f83f765bc16170e3d00c80756fde41c280108425bbd478585610a4d565b50505050565b60006109276109c5565b73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098b90611106565b60405180910390fd5b6109be7fc2f91dd6e7debe58ff6f83f765bc16170e3d00c80756fde41c280108425bbd4783610b18565b9050919050565b6000806109d0610b8e565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b610a0681610bbb565b15610a3d576040517f2d0a436a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b610a4a8133610bee565b50565b6000610a57610c3f565b90508181600001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f696f1e09104a0bef7512faf461f1a6962c3c8151a4d5979d4fdfa5112fccc51984604051610b0a9190610f8f565b60405180910390a350505050565b600080610b23610c3f565b905080600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000807ff72346055b4d7224c7ec19860d22963ca622fbb313761bfba507c1a3aeedf37290508091505090565b6000610bc5610c6c565b600001600083815260200190815260200160002060009054906101000a900460ff169050919050565b610bf88282610c99565b610c3b5781816040517f521dcf0d000000000000000000000000000000000000000000000000000000008152600401610c32929190611251565b60405180910390fd5b5050565b6000807f7fb8776fdb93079091f516133d7bb98c82f37f53f39f39f153c42a90e5e5891290508091505090565b6000807fe8ceb94393aac3e803a9d4b376f7c5ffd7e8b6caab697212a5360c34a283caa190508091505090565b600080610ca4610d3a565b9050610d31838260010160008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600101610d6790919063ffffffff16565b91505092915050565b6000807f746c6723185dc95a8925081faed89cbd4670299390e2ebfb0b9c3e755e204ef490508091505090565b6000610d8f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610d97565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610de957610de8610dc4565b5b8235905067ffffffffffffffff811115610e0657610e05610dc9565b5b602083019150836020820283011115610e2257610e21610dce565b5b9250929050565b60008115159050919050565b610e3e81610e29565b8114610e4957600080fd5b50565b600081359050610e5b81610e35565b92915050565b600080600060408486031215610e7a57610e79610dba565b5b600084013567ffffffffffffffff811115610e9857610e97610dbf565b5b610ea486828701610dd3565b93509350506020610eb786828701610e4c565b9150509250925092565b6000819050919050565b610ed481610ec1565b82525050565b6000602082019050610eef6000830184610ecb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f2082610ef5565b9050919050565b610f3081610f15565b8114610f3b57600080fd5b50565b600081359050610f4d81610f27565b92915050565b600060208284031215610f6957610f68610dba565b5b6000610f7784828501610f3e565b91505092915050565b610f8981610e29565b82525050565b6000602082019050610fa46000830184610f80565b92915050565b610fb381610ec1565b8114610fbe57600080fd5b50565b600081359050610fd081610faa565b92915050565b60008060408385031215610fed57610fec610dba565b5b6000610ffb85828601610fc1565b925050602061100c85828601610f3e565b9150509250929050565b60008060006060848603121561102f5761102e610dba565b5b600061103d86828701610fc1565b935050602061104e86828701610f3e565b925050604061105f86828701610e4c565b9150509250925092565b600080604083850312156110805761107f610dba565b5b600061108e85828601610f3e565b925050602061109f85828601610e4c565b9150509250929050565b600082825260208201905092915050565b7f4e4f545f414c4c4f574544000000000000000000000000000000000000000000600082015250565b60006110f0600b836110a9565b91506110fb826110ba565b602082019050919050565b6000602082019050818103600083015261111f816110e3565b9050919050565b7f42617463683a20746f6f206d616e792061646472657373657300000000000000600082015250565b600061115c6019836110a9565b915061116782611126565b602082019050919050565b6000602082019050818103600083015261118b8161114f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000611205826111f0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611237576112366111c1565b5b600182019050919050565b61124b81610f15565b82525050565b60006040820190506112666000830185610ecb565b6112736020830184611242565b939250505056fea26469706673582212201c757fcb7fc522b7b209ad89a10d9a282268f859c85300b0aa49dcd0e07726fe64736f6c63430008110033";

type ArexaTokenAMLFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArexaTokenAMLFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArexaTokenAMLFacet__factory extends ContractFactory {
  constructor(...args: ArexaTokenAMLFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ArexaTokenAMLFacet> {
    return super.deploy(overrides || {}) as Promise<ArexaTokenAMLFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ArexaTokenAMLFacet {
    return super.attach(address) as ArexaTokenAMLFacet;
  }
  override connect(signer: Signer): ArexaTokenAMLFacet__factory {
    return super.connect(signer) as ArexaTokenAMLFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArexaTokenAMLFacetInterface {
    return new utils.Interface(_abi) as ArexaTokenAMLFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArexaTokenAMLFacet {
    return new Contract(address, _abi, signerOrProvider) as ArexaTokenAMLFacet;
  }
}
