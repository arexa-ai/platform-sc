/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ArexaDiamondDummyImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaDiamondDummyImplementation__factory>;
    getContractFactory(
      name: "TokenDiamondDummyImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenDiamondDummyImplementation__factory>;
    getContractFactory(
      name: "ArexaACLFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaACLFacet__factory>;
    getContractFactory(
      name: "ArexaAdminFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaAdminFacet__factory>;
    getContractFactory(
      name: "ArexaAMLFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaAMLFacet__factory>;
    getContractFactory(
      name: "ArexaOwnershipFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaOwnershipFacet__factory>;
    getContractFactory(
      name: "ArexaPausableFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPausableFacet__factory>;
    getContractFactory(
      name: "ArexaPfmTokenAllowanceFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPfmTokenAllowanceFacet__factory>;
    getContractFactory(
      name: "ArexaPfmTokenEnumerableFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPfmTokenEnumerableFacet__factory>;
    getContractFactory(
      name: "ArexaPfmTokenFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPfmTokenFacet__factory>;
    getContractFactory(
      name: "ArexaPfmTokenMetadataURIFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPfmTokenMetadataURIFacet__factory>;
    getContractFactory(
      name: "ArexaPfmTokenReceiverFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPfmTokenReceiverFacet__factory>;
    getContractFactory(
      name: "ArexaPlatformAdminFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPlatformAdminFacet__factory>;
    getContractFactory(
      name: "ArexaPlatformFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPlatformFacet__factory>;
    getContractFactory(
      name: "ArexaPoolPNLFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPoolPNLFacet__factory>;
    getContractFactory(
      name: "ArexaRestrictionFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaRestrictionFacet__factory>;
    getContractFactory(
      name: "ArexaStakingFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaStakingFacet__factory>;
    getContractFactory(
      name: "LibArexaConst",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibArexaConst__factory>;
    getContractFactory(
      name: "LibArexaPlatformShared",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibArexaPlatformShared__factory>;
    getContractFactory(
      name: "ArexaTokenACLFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaTokenACLFacet__factory>;
    getContractFactory(
      name: "ArexaTokenAdminFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaTokenAdminFacet__factory>;
    getContractFactory(
      name: "ArexaTokenAMLFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaTokenAMLFacet__factory>;
    getContractFactory(
      name: "ArexaTokenFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaTokenFacet__factory>;
    getContractFactory(
      name: "ArexaTokenOwnershipFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaTokenOwnershipFacet__factory>;
    getContractFactory(
      name: "ArexaTokenPausableFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaTokenPausableFacet__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "LibAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAccessControl__factory>;
    getContractFactory(
      name: "LibBlackWhiteList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBlackWhiteList__factory>;
    getContractFactory(
      name: "IBridgeableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeableToken__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "LibDiamondEtherscan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamondEtherscan__factory>;
    getContractFactory(
      name: "LibERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibERC1155__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Allowance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Allowance__factory>;
    getContractFactory(
      name: "IERC1155Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Enumerable__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Pausable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Base__factory>;
    getContractFactory(
      name: "LibERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibERC20Base__factory>;
    getContractFactory(
      name: "ERC20Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Extended__factory>;
    getContractFactory(
      name: "IERC20Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Extended__factory>;
    getContractFactory(
      name: "IERC20ExtendedInternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20ExtendedInternal__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "TokenACLFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenACLFacet__factory>;
    getContractFactory(
      name: "TokenAdminFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenAdminFacet__factory>;
    getContractFactory(
      name: "TokenAMLFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenAMLFacet__factory>;
    getContractFactory(
      name: "TokenFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenFacet__factory>;
    getContractFactory(
      name: "TokenOwnershipFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenOwnershipFacet__factory>;
    getContractFactory(
      name: "TokenPausableFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenPausableFacet__factory>;
    getContractFactory(
      name: "USmartERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USmartERC20__factory>;
    getContractFactory(
      name: "LibTokenConst",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibTokenConst__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "LibTargetedPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibTargetedPausable__factory>;
    getContractFactory(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondCutFacet__factory>;
    getContractFactory(
      name: "DiamondEtherscanFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondEtherscanFacet__factory>;
    getContractFactory(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondLoupeFacet__factory>;
    getContractFactory(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondCut__factory>;
    getContractFactory(
      name: "IDiamondEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondEvents__factory>;
    getContractFactory(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondLoupe__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC173",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC173__factory>;
    getContractFactory(
      name: "ArexaPlatformDiamondInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaPlatformDiamondInit__factory>;
    getContractFactory(
      name: "ArexaTokenDiamondInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArexaTokenDiamondInit__factory>;
    getContractFactory(
      name: "AddressUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressUtils__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EnumerableSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnumerableSet__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "UintUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UintUtils__factory>;

    getContractAt(
      name: "ArexaDiamondDummyImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaDiamondDummyImplementation>;
    getContractAt(
      name: "TokenDiamondDummyImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenDiamondDummyImplementation>;
    getContractAt(
      name: "ArexaACLFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaACLFacet>;
    getContractAt(
      name: "ArexaAdminFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaAdminFacet>;
    getContractAt(
      name: "ArexaAMLFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaAMLFacet>;
    getContractAt(
      name: "ArexaOwnershipFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaOwnershipFacet>;
    getContractAt(
      name: "ArexaPausableFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPausableFacet>;
    getContractAt(
      name: "ArexaPfmTokenAllowanceFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPfmTokenAllowanceFacet>;
    getContractAt(
      name: "ArexaPfmTokenEnumerableFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPfmTokenEnumerableFacet>;
    getContractAt(
      name: "ArexaPfmTokenFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPfmTokenFacet>;
    getContractAt(
      name: "ArexaPfmTokenMetadataURIFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPfmTokenMetadataURIFacet>;
    getContractAt(
      name: "ArexaPfmTokenReceiverFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPfmTokenReceiverFacet>;
    getContractAt(
      name: "ArexaPlatformAdminFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPlatformAdminFacet>;
    getContractAt(
      name: "ArexaPlatformFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPlatformFacet>;
    getContractAt(
      name: "ArexaPoolPNLFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPoolPNLFacet>;
    getContractAt(
      name: "ArexaRestrictionFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaRestrictionFacet>;
    getContractAt(
      name: "ArexaStakingFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaStakingFacet>;
    getContractAt(
      name: "LibArexaConst",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibArexaConst>;
    getContractAt(
      name: "LibArexaPlatformShared",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibArexaPlatformShared>;
    getContractAt(
      name: "ArexaTokenACLFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaTokenACLFacet>;
    getContractAt(
      name: "ArexaTokenAdminFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaTokenAdminFacet>;
    getContractAt(
      name: "ArexaTokenAMLFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaTokenAMLFacet>;
    getContractAt(
      name: "ArexaTokenFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaTokenFacet>;
    getContractAt(
      name: "ArexaTokenOwnershipFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaTokenOwnershipFacet>;
    getContractAt(
      name: "ArexaTokenPausableFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaTokenPausableFacet>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "LibAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibAccessControl>;
    getContractAt(
      name: "LibBlackWhiteList",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBlackWhiteList>;
    getContractAt(
      name: "IBridgeableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeableToken>;
    getContractAt(
      name: "LibDiamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "LibDiamondEtherscan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamondEtherscan>;
    getContractAt(
      name: "LibERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibERC1155>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Allowance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Allowance>;
    getContractAt(
      name: "IERC1155Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Enumerable>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Pausable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Base>;
    getContractAt(
      name: "LibERC20Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibERC20Base>;
    getContractAt(
      name: "ERC20Extended",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Extended>;
    getContractAt(
      name: "IERC20Extended",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Extended>;
    getContractAt(
      name: "IERC20ExtendedInternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20ExtendedInternal>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Metadata>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "TokenACLFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenACLFacet>;
    getContractAt(
      name: "TokenAdminFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenAdminFacet>;
    getContractAt(
      name: "TokenAMLFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenAMLFacet>;
    getContractAt(
      name: "TokenFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenFacet>;
    getContractAt(
      name: "TokenOwnershipFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenOwnershipFacet>;
    getContractAt(
      name: "TokenPausableFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenPausableFacet>;
    getContractAt(
      name: "USmartERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USmartERC20>;
    getContractAt(
      name: "LibTokenConst",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibTokenConst>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "LibTargetedPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibTargetedPausable>;
    getContractAt(
      name: "Diamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Diamond>;
    getContractAt(
      name: "DiamondCutFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondCutFacet>;
    getContractAt(
      name: "DiamondEtherscanFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondEtherscanFacet>;
    getContractAt(
      name: "DiamondLoupeFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondLoupeFacet>;
    getContractAt(
      name: "IDiamondCut",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondCut>;
    getContractAt(
      name: "IDiamondEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondEvents>;
    getContractAt(
      name: "IDiamondLoupe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondLoupe>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC173",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC173>;
    getContractAt(
      name: "ArexaPlatformDiamondInit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaPlatformDiamondInit>;
    getContractAt(
      name: "ArexaTokenDiamondInit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArexaTokenDiamondInit>;
    getContractAt(
      name: "AddressUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressUtils>;
    getContractAt(
      name: "ECDSA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EnumerableSet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnumerableSet>;
    getContractAt(
      name: "SafeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "UintUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UintUtils>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
