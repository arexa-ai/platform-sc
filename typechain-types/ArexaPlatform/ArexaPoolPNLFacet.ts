/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ArexaPoolPNLFacetInterface extends utils.Interface {
  functions: {
    "calcDivident(address)": FunctionFragment;
    "getArexaIncomeParameter(uint256)": FunctionFragment;
    "getInventory()": FunctionFragment;
    "getInventoryItem(address)": FunctionFragment;
    "getPoolAndArexaIncomeBalances()": FunctionFragment;
    "payoutArexaDivident(address,uint256)": FunctionFragment;
    "payoutArexaIncome(address,uint256)": FunctionFragment;
    "payoutDivident(uint256)": FunctionFragment;
    "setArexaIncomeParameter(uint256,uint32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calcDivident"
      | "getArexaIncomeParameter"
      | "getInventory"
      | "getInventoryItem"
      | "getPoolAndArexaIncomeBalances"
      | "payoutArexaDivident"
      | "payoutArexaIncome"
      | "payoutDivident"
      | "setArexaIncomeParameter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcDivident",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArexaIncomeParameter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInventory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInventoryItem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAndArexaIncomeBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payoutArexaDivident",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutArexaIncome",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutDivident",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArexaIncomeParameter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcDivident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArexaIncomeParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventoryItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAndArexaIncomeBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutArexaDivident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutArexaIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutDivident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArexaIncomeParameter",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ArexaPoolPNLFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArexaPoolPNLFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { pool: number; arexa: number }>;

    getInventory(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        sumQuantity: BigNumber;
        sumAmount: BigNumber;
        sumPnl: BigNumber;
      }
    >;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        deltaPnl: BigNumber;
        payedPnl: BigNumber;
      }
    >;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pool: BigNumber;
        poolPaidOut: BigNumber;
        arexa: BigNumber;
        arexaPaidOut: BigNumber;
      }
    >;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calcDivident(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getArexaIncomeParameter(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { pool: number; arexa: number }>;

  getInventory(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      isEnabled: boolean;
      sumQuantity: BigNumber;
      sumAmount: BigNumber;
      sumPnl: BigNumber;
    }
  >;

  getInventoryItem(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      quantity: BigNumber;
      deltaPnl: BigNumber;
      payedPnl: BigNumber;
    }
  >;

  getPoolAndArexaIncomeBalances(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pool: BigNumber;
      poolPaidOut: BigNumber;
      arexa: BigNumber;
      arexaPaidOut: BigNumber;
    }
  >;

  payoutArexaDivident(
    toAccount: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoutArexaIncome(
    toAccount: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoutDivident(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArexaIncomeParameter(
    tokenId: PromiseOrValue<BigNumberish>,
    pool: PromiseOrValue<BigNumberish>,
    arexa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { pool: number; arexa: number }>;

    getInventory(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        sumQuantity: BigNumber;
        sumAmount: BigNumber;
        sumPnl: BigNumber;
      }
    >;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        deltaPnl: BigNumber;
        payedPnl: BigNumber;
      }
    >;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pool: BigNumber;
        poolPaidOut: BigNumber;
        arexa: BigNumber;
        arexaPaidOut: BigNumber;
      }
    >;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInventory(overrides?: CallOverrides): Promise<BigNumber>;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcDivident(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInventory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInventoryItem(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAndArexaIncomeBalances(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutArexaDivident(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoutArexaIncome(
      toAccount: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoutDivident(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArexaIncomeParameter(
      tokenId: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<BigNumberish>,
      arexa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
