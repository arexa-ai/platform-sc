/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ArexaPlatformFacetInterface extends utils.Interface {
  functions: {
    "AMOUNT_VALUE_TYPE()": FunctionFragment;
    "AREXA_TOKEN_ID()": FunctionFragment;
    "AREXA_TOKEN_POOL_AREXAINC()": FunctionFragment;
    "AREXA_TOKEN_POOL_DEVELOPMENT()": FunctionFragment;
    "AREXA_TOKEN_POOL_INVESTOR()": FunctionFragment;
    "AREXA_TOKEN_POOL_MARKETING()": FunctionFragment;
    "AREXA_TOKEN_POOL_RESERVED()": FunctionFragment;
    "MAGIC_TOKEN_ID()": FunctionFragment;
    "QUANTITY_VALUE_TYPE()": FunctionFragment;
    "SUBSCR1_TOKEN_TYPE()": FunctionFragment;
    "SUBSCR2_TOKEN_TYPE()": FunctionFragment;
    "TRADER_TOKEN_ID()": FunctionFragment;
    "buyArexaToken(uint128,uint8)": FunctionFragment;
    "buyEdgeSubscription(uint32)": FunctionFragment;
    "buyMagic100Token()": FunctionFragment;
    "buyOracleSubscription(uint32)": FunctionFragment;
    "buySubscription(uint256,uint32)": FunctionFragment;
    "buyTraderToken(uint128,uint8)": FunctionFragment;
    "calcSubscriptionPrice(uint256,uint32)": FunctionFragment;
    "getCurrentSubscriptionTokenId(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AMOUNT_VALUE_TYPE"
      | "AREXA_TOKEN_ID"
      | "AREXA_TOKEN_POOL_AREXAINC"
      | "AREXA_TOKEN_POOL_DEVELOPMENT"
      | "AREXA_TOKEN_POOL_INVESTOR"
      | "AREXA_TOKEN_POOL_MARKETING"
      | "AREXA_TOKEN_POOL_RESERVED"
      | "MAGIC_TOKEN_ID"
      | "QUANTITY_VALUE_TYPE"
      | "SUBSCR1_TOKEN_TYPE"
      | "SUBSCR2_TOKEN_TYPE"
      | "TRADER_TOKEN_ID"
      | "buyArexaToken"
      | "buyEdgeSubscription"
      | "buyMagic100Token"
      | "buyOracleSubscription"
      | "buySubscription"
      | "buyTraderToken"
      | "calcSubscriptionPrice"
      | "getCurrentSubscriptionTokenId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AMOUNT_VALUE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_AREXAINC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_DEVELOPMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_INVESTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_MARKETING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AREXA_TOKEN_POOL_RESERVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGIC_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUANTITY_VALUE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCR1_TOKEN_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCR2_TOKEN_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADER_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyArexaToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyEdgeSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyMagic100Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyOracleSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buySubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTraderToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSubscriptionPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSubscriptionTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AMOUNT_VALUE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_AREXAINC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_DEVELOPMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_INVESTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_MARKETING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AREXA_TOKEN_POOL_RESERVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGIC_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUANTITY_VALUE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCR1_TOKEN_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCR2_TOKEN_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADER_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyArexaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyEdgeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMagic100Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyOracleSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTraderToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSubscriptionTokenId",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ArexaPlatformFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArexaPlatformFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<[number]>;

    AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<[number]>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<[number]>;

    SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyMagic100Token(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<number>;

  AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<number>;

  MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

  SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  buyArexaToken(
    value: PromiseOrValue<BigNumberish>,
    valueType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyEdgeSubscription(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyMagic100Token(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyOracleSubscription(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buySubscription(
    tokenId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTraderToken(
    value: PromiseOrValue<BigNumberish>,
    valueType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcSubscriptionPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentSubscriptionTokenId(
    tokenType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<number>;

    AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<number>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<number>;

    SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyMagic100Token(overrides?: CallOverrides): Promise<void>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_AREXAINC(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_DEVELOPMENT(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_INVESTOR(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_MARKETING(overrides?: CallOverrides): Promise<BigNumber>;

    AREXA_TOKEN_POOL_RESERVED(overrides?: CallOverrides): Promise<BigNumber>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    QUANTITY_VALUE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCR1_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCR2_TOKEN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyMagic100Token(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AMOUNT_VALUE_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AREXA_TOKEN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_AREXAINC(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_DEVELOPMENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_INVESTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_MARKETING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AREXA_TOKEN_POOL_RESERVED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGIC_TOKEN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QUANTITY_VALUE_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCR1_TOKEN_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCR2_TOKEN_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRADER_TOKEN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyArexaToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyEdgeSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyMagic100Token(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyOracleSubscription(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buySubscription(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTraderToken(
      value: PromiseOrValue<BigNumberish>,
      valueType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcSubscriptionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentSubscriptionTokenId(
      tokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
