/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ArexaPausableFacetInterface extends utils.Interface {
  functions: {
    "PAUSABLE_AREXA_TOKEN()": FunctionFragment;
    "PAUSABLE_FULL()": FunctionFragment;
    "PAUSABLE_MAGIC_TOKEN()": FunctionFragment;
    "PAUSABLE_SUBSCR1_TOKEN()": FunctionFragment;
    "PAUSABLE_SUBSCR2_TOKEN()": FunctionFragment;
    "PAUSABLE_TRADER_TOKEN()": FunctionFragment;
    "pause(bytes32)": FunctionFragment;
    "pauseAllToken()": FunctionFragment;
    "pauseToken(uint256)": FunctionFragment;
    "paused(bytes32)": FunctionFragment;
    "unpause(bytes32)": FunctionFragment;
    "unpauseAllToken()": FunctionFragment;
    "unpauseToken(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PAUSABLE_AREXA_TOKEN"
      | "PAUSABLE_FULL"
      | "PAUSABLE_MAGIC_TOKEN"
      | "PAUSABLE_SUBSCR1_TOKEN"
      | "PAUSABLE_SUBSCR2_TOKEN"
      | "PAUSABLE_TRADER_TOKEN"
      | "pause"
      | "pauseAllToken"
      | "pauseToken"
      | "paused"
      | "unpause"
      | "unpauseAllToken"
      | "unpauseToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PAUSABLE_AREXA_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_FULL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_MAGIC_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_SUBSCR1_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_SUBSCR2_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSABLE_TRADER_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseAllToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "paused",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseAllToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "PAUSABLE_AREXA_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_FULL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_MAGIC_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_SUBSCR1_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_SUBSCR2_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSABLE_TRADER_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAllToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseAllToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseToken",
    data: BytesLike
  ): Result;

  events: {
    "AllTokenPaused(address)": EventFragment;
    "AllTokenUnpaused(address)": EventFragment;
    "TokenPaused(address,uint256)": EventFragment;
    "TokenUnpaused(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllTokenPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllTokenUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnpaused"): EventFragment;
}

export interface AllTokenPausedEventObject {
  account: string;
}
export type AllTokenPausedEvent = TypedEvent<
  [string],
  AllTokenPausedEventObject
>;

export type AllTokenPausedEventFilter = TypedEventFilter<AllTokenPausedEvent>;

export interface AllTokenUnpausedEventObject {
  account: string;
}
export type AllTokenUnpausedEvent = TypedEvent<
  [string],
  AllTokenUnpausedEventObject
>;

export type AllTokenUnpausedEventFilter =
  TypedEventFilter<AllTokenUnpausedEvent>;

export interface TokenPausedEventObject {
  account: string;
  tokenId: BigNumber;
}
export type TokenPausedEvent = TypedEvent<
  [string, BigNumber],
  TokenPausedEventObject
>;

export type TokenPausedEventFilter = TypedEventFilter<TokenPausedEvent>;

export interface TokenUnpausedEventObject {
  account: string;
  tokenId: BigNumber;
}
export type TokenUnpausedEvent = TypedEvent<
  [string, BigNumber],
  TokenUnpausedEventObject
>;

export type TokenUnpausedEventFilter = TypedEventFilter<TokenUnpausedEvent>;

export interface ArexaPausableFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArexaPausableFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status_: boolean }>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_FULL(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<string>;

  PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<string>;

  pause(
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseAllToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(
    target: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseAllToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<string>;

    PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<string>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAllToken(overrides?: CallOverrides): Promise<void>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseAllToken(overrides?: CallOverrides): Promise<void>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllTokenPaused(address)"(
      account?: PromiseOrValue<string> | null
    ): AllTokenPausedEventFilter;
    AllTokenPaused(
      account?: PromiseOrValue<string> | null
    ): AllTokenPausedEventFilter;

    "AllTokenUnpaused(address)"(
      account?: PromiseOrValue<string> | null
    ): AllTokenUnpausedEventFilter;
    AllTokenUnpaused(
      account?: PromiseOrValue<string> | null
    ): AllTokenUnpausedEventFilter;

    "TokenPaused(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenPausedEventFilter;
    TokenPaused(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenPausedEventFilter;

    "TokenUnpaused(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenUnpausedEventFilter;
    TokenUnpaused(
      account?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenUnpausedEventFilter;
  };

  estimateGas: {
    PAUSABLE_AREXA_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_MAGIC_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_SUBSCR1_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_SUBSCR2_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSABLE_TRADER_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PAUSABLE_AREXA_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_FULL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSABLE_MAGIC_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_SUBSCR1_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_SUBSCR2_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSABLE_TRADER_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseAllToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
